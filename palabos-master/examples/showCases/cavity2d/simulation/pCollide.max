#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2021
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          "01b2c44"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2021-05-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "pCollide"
#define MAXFILE_BUILD_DIR  "/mnt/beegfs/home/jusers/rolleri1/jumax/workspace/pCollide/./pCollide_MAX5C_DFE_SIM"
#define MAXFILE_BUILD_DATE  20230517
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(DYNAMIC_CLOCKS_ENABLED, 0)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 49)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX5_LIMA")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "pCollideKernel.h"
#endif



#ifdef ENGINE_PARAMETERS
#define ENGINE_PARAMETERS_PRESENT 1
ENGINE_PARAMETERS(maxFileName, <string>, "pCollide")
ENGINE_PARAMETERS(target, Target, DFE_SIM)
ENGINE_PARAMETERS(DFEModel, <DFEModel>, MAIA)
ENGINE_PARAMETERS(enableMPCX, <boolean>, false)
ENGINE_PARAMETERS(MPPRStartCT, <integer>, 1)
ENGINE_PARAMETERS(MPPREndCT, <integer>, 1)
ENGINE_PARAMETERS(MPPRThreads, <integer>, 1)
ENGINE_PARAMETERS(MPPRRetryThreshold, <integer>, 0)
#endif




#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(pCollideKernel, Kernel)
MANAGER_NODE(pop_in, PCIe_From_Host)
MANAGER_NODE(pop_out, PCIe_To_Host)
MANAGER_NODE(uSqr, PCIe_To_Host)
MANAGER_NODE(rhoBar, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectReg)
MANAGER_NODE(Stream_16, DualAspectMux)
MANAGER_NODE(Stream_8, DualAspectReg)
MANAGER_NODE(Stream_11, DualAspectReg)
MANAGER_NODE(Stream_5, DualAspectReg)
MANAGER_NODE(Stream_32, DualAspectMux)
MANAGER_NODE(Stream_24, StreamPullPushAdapter)
MANAGER_NODE(Stream_28, StreamPullPushAdapter)
MANAGER_NODE(Stream_14, Fifo)
MANAGER_NODE(Stream_18, Fifo)
MANAGER_NODE(Stream_20, Fifo)
MANAGER_NODE(Stream_26, Fifo)
MANAGER_NODE(Stream_30, Fifo)
MANAGER_NODE(Stream_22, Fifo)
MANAGER_NODE(Stream_34, Fifo)
MANAGER_NODE(Stream_36, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(pCollideKernel, pop_in, IN, STREAM, 576, PULL)
MANAGER_NODE_IO(pCollideKernel, rhoBar, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(pCollideKernel, uSqr, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(pCollideKernel, pop_out, OUT, STREAM, 576, PUSH)
MANAGER_NODE_IO(pop_in, pop_in, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(pop_out, pop_out, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(uSqr, uSqr, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(rhoBar, rhoBar, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, STREAM, 1152, PULL)
MANAGER_NODE_IO(Stream_16, input, IN, STREAM, 1152, PULL)
MANAGER_NODE_IO(Stream_16, output, OUT, STREAM, 576, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_11, input, IN, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_11, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_5, input, IN, PCIE, 576, PULL)
MANAGER_NODE_IO(Stream_5, output, OUT, PCIE, 1152, PULL)
MANAGER_NODE_IO(Stream_32, input, IN, PCIE, 1152, PULL)
MANAGER_NODE_IO(Stream_32, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_24, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_24, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_28, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_28, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_18, input, IN, STREAM, 1152, PULL)
MANAGER_NODE_IO(Stream_18, output, OUT, STREAM, 1152, PULL)
MANAGER_NODE_IO(Stream_20, input, IN, STREAM, 576, PUSH)
MANAGER_NODE_IO(Stream_20, output, OUT, STREAM, 576, PULL)
MANAGER_NODE_IO(Stream_26, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_26, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_30, input, IN, STREAM, 576, PUSH)
MANAGER_NODE_IO(Stream_30, output, OUT, PCIE, 576, PULL)
MANAGER_NODE_IO(Stream_22, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_22, output, OUT, PCIE, 64, PULL)
MANAGER_NODE_IO(Stream_34, input, IN, PCIE, 1152, PULL)
MANAGER_NODE_IO(Stream_34, output, OUT, PCIE, 1152, PULL)
MANAGER_NODE_IO(Stream_36, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_36, output, OUT, PCIE, 128, PUSH)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(pop_in, pop_in, Stream_14, input, 128)
MANAGER_STREAM(pCollideKernel, pop_out, Stream_30, input, 576)
MANAGER_STREAM(pCollideKernel, uSqr, Stream_22, input, 64)
MANAGER_STREAM(pCollideKernel, rhoBar, Stream_26, input, 64)
MANAGER_STREAM(Stream_1, output, Stream_18, input, 1152)
MANAGER_STREAM(Stream_16, output, Stream_20, input, 576)
MANAGER_STREAM(Stream_8, output, Stream_24, input, 128)
MANAGER_STREAM(Stream_11, output, Stream_28, input, 128)
MANAGER_STREAM(Stream_5, output, Stream_34, input, 1152)
MANAGER_STREAM(Stream_32, output, Stream_36, input, 128)
MANAGER_STREAM(Stream_24, output, uSqr, uSqr, 128)
MANAGER_STREAM(Stream_28, output, rhoBar, rhoBar, 128)
MANAGER_STREAM(Stream_14, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_18, output, Stream_16, input, 1152)
MANAGER_STREAM(Stream_20, output, pCollideKernel, pop_in, 576)
MANAGER_STREAM(Stream_26, output, Stream_11, input, 64)
MANAGER_STREAM(Stream_30, output, Stream_5, input, 576)
MANAGER_STREAM(Stream_22, output, Stream_8, input, 64)
MANAGER_STREAM(Stream_34, output, Stream_32, input, 1152)
MANAGER_STREAM(Stream_36, output, pop_out, pop_out, 128)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(pCollideKernel, "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(pop_in, "com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe.addStreamFromCPU(ManagerPCIe.java:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:20)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(pop_out, "com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe.addStreamToCPU(ManagerPCIe.java:29)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:21)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(uSqr, "com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe.addStreamToCPU(ManagerPCIe.java:29)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:22)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(rhoBar, "com.maxeler.maxcompiler.v2.managers.custom.api.ManagerPCIe.addStreamToCPU(ManagerPCIe.java:29)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:23)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_16, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_11, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_5, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_32, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_24, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_28, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_18, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_20, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_26, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_30, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_22, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_34, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
MANAGER_NODE_STACK_TRACE(Stream_36, "com.maxeler.platform.max5.manager.Max5ManagerBase.build(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:29)\n")
#endif


#ifdef USER_CLOCKS
#define USER_CLOCKS_PRESENT 1
USER_CLOCKS(STREAM, 100.0, false)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(pCollideKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(pCollideKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(pCollideKernel, pCollideKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(pCollideKernel, pop_in, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(pCollideKernel, rhoBar, 0)
DEBUG_OUTPUT_BITS(pCollideKernel, uSqr, 1)
DEBUG_OUTPUT_BITS(pCollideKernel, pop_out, 2)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(pop_in, PCIePushSourceSync16, "pop_in")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, FifoPushToPullSync, "Stream_14", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectRegSync, "Stream_1", 128, 9)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_18, FifoPullToPullSync, "Stream_18", false, 512, 1152)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_16, DualAspectMuxSync, "Stream_16", 576, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_20, FifoPushToPullSync, "Stream_20", false, 512, 576)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(pCollideKernel, pCollideKernel, "pCollideKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_30, FifoPushToPullSync, "Stream_30", false, 512, 576)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_22, FifoPushToPullSync, "Stream_22", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_26, FifoPushToPullSync, "Stream_26", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_11, DualAspectRegSync, "Stream_11", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_5, DualAspectRegSync, "Stream_5", 576, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, DualAspectRegSync, "Stream_8", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_28, PullToPushAdapterSync, "Stream_28")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_34, FifoPullToPullSync, "Stream_34", false, 512, 1152)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_24, PullToPushAdapterSync, "Stream_24")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_32, DualAspectMuxSync, "Stream_32", 128, 9)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(uSqr, PCIePushSinkSync16, "uSqr")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(rhoBar, PCIePushSinkSync16, "rhoBar")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_36, FifoPushToPushSync, "Stream_36", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(pop_out, PCIePushSinkSync16, "pop_out")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 3, 0, 0, 0, 0, 0, 49)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "76ff519856317deecd2e2b4d8e4526964d87e9c99c63953799681342c06daef1")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_fill_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_flush_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_flush_start_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_full_level, 9, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_out_stall, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_out_valid, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(pCollideKernel, addDebugRegister, reg_dbg_stall_vector, 3, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(pop_in, STREAM_FROM_HOST, 0)
PCIE_STREAM(uSqr, STREAM_TO_HOST, 0)
PCIE_STREAM(rhoBar, STREAM_TO_HOST, 1)
PCIE_STREAM(pop_out, STREAM_TO_HOST, 2)
#endif








#ifdef REG
#define REG_PRESENT 1
REG(pCollideKernel.omega, 0x0, 8, hwFloat(11, 53))
REG(pCollideKernel.io_pop_in_force_disabled, 0x8, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(pCollideKernel.io_rhoBar_force_disabled, 0x9, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(pCollideKernel.io_uSqr_force_disabled, 0xa, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(pCollideKernel.io_pop_out_force_disabled, 0xb, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(pCollideKernel.run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(pCollideKernel.current_run_cycle_count, 0x12, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(pCollideKernel.dbg_ctld_almost_empty, 0x18, 1, hwBits(1))
REG(pCollideKernel.dbg_ctld_done, 0x19, 1, hwBits(1))
REG(pCollideKernel.dbg_ctld_empty, 0x1a, 1, hwBits(1))
REG(pCollideKernel.dbg_ctld_read, 0x1b, 1, hwBits(1))
REG(pCollideKernel.dbg_ctld_read_pipe_dbg, 0x1c, 1, hwBits(3))
REG(pCollideKernel.dbg_ctld_request, 0x1d, 1, hwBits(1))
REG(pCollideKernel.dbg_done_out, 0x1e, 1, hwBits(1))
REG(pCollideKernel.dbg_fill_level, 0x1f, 2, hwBits(9))
REG(pCollideKernel.dbg_flush_level, 0x21, 2, hwBits(9))
REG(pCollideKernel.dbg_flush_start, 0x23, 1, hwBits(1))
REG(pCollideKernel.dbg_flush_start_level, 0x24, 2, hwBits(9))
REG(pCollideKernel.dbg_flushing, 0x26, 1, hwBits(1))
REG(pCollideKernel.dbg_full_level, 0x27, 2, hwBits(9))
REG(pCollideKernel.dbg_out_stall, 0x29, 1, hwBits(3))
REG(pCollideKernel.dbg_out_valid, 0x2a, 1, hwBits(3))
REG(pCollideKernel.dbg_stall_vector, 0x2b, 1, hwBits(3))
REG(ifpga.ifpga_ctrl, 0x2c, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x2d, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(pCollideKernel.omega, 0x0, 8, hwFloat(11, 53), HOST_WRITE_ONLY, false)
REG_V2(pCollideKernel.io_pop_in_force_disabled, 0x8, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(pCollideKernel.io_rhoBar_force_disabled, 0x9, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(pCollideKernel.io_uSqr_force_disabled, 0xa, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(pCollideKernel.io_pop_out_force_disabled, 0xb, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(pCollideKernel.run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(pCollideKernel.current_run_cycle_count, 0x12, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_ctld_almost_empty, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_ctld_done, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_ctld_empty, 0x1a, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_ctld_read, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_ctld_read_pipe_dbg, 0x1c, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_ctld_request, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_done_out, 0x1e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_fill_level, 0x1f, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_flush_level, 0x21, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_flush_start, 0x23, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_flush_start_level, 0x24, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_flushing, 0x26, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_full_level, 0x27, 2, hwBits(9), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_out_stall, 0x29, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_out_valid, 0x2a, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(pCollideKernel.dbg_stall_vector, 0x2b, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x2c, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x2d, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("76ff519856317deecd2e2b4d8e4526964d87e9c99c63953799681342c06daef1")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(LIMAREV, LIMAREVA)
CAPABILITY(LIMARAM, DDR4_48GB)
CAPABILITY(LIMAFPGA, xcVU9P_FLGB2104_2_E)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME pCollide
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_pCollide_H
#define SLIC_DECLARATIONS_pCollide_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define pCollide_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] ticks_pCollideKernel The number of ticks for which kernel "pCollideKernel" will run.
 * \param [in] inscalar_pCollideKernel_omega Input scalar parameter "pCollideKernel.omega".
 * \param [in] instream_pop_in Stream "pop_in".
 * \param [in] instream_size_pop_in The size of the stream instream_pop_in in bytes.
 * \param [out] outstream_pop_out Stream "pop_out".
 * \param [in] outstream_size_pop_out The size of the stream outstream_pop_out in bytes.
 * \param [out] outstream_rhoBar Stream "rhoBar".
 * \param [in] outstream_size_rhoBar The size of the stream outstream_rhoBar in bytes.
 * \param [out] outstream_uSqr Stream "uSqr".
 * \param [in] outstream_size_uSqr The size of the stream outstream_uSqr in bytes.
 */
void pCollide(
	uint64_t ticks_pCollideKernel,
	double inscalar_pCollideKernel_omega,
	const void *instream_pop_in,
	size_t instream_size_pop_in,
	void *outstream_pop_out,
	size_t outstream_size_pop_out,
	void *outstream_rhoBar,
	size_t outstream_size_rhoBar,
	void *outstream_uSqr,
	size_t outstream_size_uSqr);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] ticks_pCollideKernel The number of ticks for which kernel "pCollideKernel" will run.
 * \param [in] inscalar_pCollideKernel_omega Input scalar parameter "pCollideKernel.omega".
 * \param [in] instream_pop_in Stream "pop_in".
 * \param [in] instream_size_pop_in The size of the stream instream_pop_in in bytes.
 * \param [out] outstream_pop_out Stream "pop_out".
 * \param [in] outstream_size_pop_out The size of the stream outstream_pop_out in bytes.
 * \param [out] outstream_rhoBar Stream "rhoBar".
 * \param [in] outstream_size_rhoBar The size of the stream outstream_rhoBar in bytes.
 * \param [out] outstream_uSqr Stream "uSqr".
 * \param [in] outstream_size_uSqr The size of the stream outstream_uSqr in bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *pCollide_nonblock(
	uint64_t ticks_pCollideKernel,
	double inscalar_pCollideKernel_omega,
	const void *instream_pop_in,
	size_t instream_size_pop_in,
	void *outstream_pop_out,
	size_t outstream_size_pop_out,
	void *outstream_rhoBar,
	size_t outstream_size_rhoBar,
	void *outstream_uSqr,
	size_t outstream_size_uSqr);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t ticks_pCollideKernel; /**<  [in] The number of ticks for which kernel "pCollideKernel" will run. */
	double inscalar_pCollideKernel_omega; /**<  [in] Input scalar parameter "pCollideKernel.omega". */
	const void *instream_pop_in; /**<  [in] Stream "pop_in". */
	size_t instream_size_pop_in; /**<  [in] The size of the stream instream_pop_in in bytes. */
	void *outstream_pop_out; /**<  [out] Stream "pop_out". */
	size_t outstream_size_pop_out; /**<  [in] The size of the stream outstream_pop_out in bytes. */
	void *outstream_rhoBar; /**<  [out] Stream "rhoBar". */
	size_t outstream_size_rhoBar; /**<  [in] The size of the stream outstream_rhoBar in bytes. */
	void *outstream_uSqr; /**<  [out] Stream "uSqr". */
	size_t outstream_size_uSqr; /**<  [in] The size of the stream outstream_uSqr in bytes. */
} pCollide_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void pCollide_run(
	max_engine_t *engine,
	pCollide_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *pCollide_run_nonblock(
	max_engine_t *engine,
	pCollide_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void pCollide_run_group(max_group_t *group, pCollide_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *pCollide_run_group_nonblock(max_group_t *group, pCollide_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void pCollide_run_array(max_engarray_t *engarray, pCollide_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *pCollide_run_array_nonblock(max_engarray_t *engarray, pCollide_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* pCollide_convert(max_file_t *maxfile, pCollide_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* pCollide_init(void);

/* Error handling functions */
int pCollide_has_errors(void);
const char* pCollide_get_errors(void);
void pCollide_clear_errors(void);
/* Free statically allocated maxfile data */
void pCollide_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int pCollide_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int pCollide_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_pCollide_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(pCollideKernel, 299, NodeInputMappedReg, "Scalar input (io_rhoBar_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:70)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 300, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:70)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 1, NodeInputMappedReg, "Scalar input (io_pop_in_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 2, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 3, NodeInput, "Input(pop_in)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 4, NodeSlice, "[63:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 5, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 6, NodeSlice, "[127:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 7, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 22, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 8, NodeSlice, "[191:128]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 9, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 438, NodeFIFO, "FIFO(14)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 23, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 10, NodeSlice, "[255:192]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 11, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 439, NodeFIFO, "FIFO(28)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 24, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 12, NodeSlice, "[319:256]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 440, NodeFIFO, "FIFO(42)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 13, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 25, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 14, NodeSlice, "[383:320]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 15, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 441, NodeFIFO, "FIFO(56)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 26, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 16, NodeSlice, "[447:384]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 17, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 442, NodeFIFO, "FIFO(70)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 27, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 18, NodeSlice, "[511:448]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 19, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 443, NodeFIFO, "FIFO(84)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 28, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 20, NodeSlice, "[575:512]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 444, NodeFIFO, "FIFO(98)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 21, NodeReinterpret, "<{HWFloat:11, 53}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:629)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:39)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 29, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:43)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 466, NodeFIFO, "FIFO(69)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 527, NodeFIFO, "FIFO(26)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 302, NodeOutput, "Output(rhoBar)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:70)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 304, NodeInputMappedReg, "Scalar input (io_uSqr_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:71)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 305, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:71)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 523, NodeFIFO, "FIFO(45)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 446, NodeFIFO, "FIFO(73)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 520, NodeFIFO, "FIFO(59)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 360, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:45)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 521, NodeFIFO, "FIFO(45)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 522, NodeFIFO, "FIFO(14)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 363, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:45)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 365, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:45)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 524, NodeFIFO, "FIFO(45)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 49, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:45)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 525, NodeFIFO, "FIFO(31)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 526, NodeFIFO, "FIFO(14)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 52, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:45)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 452, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 86, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:50)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 367, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:47)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 456, NodeFIFO, "FIFO(45)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 369, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:47)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 371, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:47)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 78, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:47)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 459, NodeFIFO, "FIFO(31)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 81, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:47)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 460, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 87, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:50)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 88, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:50)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 462, NodeFIFO, "FIFO(2)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 437, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.divAsRHS(DFEVar.java:1090)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:49)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 436, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:935)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:49)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 83, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:935)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:49)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 85, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.divAsRHS(DFEVar.java:1090)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:49)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 296, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:65)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 463, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 297, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:65)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 307, NodeOutput, "Output(uSqr)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:71)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 309, NodeInputMappedReg, "Scalar input (io_pop_out_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:72)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 310, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:72)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 435, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 0, NodeInputMappedReg, "Scalar input (omega)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1193)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:35)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 292, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 293, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 470, NodeFIFO, "FIFO(104)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 434, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3fbc71c71c71c71c; 0.1111111111111111", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 433, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 530, NodeFIFO, "FIFO(2)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 531, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 279, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 280, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 469, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 432, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 282, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 431, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 284, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 285, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 286, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 287, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 288, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 290, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 294, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 295, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 430, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 269, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 270, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 476, NodeFIFO, "FIFO(104)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 429, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3f9c71c71c71c71c; 0.027777777777777776", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 428, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 254, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 472, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 256, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 257, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 475, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 427, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 259, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 426, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 261, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 262, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 263, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 264, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 265, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 267, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 271, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 272, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 425, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 246, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 247, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 483, NodeFIFO, "FIFO(118)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 424, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3fbc71c71c71c71c; 0.1111111111111111", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 423, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 528, NodeFIFO, "FIFO(2)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 529, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 233, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 234, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 482, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 422, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 236, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 421, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 238, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 239, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 240, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 241, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 242, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 244, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 248, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 249, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 420, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 223, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 224, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 489, NodeFIFO, "FIFO(132)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 419, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3f9c71c71c71c71c; 0.027777777777777776", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 418, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 373, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 485, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 210, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 211, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 488, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 417, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 213, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 416, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 215, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 216, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 217, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 218, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 219, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 221, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 225, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 226, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 415, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 200, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 201, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 496, NodeFIFO, "FIFO(146)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 414, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3fbc71c71c71c71c; 0.1111111111111111", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 413, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 374, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1055)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 492, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 187, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 188, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 495, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 412, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 190, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 411, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 192, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 193, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 194, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 195, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 196, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 198, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 202, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 203, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 410, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 177, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 178, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 502, NodeFIFO, "FIFO(146)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 409, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3f9c71c71c71c71c; 0.027777777777777776", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 408, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 377, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 378, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 498, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 164, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 165, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 501, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 407, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 167, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 406, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 169, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 170, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 171, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 172, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 173, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 175, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 179, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 180, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 405, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 154, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 155, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 509, NodeFIFO, "FIFO(160)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 404, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3fbc71c71c71c71c; 0.1111111111111111", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 403, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 379, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1055)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 505, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 141, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 142, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 508, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 402, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 144, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 401, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 146, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 147, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 148, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 149, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 150, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 152, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 156, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 157, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 400, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 131, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 132, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 515, NodeFIFO, "FIFO(160)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 399, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3f9c71c71c71c71c; 0.027777777777777776", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 398, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 381, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:58)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 511, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 118, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 119, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 514, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 397, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 121, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 396, NodeConstantRawBits, "{HWFloat:11, 53}\n0x4008000000000000; 3.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 123, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 124, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 125, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 126, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 127, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 129, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 133, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 134, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 395, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff0000000000000; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 108, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.subAsRHS(DFEVar.java:1000)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 109, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 519, NodeFIFO, "FIFO(233)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 394, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3fdc71c71c71c71c; 0.4444444444444444", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 393, NodeConstantRawBits, "{HWFloat:11, 53}\n0x3ff8000000000000; 1.5", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 98, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 382, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:975)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 517, NodeFIFO, "FIFO(12)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 103, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 104, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 106, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mulAsRHS(DFEVar.java:1045)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:59)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 110, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:1020)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 111, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:930)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:61)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 389, NodeCat, "@", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 312, NodeOutput, "Output(pop_out)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:850)\ncom.maxeler.pcollide.pCollideKernel.<init>(pCollideKernel.maxj:72)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:16)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 334, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 392, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 331, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 332, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 333, NodeStreamOffset, "stream offset: 1", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 335, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 391, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 337, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 338, NodeCounter, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 340, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 390, NodeEqInlined, "==", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
PHOTON_NODE_DATA(pCollideKernel, 339, NodeFlush, "flush on trigger", "com.maxeler.platform.max5.manager.Max5ManagerBase.addKernel(Unknown Source)\ncom.maxeler.pcollide.pCollideManager.<init>(pCollideManager.maxj:17)\ncom.maxeler.pcollide.pCollideManager.main(pCollideManager.maxj:27)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int pCollide_has_errors(void)
{	return stored_has_error; }
const char* pCollide_get_errors(void)
{	return stored_error; }
void pCollide_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char pCollide_use_simulation[16];
static void pCollide_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(pCollide_use_simulation, 16, "pCollide_%05ld_", pid);
}
static const char *pCollide_check_use_simulation(void)
{
	pCollide_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = pCollide_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int pCollide_simulation_launch = 0;
int pCollide_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = pCollide_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX5C -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int pCollide_simulator_stop(void)
{
	const char *use_sim = pCollide_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX5C -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void pCollide_static_init(void) 
{
	stored_maxfile = pCollide_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = pCollide_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = pCollide_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			pCollide_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void pCollide_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (pCollide_simulation_launch == 1) {
		int sim_stat = pCollide_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		pCollide_simulation_launch = 0;
	}
}

static int pCollide_get_pcie_alignment(void)
{
#ifdef pCollide_PCIE_ALIGNMENT
	return ((pCollide_PCIE_ALIGNMENT < 1) ? 16 : pCollide_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int pCollide_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = pCollide_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *pCollide_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = pCollide_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct pCollide_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} pCollide_callback_stream_t;

typedef struct pCollide_callback_data {
	pCollide_callback_stream_t stream[4]; 
	int count;
	int max_count;
} pCollide_callback_data_t;

static void pCollide_callback_internal(void *cb_data)
{
	pCollide_callback_data_t *data = (pCollide_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		pCollide_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* pCollide_convert_internal(
	max_file_t *maxfile,
	pCollide_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	pCollide_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(pCollide_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function pCollide_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 4;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &pCollide_callback_internal;
	}

	/* code for scalar pCollideKernel.run_cycle_count */
	uint64_t ticks_pCollideKernel = interface_actions->ticks_pCollideKernel;
	max_set_ticks(actions, "pCollideKernel", ticks_pCollideKernel);
	CHECK_ERRORS;
	/* end of code for scalar pCollideKernel.run_cycle_count*/
	
	/* code for scalar pCollideKernel.omega */
	double inscalar_pCollideKernel_omega = interface_actions->inscalar_pCollideKernel_omega;
	max_set_double(actions, "pCollideKernel", "omega", inscalar_pCollideKernel_omega);
	CHECK_ERRORS;
	/* end of code for scalar pCollideKernel.omega*/
	
	/* code for stream pop_in */
	size_t instream_size_pop_in = interface_actions->instream_size_pop_in;
	if (instream_size_pop_in > 0) {
		const void *stream_ptr = interface_actions->instream_pop_in;
		if (use_callback && (1 == pCollide_check_aligned(interface_actions->instream_pop_in))) {
			void *aligned_instream_pop_in = malloc(instream_size_pop_in);
			if (aligned_instream_pop_in == NULL) {
				char error_msg[256];
				snprintf(error_msg, sizeof(error_msg) / sizeof(char),
						"Failed to allocate %zu bytes of memory for stream pop_in.",
						instream_size_pop_in);
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, error_msg);
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_pop_in;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_pop_in;
			(&cb_data->stream[cb_data->count])->size        = instream_size_pop_in;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_pop_in, interface_actions->instream_pop_in, instream_size_pop_in);
			stream_ptr = aligned_instream_pop_in;
		}
		max_queue_input(actions, "pop_in", stream_ptr, instream_size_pop_in);
		CHECK_ERRORS;
	}
	/* end of code for stream pop_in */
	
	/* code for stream pop_out */
	size_t outstream_size_pop_out = interface_actions->outstream_size_pop_out;
	if (outstream_size_pop_out > 0) {
		void *stream_ptr = interface_actions->outstream_pop_out;
		if (use_callback && (1 == pCollide_check_aligned(interface_actions->outstream_pop_out))) {
			void *aligned_outstream_pop_out = malloc(outstream_size_pop_out);
			if (aligned_outstream_pop_out == NULL) {
				char error_msg[256];
				snprintf(error_msg, sizeof(error_msg) / sizeof(char),
						"Failed to allocate %zu bytes of memory for stream pop_out.",
						outstream_size_pop_out);
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, error_msg);
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_pop_out;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_pop_out;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_pop_out;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_pop_out;
		}
		max_queue_output(actions, "pop_out", stream_ptr, outstream_size_pop_out);
		CHECK_ERRORS;
	}
	/* end of code for stream pop_out */
	
	/* code for stream rhoBar */
	size_t outstream_size_rhoBar = interface_actions->outstream_size_rhoBar;
	if (outstream_size_rhoBar > 0) {
		void *stream_ptr = interface_actions->outstream_rhoBar;
		if (use_callback && (1 == pCollide_check_aligned(interface_actions->outstream_rhoBar))) {
			void *aligned_outstream_rhoBar = malloc(outstream_size_rhoBar);
			if (aligned_outstream_rhoBar == NULL) {
				char error_msg[256];
				snprintf(error_msg, sizeof(error_msg) / sizeof(char),
						"Failed to allocate %zu bytes of memory for stream rhoBar.",
						outstream_size_rhoBar);
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, error_msg);
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_rhoBar;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_rhoBar;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_rhoBar;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_rhoBar;
		}
		max_queue_output(actions, "rhoBar", stream_ptr, outstream_size_rhoBar);
		CHECK_ERRORS;
	}
	/* end of code for stream rhoBar */
	
	/* code for stream uSqr */
	size_t outstream_size_uSqr = interface_actions->outstream_size_uSqr;
	if (outstream_size_uSqr > 0) {
		void *stream_ptr = interface_actions->outstream_uSqr;
		if (use_callback && (1 == pCollide_check_aligned(interface_actions->outstream_uSqr))) {
			void *aligned_outstream_uSqr = malloc(outstream_size_uSqr);
			if (aligned_outstream_uSqr == NULL) {
				char error_msg[256];
				snprintf(error_msg, sizeof(error_msg) / sizeof(char),
						"Failed to allocate %zu bytes of memory for stream uSqr.",
						outstream_size_uSqr);
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, error_msg);
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_uSqr;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_uSqr;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_uSqr;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_uSqr;
		}
		max_queue_output(actions, "uSqr", stream_ptr, outstream_size_uSqr);
		CHECK_ERRORS;
	}
	/* end of code for stream uSqr */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void pCollide(
	uint64_t ticks_pCollideKernel,
	double inscalar_pCollideKernel_omega,
	const void *instream_pop_in,
	size_t instream_size_pop_in,
	void *outstream_pop_out,
	size_t outstream_size_pop_out,
	void *outstream_rhoBar,
	size_t outstream_size_rhoBar,
	void *outstream_uSqr,
	size_t outstream_size_uSqr)
{
	(void) pthread_once(&slic_bs_is_initialised, pCollide_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = pCollide_nonblock(ticks_pCollideKernel, inscalar_pCollideKernel_omega, instream_pop_in, instream_size_pop_in, outstream_pop_out, outstream_size_pop_out, outstream_rhoBar, outstream_size_rhoBar, outstream_uSqr, outstream_size_uSqr);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *pCollide_nonblock(
	uint64_t ticks_pCollideKernel,
	double inscalar_pCollideKernel_omega,
	const void *instream_pop_in,
	size_t instream_size_pop_in,
	void *outstream_pop_out,
	size_t outstream_size_pop_out,
	void *outstream_rhoBar,
	size_t outstream_size_rhoBar,
	void *outstream_uSqr,
	size_t outstream_size_uSqr)
{
	pCollide_actions_t interface_actions;
	interface_actions.ticks_pCollideKernel = ticks_pCollideKernel;
	interface_actions.inscalar_pCollideKernel_omega = inscalar_pCollideKernel_omega;
	interface_actions.instream_pop_in = instream_pop_in;
	interface_actions.instream_size_pop_in = instream_size_pop_in;
	interface_actions.outstream_pop_out = outstream_pop_out;
	interface_actions.outstream_size_pop_out = outstream_size_pop_out;
	interface_actions.outstream_rhoBar = outstream_rhoBar;
	interface_actions.outstream_size_rhoBar = outstream_size_rhoBar;
	interface_actions.outstream_uSqr = outstream_uSqr;
	interface_actions.outstream_size_uSqr = outstream_size_uSqr;
	(void) pthread_once(&slic_bs_is_initialised, pCollide_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = pCollide_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void pCollide_run(
	max_engine_t *engine,
	pCollide_actions_t *interface_actions)
{
	max_run_t *run = pCollide_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *pCollide_run_nonblock(
	max_engine_t *engine,
	pCollide_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = pCollide_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void pCollide_run_group(max_group_t *group, pCollide_actions_t *interface_actions)
{
	max_run_t *run = pCollide_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *pCollide_run_group_nonblock(max_group_t *group, pCollide_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = pCollide_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void pCollide_run_array(max_engarray_t *engarray, pCollide_actions_t *interface_actions[])
{
	max_run_t *run = pCollide_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *pCollide_run_array_nonblock(max_engarray_t *engarray, pCollide_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = pCollide_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* pCollide_convert(max_file_t *maxfile, pCollide_actions_t *interface_actions)
{
	return pCollide_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9InBDb2xsaWRlLmgiIG5hbWU9
InBDb2xsaWRlIj48Y29uc3RhbnQgbmFtZT0iUENJRV9BTElHTk1FTlQiIHR5cGU9ImxvbmciIHZh
bHVlPSIxNiIvPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1lPSJwQ29s
bGlkZSIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2NhbGFyIGRlc2M9IlRoZSBudW1iZXIgb2YgdGlj
a3MgZm9yIHdoaWNoIGtlcm5lbCAmcXVvdDtwQ29sbGlkZUtlcm5lbCZxdW90OyB3aWxsIHJ1bi4i
IGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InRpY2tzX3BDb2xsaWRlS2VybmVsIiB0eXBlPSJ1aW50
NjRfdCIvPjxzY2FsYXIgZGVzYz0iSW5wdXQgc2NhbGFyIHBhcmFtZXRlciAmcXVvdDtwQ29sbGlk
ZUtlcm5lbC5vbWVnYSZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc2NhbGFyX3BD
b2xsaWRlS2VybmVsX29tZWdhIiB0eXBlPSJkb3VibGUiLz48YXJyYXkgZGVzYz0iU3RyZWFtICZx
dW90O3BvcF9pbiZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc3RyZWFtX3BvcF9p
biIgc2l6ZT0iaW5zdHJlYW1fc2l6ZV9wb3BfaW4iIHRyYW5zcG9zZT0iZmFsc2UiIHR5cGU9InZv
aWQiLz48c2NhbGFyIGRlc2M9IlRoZSBzaXplIG9mIHRoZSBzdHJlYW0gaW5zdHJlYW1fcG9wX2lu
IGluIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1fc2l6ZV9wb3BfaW4i
IHR5cGU9InVpbnQ2NF90Ii8+PGFycmF5IGRlc2M9IlN0cmVhbSAmcXVvdDtwb3Bfb3V0JnF1b3Q7
LiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV9wb3Bfb3V0IiBzaXplPSJvdXRz
dHJlYW1fc2l6ZV9wb3Bfb3V0IiB0cmFuc3Bvc2U9ImZhbHNlIiB0eXBlPSJ2b2lkIi8+PHNjYWxh
ciBkZXNjPSJUaGUgc2l6ZSBvZiB0aGUgc3RyZWFtIG91dHN0cmVhbV9wb3Bfb3V0IGluIGJ5dGVz
LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0ib3V0c3RyZWFtX3NpemVfcG9wX291dCIgdHlwZT0i
dWludDY0X3QiLz48YXJyYXkgZGVzYz0iU3RyZWFtICZxdW90O3Job0JhciZxdW90Oy4iIGRpcmVj
dGlvbj0iT3V0cHV0IiBuYW1lPSJvdXRzdHJlYW1fcmhvQmFyIiBzaXplPSJvdXRzdHJlYW1fc2l6
ZV9yaG9CYXIiIHRyYW5zcG9zZT0iZmFsc2UiIHR5cGU9InZvaWQiLz48c2NhbGFyIGRlc2M9IlRo
ZSBzaXplIG9mIHRoZSBzdHJlYW0gb3V0c3RyZWFtX3Job0JhciBpbiBieXRlcy4iIGRpcmVjdGlv
bj0iSW5wdXQiIG5hbWU9Im91dHN0cmVhbV9zaXplX3Job0JhciIgdHlwZT0idWludDY0X3QiLz48
YXJyYXkgZGVzYz0iU3RyZWFtICZxdW90O3VTcXImcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1dCIg
bmFtZT0ib3V0c3RyZWFtX3VTcXIiIHNpemU9Im91dHN0cmVhbV9zaXplX3VTcXIiIHRyYW5zcG9z
ZT0iZmFsc2UiIHR5cGU9InZvaWQiLz48c2NhbGFyIGRlc2M9IlRoZSBzaXplIG9mIHRoZSBzdHJl
YW0gb3V0c3RyZWFtX3VTcXIgaW4gYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJvdXRz
dHJlYW1fc2l6ZV91U3FyIiB0eXBlPSJ1aW50NjRfdCIvPjwvZnVuY3Rpb24+PC9lbmdpbmVtb2Rl
PjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBwQ29sbGlkZV9oYXNfZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9oYXNfZXJy
b3I7IH0KY29uc3QgY2hhciogcENvbGxpZGVfZ2V0X2Vycm9ycyh2b2lkKQp7CXJldHVybiBzdG9y
ZWRfZXJyb3I7IH0Kdm9pZCBwQ29sbGlkZV9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9y
ZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9
CgpzdGF0aWMgY2hhciBwQ29sbGlkZV91c2Vfc2ltdWxhdGlvblsxNl07CnN0YXRpYyB2b2lkIHBD
b2xsaWRlX2RlZl91c2Vfc2ltdWxhdGlvbih2b2lkKQp7Cglsb25nIHBpZCA9ICgobG9uZykgZ2V0
cGlkKCkpICUgMTAwMDAwOwoJc25wcmludGYocENvbGxpZGVfdXNlX3NpbXVsYXRpb24sIDE2LCAi
cENvbGxpZGVfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqcENvbGxpZGVfY2hl
Y2tfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJcENvbGxpZGVfZGVmX3VzZV9zaW11bGF0aW9uKCk7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gbWF4X2NvbmZpZ19nZXRfc3RyaW5nKE1BWF9DT05GSUdf
VVNFX1NJTVVMQVRJT04pOwoJaWYgKHVzZV9zaW0gPT0gTlVMTCkgewoJCXVzZV9zaW0gPSBwQ29s
bGlkZV91c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19V
U0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGlu
dCBwQ29sbGlkZV9zaW11bGF0aW9uX2xhdW5jaCA9IDA7CmludCBwQ29sbGlkZV9zaW11bGF0b3Jf
c3RhcnQodm9pZCkKewoJaW50IHJldHZhbCA9IDA7Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gcENv
bGxpZGVfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRm
KGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4g
JXMgLWMgTUFYNUMgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9m
cCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChi
dWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlz
ZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQs
IHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9y
IGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChz
dHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAt
MTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgcENvbGxp
ZGVfc2ltdWxhdG9yX3N0b3Aodm9pZCkKewoJY29uc3QgY2hhciAqdXNlX3NpbSA9IHBDb2xsaWRl
X2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7CgljaGFyIGJ1ZmZbMTAyNF07CglzbnByaW50ZihidWZm
LCAxMDI0LCAiUEFUSD1zaW11dGlsczokUEFUSCBtYXhjb21waWxlcnNpbSAtZCAxIC1uICVzIC1j
IE1BWDVDIC1TIHNpbXV0aWxzIHN0b3AiLCB1c2Vfc2ltKTsKCUZJTEUgKnBpcGVfZnAgPSBwb3Bl
bihidWZmLCAiciIpOwoJaWYgKHBpcGVfZnAgPT0gTlVMTCkgewoJCXN0cm5jYXQoYnVmZiwgIiA6
IGZhaWxlZCB0byBleGVjdXRlLiIsICgxMDI0IC0gc3RybGVuKGJ1ZmYpKSk7CgkJc2V0X2Vycm9y
KGJ1ZmYpOwoJCXJldHVybiAtMTsKCX0KCXdoaWxlIChmZ2V0cyhidWZmLCAxMDI0LCBwaXBlX2Zw
KSAhPSBOVUxMKSB7CgkJLyogVW5jb21tZW50IHRoaXMgdG8gZ2V0IHNpbXVsYXRvciBjb21tYW5k
IG91dHB1dCAqLwoJCS8qIGZwcmludGYoc3RkZXJyLCBidWZmKTsgKi8KCQk7Cgl9CglwY2xvc2Uo
cGlwZV9mcCk7CglyZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQgcENvbGxpZGVfc3RhdGljX2luaXQo
dm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gcENvbGxpZGVfaW5pdCgpOwoJaWYgKHN0b3JlZF9t
YXhmaWxlID09IE5VTEwgfHwgIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSkgewoJCXN0
b3JlZF9tYXhmaWxlID0gTlVMTDsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdf
U1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIGFib3J0KCk7CgkJZWxzZSB7IHNldF9l
cnJvcigiVW5hYmxlIHRvIGxvYWQgbWF4ZmlsZSIpOyByZXR1cm47IH0KCX0KCWlmKCFtYXhfb2so
bWF4X2dsb2JhbF9lcnJvcnMoKSkpIHsKCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190
cmFjZShtYXhfZ2xvYmFsX2Vycm9ycygpKSk7CgkJcmV0dXJuOwoJfQoJaWYoIW1heF9jb25maWdf
Z2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkKCQlt
YXhfZXJyb3JzX21vZGUoc3RvcmVkX21heGZpbGUtPmVycm9ycywgMCk7Cgl0aW1lX3QgdGltZW91
dF9wcmV2aW91cyA9IG1heF9sb2FkX3RpbWVvdXQoc3RvcmVkX21heGZpbGUsIDMwKTsKCWNvbnN0
IGNoYXIgKnVzZV9zaW0gPSBwQ29sbGlkZV9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJaWYgKG1h
eF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMCkgewoJCWludCBzaW1f
c3RhdCA9IHBDb2xsaWRlX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkg
JiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJ
cENvbGxpZGVfc2ltdWxhdGlvbl9sYXVuY2ggPSAxOwoJCX0gZWxzZSB7CgkJCXNldF9lcnJvcigi
RXJyb3I6IEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBzdGFydCB0aGUgc2ltdWxh
dGlvbiBpbmZyYXN0cnVjdHVyZSBhdXRvbWF0aWNhbGx5LiIpOwoJCQlzZXRfZXJyb3IoIkVycm9y
OiBDaGVjayB0aGF0ICd1c2Vfc2ltdWxhdGlvbj08c2ltdWxhdG9yX25hbWU+JyBpcyBzZXQgY29y
cmVjdGx5IGluIHlvdXIgU0xpQyBjb25maWd1cmF0aW9uIik7CgkJCXNldF9lcnJvcigiRXJyb3I6
IGFuZCB0aGF0IHRoZSBhc3NvY2lhdGVkIHNpbXVsYXRlZCBzeXN0ZW0gZGFlbW9uIGlzIHJ1bm5p
bmcuIik7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCQlzdG9yZWRfbWF4Zmls
ZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9Cgl9CglzdG9yZWRfZW5naW5lID0gbWF4X2xvYWQoc3Rv
cmVkX21heGZpbGUsICIqIik7CglpZiAoIW1heF9vayhzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzKSkg
ewoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FC
T1JUX09OX0VSUk9SKSkgewoJCQlmcHJpbnRmKHN0ZGVyciwgIlxuVW5hYmxlIHRvIGxvYWQgZW5n
aW5lOiBhYm9ydGluZyBub3cuXG5cbiIpOwoJCQlmZmx1c2goc3RkZXJyKTsKCQkJYWJvcnQoKTsK
CQl9IGVsc2UgewoJCQlzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShzdG9yZWRf
bWF4ZmlsZS0+ZXJyb3JzKSk7CgkJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCQlz
dG9yZWRfbWF4ZmlsZSA9IE5VTEw7CgkJCXJldHVybjsKCQl9IAoJfSAKCW1heF9sb2FkX3RpbWVv
dXQoc3RvcmVkX21heGZpbGUsIHRpbWVvdXRfcHJldmlvdXMpOwp9CnZvaWQgcENvbGxpZGVfZnJl
ZSh2b2lkKQp7CglpZiAoc3RvcmVkX2VuZ2luZSAhPSBOVUxMKSB7CgkJbWF4X3VubG9hZChzdG9y
ZWRfZW5naW5lKTsKCQlzdG9yZWRfZW5naW5lID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfbWF4Zmls
ZSAhPSBOVUxMKSB7CgkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJc3RvcmVkX21h
eGZpbGUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9lcnJvciAhPSBOVUxMKSB7CgkJZnJlZShzdG9y
ZWRfZXJyb3IpOwoJCXN0b3JlZF9lcnJvciA9IE5VTEw7Cgl9CglpZiAocENvbGxpZGVfc2ltdWxh
dGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IHBDb2xsaWRlX3NpbXVsYXRvcl9z
dG9wKCk7CgkJaWYgKHNpbV9zdGF0ICE9IDAgKSB7CgkJCWZwcmludGYoc3RkZXJyLCAiRXJyb3Ig
c3RvcHBpbmcgc2ltdWxhdG9yLiIpOwoJCX0KCQlwQ29sbGlkZV9zaW11bGF0aW9uX2xhdW5jaCA9
IDA7Cgl9Cn0KCnN0YXRpYyBpbnQgcENvbGxpZGVfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsK
I2lmZGVmIHBDb2xsaWRlX1BDSUVfQUxJR05NRU5UCglyZXR1cm4gKChwQ29sbGlkZV9QQ0lFX0FM
SUdOTUVOVCA8IDEpID8gMTYgOiBwQ29sbGlkZV9QQ0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1
cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IHBDb2xsaWRlX2NoZWNrX2FsaWduZWQoY29uc3Qg
dm9pZCAqZGF0YSkKewoJdWludHB0cl90IHBvaW50ZXIgPSAodWludHB0cl90KSBkYXRhOwoJaW50
IGFsaWdubWVudCA9IHBDb2xsaWRlX2dldF9wY2llX2FsaWdubWVudCgpOwoJcmV0dXJuIChwb2lu
dGVyICUgYWxpZ25tZW50KSA/IDEgOiAwOwp9CgpzdGF0aWMgdm9pZCAqcENvbGxpZGVfbWFsbG9j
X2FsaWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQg
PSBwQ29sbGlkZV9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXBvc2l4X21lbWFsaWduKCZwdHIsIGFs
aWdubWVudCwgc2l6ZSk7CglyZXR1cm4gcHRyOwp9CgoKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSov
Ci8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZGVmYXVsdCAtLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKCiNkZWZp
bmUgQ0hFQ0tfRVJST1JTX1NUKFNULCBSRVQpIGlmKCFtYXhfb2soU1QtPmVycm9ycykpIHsgaWYo
bWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05f
RVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiIsIG1heF9lcnJvcnNfdHJhY2UoU1QtPmVy
cm9ycykpOyBhYm9ydCgpOyB9IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKFNU
LT5lcnJvcnMpKTsgcmV0dXJuIFJFVDsgfSAKI2RlZmluZSBDSEVDS19OVUxMKFZBTFVFLCBNRVNT
QUdFLCBSRVQpIGlmKFZBTFVFID09IE5VTEwpIHsgaWYgKG1heF9jb25maWdfZ2V0X2Jvb2woTUFY
X0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVy
ciwgIiVzXG4lc1xuIiwgKHN0b3JlZF9lcnJvciA9PSBOVUxMKSA/ICIiIDogc3RvcmVkX2Vycm9y
LCBNRVNTQUdFKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3IoTUVTU0FHRSk7IHJldHVybiBSRVQ7IH0K
CiAKdHlwZWRlZiBzdHJ1Y3QgcENvbGxpZGVfY2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4X3QgKnVz
ZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXplOwoJaW50ICAgICAg
aXNfb3V0cHV0Owp9IHBDb2xsaWRlX2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3Qg
cENvbGxpZGVfY2FsbGJhY2tfZGF0YSB7CglwQ29sbGlkZV9jYWxsYmFja19zdHJlYW1fdCBzdHJl
YW1bNF07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBwQ29sbGlkZV9jYWxsYmFja19k
YXRhX3Q7CgpzdGF0aWMgdm9pZCBwQ29sbGlkZV9jYWxsYmFja19pbnRlcm5hbCh2b2lkICpjYl9k
YXRhKQp7CglwQ29sbGlkZV9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAocENvbGxpZGVfY2FsbGJh
Y2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsg
aSsrICkgewoJCXBDb2xsaWRlX2NhbGxiYWNrX3N0cmVhbV90ICpzID0gJmRhdGEtPnN0cmVhbVtp
XTsKCQlpZiAocy0+aXNfb3V0cHV0ICYmIChzLT5zaXplID4gMCkpIHsKCQkJbWVtY3B5KHMtPnVz
ZXJfcHRyLCBzLT5hbGlnbmVkX3B0ciwgcy0+c2l6ZSk7CgkJfQoJCWZyZWUocy0+YWxpZ25lZF9w
dHIpOwoJfQoJZnJlZShkYXRhKTsKfQoKc3RhdGljIG1heF9hY3Rpb25zX3QqIHBDb2xsaWRlX2Nv
bnZlcnRfaW50ZXJuYWwoCgltYXhfZmlsZV90ICptYXhmaWxlLAoJcENvbGxpZGVfYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2Fs
bGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25z
X3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9u
cyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2so
YWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShh
Y3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJcENvbGxpZGVfY2FsbGJhY2tfZGF0
YV90ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJhY2sgPSAoY2FsbGJhY2tfZnVuYyAh
PSBOVUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsKCWlmICh1c2VfY2FsbGJhY2spIHsK
CQljYl9kYXRhID0gbWFsbG9jKHNpemVvZihwQ29sbGlkZV9jYWxsYmFja19kYXRhX3QpKTsKCQlp
ZiAoY2JfZGF0YSA9PSBOVUxMKSB7CgkJCWZwcmludGYoc3RkZXJyLCAiVW5hYmxlIHRvIGFsbG9j
YXRlIG1lbW9yeSBmb3Igc3RyZWFtIGNhbGxiYWNrIGRhdGEgaW4gZnVuY3Rpb24gcENvbGxpZGVf
Y29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhf
Y291bnQgPSA0OwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAg
ID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmcENvbGxpZGVfY2FsbGJhY2tfaW50
ZXJuYWw7Cgl9CgoJLyogY29kZSBmb3Igc2NhbGFyIHBDb2xsaWRlS2VybmVsLnJ1bl9jeWNsZV9j
b3VudCAqLwoJdWludDY0X3QgdGlja3NfcENvbGxpZGVLZXJuZWwgPSBpbnRlcmZhY2VfYWN0aW9u
cy0+dGlja3NfcENvbGxpZGVLZXJuZWw7CgltYXhfc2V0X3RpY2tzKGFjdGlvbnMsICJwQ29sbGlk
ZUtlcm5lbCIsIHRpY2tzX3BDb2xsaWRlS2VybmVsKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBv
ZiBjb2RlIGZvciBzY2FsYXIgcENvbGxpZGVLZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJLyog
Y29kZSBmb3Igc2NhbGFyIHBDb2xsaWRlS2VybmVsLm9tZWdhICovCglkb3VibGUgaW5zY2FsYXJf
cENvbGxpZGVLZXJuZWxfb21lZ2EgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfcENvbGxp
ZGVLZXJuZWxfb21lZ2E7CgltYXhfc2V0X2RvdWJsZShhY3Rpb25zLCAicENvbGxpZGVLZXJuZWwi
LCAib21lZ2EiLCBpbnNjYWxhcl9wQ29sbGlkZUtlcm5lbF9vbWVnYSk7CglDSEVDS19FUlJPUlM7
CgkvKiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIHBDb2xsaWRlS2VybmVsLm9tZWdhKi8KCQoJLyog
Y29kZSBmb3Igc3RyZWFtIHBvcF9pbiAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfcG9wX2luID0g
aW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3NpemVfcG9wX2luOwoJaWYgKGluc3RyZWFtX3Np
emVfcG9wX2luID4gMCkgewoJCWNvbnN0IHZvaWQgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0
aW9ucy0+aW5zdHJlYW1fcG9wX2luOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gcENvbGxp
ZGVfY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fcG9wX2luKSkpIHsK
CQkJdm9pZCAqYWxpZ25lZF9pbnN0cmVhbV9wb3BfaW4gPSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV9w
b3BfaW4pOwoJCQlpZiAoYWxpZ25lZF9pbnN0cmVhbV9wb3BfaW4gPT0gTlVMTCkgewoJCQkJY2hh
ciBlcnJvcl9tc2dbMjU2XTsKCQkJCXNucHJpbnRmKGVycm9yX21zZywgc2l6ZW9mKGVycm9yX21z
ZykgLyBzaXplb2YoY2hhciksCgkJCQkJCSJGYWlsZWQgdG8gYWxsb2NhdGUgJXp1IGJ5dGVzIG9m
IG1lbW9yeSBmb3Igc3RyZWFtIHBvcF9pbi4iLAoJCQkJCQlpbnN0cmVhbV9zaXplX3BvcF9pbik7
CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19M
SU5FX18sIDUyNiwgZXJyb3JfbXNnKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50
ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3BvcF9pbjsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2Jf
ZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1f
cG9wX2luOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAg
ICA9IGluc3RyZWFtX3NpemVfcG9wX2luOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNw
eShhbGlnbmVkX2luc3RyZWFtX3BvcF9pbiwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3Bv
cF9pbiwgaW5zdHJlYW1fc2l6ZV9wb3BfaW4pOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0
cmVhbV9wb3BfaW47CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAicG9wX2luIiwgc3Ry
ZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9wb3BfaW4pOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVu
ZCBvZiBjb2RlIGZvciBzdHJlYW0gcG9wX2luICovCgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBwb3Bf
b3V0ICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfcG9wX291dCA9IGludGVyZmFjZV9hY3Rpb25z
LT5vdXRzdHJlYW1fc2l6ZV9wb3Bfb3V0OwoJaWYgKG91dHN0cmVhbV9zaXplX3BvcF9vdXQgPiAw
KSB7CgkJdm9pZCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcG9w
X291dDsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IHBDb2xsaWRlX2NoZWNrX2FsaWduZWQo
aW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9wb3Bfb3V0KSkpIHsKCQkJdm9pZCAqYWxpZ25l
ZF9vdXRzdHJlYW1fcG9wX291dCA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9wb3Bfb3V0KTsKCQkJ
aWYgKGFsaWduZWRfb3V0c3RyZWFtX3BvcF9vdXQgPT0gTlVMTCkgewoJCQkJY2hhciBlcnJvcl9t
c2dbMjU2XTsKCQkJCXNucHJpbnRmKGVycm9yX21zZywgc2l6ZW9mKGVycm9yX21zZykgLyBzaXpl
b2YoY2hhciksCgkJCQkJCSJGYWlsZWQgdG8gYWxsb2NhdGUgJXp1IGJ5dGVzIG9mIG1lbW9yeSBm
b3Igc3RyZWFtIHBvcF9vdXQuIiwKCQkJCQkJb3V0c3RyZWFtX3NpemVfcG9wX291dCk7CgkJCQlt
YXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18s
IDUyNiwgZXJyb3JfbXNnKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0
cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNl
X2FjdGlvbnMtPm91dHN0cmVhbV9wb3Bfb3V0OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRh
LT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJlYW1fcG9w
X291dDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAg
PSBvdXRzdHJlYW1fc2l6ZV9wb3Bfb3V0OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT5pc19vdXRwdXQgICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVh
bV9wdHIgPSBhbGlnbmVkX291dHN0cmVhbV9wb3Bfb3V0OwoJCX0KCQltYXhfcXVldWVfb3V0cHV0
KGFjdGlvbnMsICJwb3Bfb3V0Iiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfcG9wX291dCk7
CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBwb3Bfb3V0ICov
CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSByaG9CYXIgKi8KCXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9y
aG9CYXIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX3NpemVfcmhvQmFyOwoJaWYgKG91
dHN0cmVhbV9zaXplX3Job0JhciA+IDApIHsKCQl2b2lkICpzdHJlYW1fcHRyID0gaW50ZXJmYWNl
X2FjdGlvbnMtPm91dHN0cmVhbV9yaG9CYXI7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBw
Q29sbGlkZV9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmhvQmFy
KSkpIHsKCQkJdm9pZCAqYWxpZ25lZF9vdXRzdHJlYW1fcmhvQmFyID0gbWFsbG9jKG91dHN0cmVh
bV9zaXplX3Job0Jhcik7CgkJCWlmIChhbGlnbmVkX291dHN0cmVhbV9yaG9CYXIgPT0gTlVMTCkg
ewoJCQkJY2hhciBlcnJvcl9tc2dbMjU2XTsKCQkJCXNucHJpbnRmKGVycm9yX21zZywgc2l6ZW9m
KGVycm9yX21zZykgLyBzaXplb2YoY2hhciksCgkJCQkJCSJGYWlsZWQgdG8gYWxsb2NhdGUgJXp1
IGJ5dGVzIG9mIG1lbW9yeSBmb3Igc3RyZWFtIHJob0Jhci4iLAoJCQkJCQlvdXRzdHJlYW1fc2l6
ZV9yaG9CYXIpOwoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19G
SUxFX18sIF9fTElORV9fLCA1MjYsIGVycm9yX21zZyk7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0K
CQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWlu
dDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fcmhvQmFyOwoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25l
ZF9vdXRzdHJlYW1fcmhvQmFyOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0p
LT5zaXplICAgICAgICA9IG91dHN0cmVhbV9zaXplX3Job0JhcjsKCQkJKCZjYl9kYXRhLT5zdHJl
YW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCAr
PSAxOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRzdHJlYW1fcmhvQmFyOwoJCX0KCQltYXhf
cXVldWVfb3V0cHV0KGFjdGlvbnMsICJyaG9CYXIiLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1fc2l6
ZV9yaG9CYXIpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0g
cmhvQmFyICovCgkKCS8qIGNvZGUgZm9yIHN0cmVhbSB1U3FyICovCglzaXplX3Qgb3V0c3RyZWFt
X3NpemVfdVNxciA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fc2l6ZV91U3FyOwoJaWYg
KG91dHN0cmVhbV9zaXplX3VTcXIgPiAwKSB7CgkJdm9pZCAqc3RyZWFtX3B0ciA9IGludGVyZmFj
ZV9hY3Rpb25zLT5vdXRzdHJlYW1fdVNxcjsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IHBD
b2xsaWRlX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV91U3FyKSkp
IHsKCQkJdm9pZCAqYWxpZ25lZF9vdXRzdHJlYW1fdVNxciA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6
ZV91U3FyKTsKCQkJaWYgKGFsaWduZWRfb3V0c3RyZWFtX3VTcXIgPT0gTlVMTCkgewoJCQkJY2hh
ciBlcnJvcl9tc2dbMjU2XTsKCQkJCXNucHJpbnRmKGVycm9yX21zZywgc2l6ZW9mKGVycm9yX21z
ZykgLyBzaXplb2YoY2hhciksCgkJCQkJCSJGYWlsZWQgdG8gYWxsb2NhdGUgJXp1IGJ5dGVzIG9m
IG1lbW9yeSBmb3Igc3RyZWFtIHVTcXIuIiwKCQkJCQkJb3V0c3RyZWFtX3NpemVfdVNxcik7CgkJ
CQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5F
X18sIDUyNiwgZXJyb3JfbXNnKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJm
YWNlX2FjdGlvbnMtPm91dHN0cmVhbV91U3FyOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRh
LT5jb3VudF0pLT5hbGlnbmVkX3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJlYW1fdVNx
cjsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBv
dXRzdHJlYW1fc2l6ZV91U3FyOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0p
LT5pc19vdXRwdXQgICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIg
PSBhbGlnbmVkX291dHN0cmVhbV91U3FyOwoJCX0KCQltYXhfcXVldWVfb3V0cHV0KGFjdGlvbnMs
ICJ1U3FyIiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfdVNxcik7CgkJQ0hFQ0tfRVJST1JT
OwoJfQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB1U3FyICovCgkKCWlmICh1c2VfY2FsbGJh
Y2sgJiYgY2JfZGF0YS0+Y291bnQgPT0gMCkgewoJCSpjYWxsYmFja19kYXRhID0gTlVMTDsKCQkq
Y2FsbGJhY2tfZnVuYyA9IE5VTEw7CgkJZnJlZShjYl9kYXRhKTsKCX0KCXJldHVybiBhY3Rpb25z
OwojdW5kZWYgQ0hFQ0tfRVJST1JTCn0KCnZvaWQgcENvbGxpZGUoCgl1aW50NjRfdCB0aWNrc19w
Q29sbGlkZUtlcm5lbCwKCWRvdWJsZSBpbnNjYWxhcl9wQ29sbGlkZUtlcm5lbF9vbWVnYSwKCWNv
bnN0IHZvaWQgKmluc3RyZWFtX3BvcF9pbiwKCXNpemVfdCBpbnN0cmVhbV9zaXplX3BvcF9pbiwK
CXZvaWQgKm91dHN0cmVhbV9wb3Bfb3V0LAoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3BvcF9vdXQs
Cgl2b2lkICpvdXRzdHJlYW1fcmhvQmFyLAoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3Job0JhciwK
CXZvaWQgKm91dHN0cmVhbV91U3FyLAoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3VTcXIpCnsKCSh2
b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIHBDb2xsaWRlX3N0YXRp
Y19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9h
ZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gcENvbGxpZGVfbm9uYmxvY2sodGlja3NfcENvbGxp
ZGVLZXJuZWwsIGluc2NhbGFyX3BDb2xsaWRlS2VybmVsX29tZWdhLCBpbnN0cmVhbV9wb3BfaW4s
IGluc3RyZWFtX3NpemVfcG9wX2luLCBvdXRzdHJlYW1fcG9wX291dCwgb3V0c3RyZWFtX3NpemVf
cG9wX291dCwgb3V0c3RyZWFtX3Job0Jhciwgb3V0c3RyZWFtX3NpemVfcmhvQmFyLCBvdXRzdHJl
YW1fdVNxciwgb3V0c3RyZWFtX3NpemVfdVNxcik7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0
byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKnBDb2xsaWRl
X25vbmJsb2NrKAoJdWludDY0X3QgdGlja3NfcENvbGxpZGVLZXJuZWwsCglkb3VibGUgaW5zY2Fs
YXJfcENvbGxpZGVLZXJuZWxfb21lZ2EsCgljb25zdCB2b2lkICppbnN0cmVhbV9wb3BfaW4sCglz
aXplX3QgaW5zdHJlYW1fc2l6ZV9wb3BfaW4sCgl2b2lkICpvdXRzdHJlYW1fcG9wX291dCwKCXNp
emVfdCBvdXRzdHJlYW1fc2l6ZV9wb3Bfb3V0LAoJdm9pZCAqb3V0c3RyZWFtX3Job0JhciwKCXNp
emVfdCBvdXRzdHJlYW1fc2l6ZV9yaG9CYXIsCgl2b2lkICpvdXRzdHJlYW1fdVNxciwKCXNpemVf
dCBvdXRzdHJlYW1fc2l6ZV91U3FyKQp7CglwQ29sbGlkZV9hY3Rpb25zX3QgaW50ZXJmYWNlX2Fj
dGlvbnM7CglpbnRlcmZhY2VfYWN0aW9ucy50aWNrc19wQ29sbGlkZUtlcm5lbCA9IHRpY2tzX3BD
b2xsaWRlS2VybmVsOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zY2FsYXJfcENvbGxpZGVLZXJuZWxf
b21lZ2EgPSBpbnNjYWxhcl9wQ29sbGlkZUtlcm5lbF9vbWVnYTsKCWludGVyZmFjZV9hY3Rpb25z
Lmluc3RyZWFtX3BvcF9pbiA9IGluc3RyZWFtX3BvcF9pbjsKCWludGVyZmFjZV9hY3Rpb25zLmlu
c3RyZWFtX3NpemVfcG9wX2luID0gaW5zdHJlYW1fc2l6ZV9wb3BfaW47CglpbnRlcmZhY2VfYWN0
aW9ucy5vdXRzdHJlYW1fcG9wX291dCA9IG91dHN0cmVhbV9wb3Bfb3V0OwoJaW50ZXJmYWNlX2Fj
dGlvbnMub3V0c3RyZWFtX3NpemVfcG9wX291dCA9IG91dHN0cmVhbV9zaXplX3BvcF9vdXQ7Cglp
bnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1fcmhvQmFyID0gb3V0c3RyZWFtX3Job0JhcjsKCWlu
dGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV9zaXplX3Job0JhciA9IG91dHN0cmVhbV9zaXplX3Jo
b0JhcjsKCWludGVyZmFjZV9hY3Rpb25zLm91dHN0cmVhbV91U3FyID0gb3V0c3RyZWFtX3VTcXI7
CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1fc2l6ZV91U3FyID0gb3V0c3RyZWFtX3NpemVf
dVNxcjsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIHBDb2xs
aWRlX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdh
cyBub3QgbG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZv
aWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IHBD
b2xsaWRlX2NvbnZlcnRfaW50ZXJuYWwoc3RvcmVkX21heGZpbGUsICZpbnRlcmZhY2VfYWN0aW9u
cywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX05VTEwoYWN0aW9ucywgIlVuYWJsZSB0
byBidWlsZCBhY3Rpb25zIiwgTlVMTCk7CgltYXhfdmFsaWRhdGUoYWN0aW9ucyk7CglDSEVDS19F
UlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CglDSEVDS19FUlJPUlNfU1Qoc3RvcmVkX2VuZ2luZSwg
TlVMTCk7CgltYXhfcnVuX3QgKnJ1bjsKCWlmIChjYl9mdW5jID09IE5VTEwpIHsKCQlydW4gPSBt
YXhfcnVuX25vbmJsb2NrKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4g
PSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2Ioc3RvcmVkX2VuZ2luZSwgYWN0aW9ucywgY2JfZnVu
YywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIs
IE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJl
ZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCnZvaWQgcENvbGxpZGVfcnVuKAoJbWF4X2VuZ2lu
ZV90ICplbmdpbmUsCglwQ29sbGlkZV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7Cglt
YXhfcnVuX3QgKnJ1biA9IHBDb2xsaWRlX3J1bl9ub25ibG9jayhlbmdpbmUsIGludGVyZmFjZV9h
Y3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1h
eF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqcENvbGxpZGVfcnVuX25vbmJsb2NrKAoJbWF4X2Vu
Z2luZV90ICplbmdpbmUsCglwQ29sbGlkZV9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsg
Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAg
PSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IHBDb2xsaWRlX2NvbnZlcnRfaW50ZXJu
YWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglD
SEVDS19OVUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4
X3ZhbGlkYXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4
X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25i
bG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2Nr
X3dpdGhfY2IoZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05V
TEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVl
KGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFu
Y2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBc
cGFyYW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZh
Y2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhY3Rpb25zIG9uIHRoZSBm
aXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cC4KICovCnZvaWQgcENvbGxpZGVfcnVu
X2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgcENvbGxpZGVfYWN0aW9uc190ICppbnRlcmZhY2Vf
YWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBwQ29sbGlkZV9ydW5fZ3JvdXBfbm9uYmxvY2so
Z3JvdXAsIGludGVyZmFjZV9hY3Rpb25zKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1
biBhY3Rpb25zIiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1
biBhZHZhbmNlZCBzdGF0aWMgbm9uLWJsb2NraW5nIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJmYWNl
ICdkZWZhdWx0Jy4KICogCiAqCiAqIFNjaGVkdWxlIHRoZSBhY3Rpb25zIHRvIHJ1biBvbiB0aGUg
Zmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAgYW5kIHJldHVybiBpbW1lZGlhdGVs
eS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIG11c3QgYmUgY2hlY2tlZCB3aXRoIDo6bWF4X3dh
aXQuIAogKiBOb3RlIHRoYXQgdXNlIG9mIDo6bWF4X25vd2FpdCBpcyBwcm9oaWJpdGVkIHdpdGgg
bm9uLWJsb2NraW5nIHJ1bm5pbmcgb24gZ3JvdXBzOgogKiBzZWUgdGhlIDo6bWF4X3J1bl9ncm91
cF9ub25ibG9jayBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGV4cGxhbmF0aW9uLgogKgogKiBccGFy
YW0gW2luXSBncm91cCBHcm91cCB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rp
b25zIEFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24g
c3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhf
cnVuX3QgKnBDb2xsaWRlX3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBfdCAqZ3JvdXAsIHBD
b2xsaWRlX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZp
bGUgPSBtYXhfZ3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlv
bnMgPSBwQ29sbGlkZV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25z
LCAxLCBOVUxMLCBOVUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CglpZigh
bWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHJldHVybiBOVUxMOwoJbWF4X3ZhbGlkYXRlKGFjdGlv
bnMpOwoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBhY3Rp
b25zKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAq
IFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIGZ1bmN0aW9uIGZvciB0aGUgaW50ZXJm
YWNlICdkZWZhdWx0Jy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBk
ZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBh
cnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9u
IHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwog
KiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBwQ29sbGlkZV9ydW5f
YXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBwQ29sbGlkZV9hY3Rpb25zX3QgKmludGVy
ZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVuID0gcENvbGxpZGVfcnVuX2FycmF5X25v
bmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVu
YWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmll
ZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhl
IGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0byBydW4gdGhlIGFycmF5
IG9mIGFjdGlvbnMgb24gdGhlIGFycmF5IG9mIGVuZ2luZXMsIGFuZCByZXR1cm4gaW1tZWRpYXRl
bHkuCiAqIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMgbXVzdCBtYXRjaCB0aGUgc2l6
ZSBvZiBlbmdhcnJheS4KICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIGNhbiBiZSBjaGVja2VkIGVp
dGhlciBieSA6Om1heF93YWl0IG9yIDo6bWF4X25vd2FpdDsKICogbm90ZSB0aGF0IG9uZSBvZiB0
aGVzZSAqbXVzdCogYmUgY2FsbGVkLCBzbyB0aGF0IGFzc29jaWF0ZWQgbWVtb3J5IGNhbiBiZSBy
ZWxlYXNlZC4KICoKICogXHBhcmFtIFtpbl0gZW5nYXJyYXkgVGhlIGFycmF5IG9mIGRldmljZXMg
dG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0
aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24gdGhlIGV4ZWN1dGlvbiBzdGF0dXMg
b2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJvci4KICovCm1heF9ydW5fdCAq
cENvbGxpZGVfcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgcENv
bGxpZGVfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhfZmlsZV90ICptYXhm
aWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShlbmdhcnJheSwgMCk7CglpbnQgaTsKCW1h
eF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9hY3RhcnJheV9pbml0KG1heGZpbGUsIGVuZ2Fy
cmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCW1heF9hY3Rp
b25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhlbmdhcnJheS0+c2l6ZSAqIHNpemVvZihtYXhf
YWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNpemU7IGkrKyApIHsK
CQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gcENvbGxpZGVfY29udmVydF9pbnRlcm5hbChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9uc1tpXSwgMSwgTlVMTCwgTlVMTCk7CgkJaWYgKGFjdGlvbnMg
PT0gTlVMTCkgcmV0dXJuIE5VTEw7CgkJYXJyX2FjdGlvbnNbaV0gPSBhY3Rpb25zOwoJCW1heF9z
ZXRfYWN0aW9uKGFjdGFycmF5LCBpLCBhY3Rpb25zKTsKCX0KCW1heF9ydW5fdCAqcnVuID0gbWF4
X3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgYWN0YXJyYXkpOwoJZm9yICggaSA9IDAgOyBp
IDwgYWN0YXJyYXktPnNpemUgOyBpKysgKSB7IG1heF9hY3Rpb25zX2ZyZWUoYXJyX2FjdGlvbnNb
aV0pOyB9CgltYXhfYWN0YXJyYXlfZnJlZShhY3RhcnJheSk7CglmcmVlKGFycl9hY3Rpb25zKTsK
CXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIENvbnZlcnRzIGEgc3RhdGljLWludGVyZmFj
ZSBhY3Rpb24gc3RydWN0IGludG8gYSBkeW5hbWljLWludGVyZmFjZSBtYXhfYWN0aW9uc190IHN0
cnVjdC4KICoKICogTm90ZSB0aGF0IHRoaXMgaXMgYW4gaW50ZXJuYWwgdXRpbGl0eSBmdW5jdGlv
biB1c2VkIGJ5IG90aGVyIGZ1bmN0aW9ucyBpbiB0aGUgc3RhdGljIGludGVyZmFjZS4KICoKICog
XHBhcmFtIFtpbl0gbWF4ZmlsZSBUaGUgbWF4ZmlsZSB0byB1c2UuCiAqIFxwYXJhbSBbaW5dIGlu
dGVyZmFjZV9hY3Rpb25zIFRoZSBpbnRlcmZhY2Utc3BlY2lmaWMgYWN0aW9ucyB0byBydW4uCiAq
IFxyZXR1cm4gVGhlIGR5bmFtaWMtaW50ZXJmYWNlIGFjdGlvbnMgdG8gcnVuLCBvciBOVUxMIGlu
IGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfYWN0aW9uc190KiBwQ29sbGlkZV9jb252ZXJ0KG1heF9m
aWxlX3QgKm1heGZpbGUsIHBDb2xsaWRlX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsK
CXJldHVybiBwQ29sbGlkZV9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rp
b25zLCAwLCBOVUxMLCBOVUxMKTsKfQoKI3VuZGVmIENIRUNLX0VSUk9SU19TVAojdW5kZWYgQ0hF
Q0tfTlVMTAoKCg==
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(pCollideKernel, 299, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 300, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 2, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 438, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 439, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 440, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 441, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 442, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 443, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 444, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 466, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 527, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 302, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 304, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 305, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 523, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 446, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 520, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 360, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 521, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 522, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 363, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 365, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 524, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 525, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 526, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 452, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 367, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 456, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 369, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 371, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 459, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 460, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 462, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 437, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 436, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 296, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 463, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 297, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 307, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 309, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 310, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 435, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 292, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 293, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 470, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 434, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 433, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 530, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 531, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 279, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 280, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 469, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 432, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 282, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 431, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 284, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 285, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 286, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 287, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 288, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 290, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 294, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 295, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 430, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 269, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 270, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 476, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 429, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 428, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 254, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 472, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 256, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 257, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 475, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 427, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 259, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 426, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 261, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 262, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 263, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 264, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 265, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 267, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 271, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 272, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 425, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 246, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 247, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 483, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 424, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 423, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 528, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 529, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 233, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 234, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 482, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 422, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 236, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 421, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 238, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 239, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 240, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 241, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 242, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 244, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 248, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 249, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 420, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 223, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 224, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 489, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 419, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 418, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 373, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 485, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 210, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 211, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 488, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 417, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 213, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 416, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 215, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 216, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 217, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 218, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 219, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 221, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 225, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 226, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 415, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 200, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 201, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 496, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 414, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 413, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 374, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 492, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 187, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 188, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 495, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 412, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 190, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 411, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 192, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 193, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 194, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 195, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 196, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 198, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 202, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 203, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 410, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 177, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 178, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 502, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 409, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 408, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 377, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 378, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 498, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 165, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 501, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 407, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 167, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 406, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 170, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 171, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 172, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 173, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 175, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 179, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 180, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 405, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 154, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 155, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 509, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 404, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 403, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 379, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 505, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 508, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 402, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 144, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 401, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 146, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 147, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 149, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 152, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 156, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 400, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 515, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 399, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 398, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 381, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 511, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 514, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 397, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 396, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 125, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 126, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 395, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 108, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 109, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 519, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 394, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 393, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 382, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 517, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 103, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 104, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 106, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 389, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 312, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 334, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 392, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 331, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 332, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 333, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 335, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 391, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 337, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 338, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 340, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 390, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(pCollideKernel, 339, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02141d3afd5f61233d013a73045bdd63113f920972e10214026f4f069c21b1f332397d9b8d6a97a5ffa7a037")
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(TIMING_SCORE, 0)
#endif

#ifdef BITSTREAM
#error You are using too old sliccompile to compile this maxfile.
#endif
#ifdef BITSTREAM_NEW
#define BITSTREAM_COMPRESSED 1
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
16ffPt+zSPbZN3U2HP1x3HmLw1T3EPm96/o/55ycvvy9snHDx827lfhj71nb27468ULBSvWK/sfI
760/2r2kVevZT6zb2uSh7779uP7NEx/tmj12XvMzhEfX1icW/3HoQLd3x+/65Syh/TJYEfHT1Wf7
HjPlXu8/JqOZ982jm15Rf7TLR7FDvuXMwmeeD+qp/S7rbvAp8nvpz/vfvDUgMfk0+RyssM44/EDP
K7ePtvpmUbNB744+++WoJSEf7zrXLO3Kky1feTjwzunkbUPHHXpv1ZuPTdRNjgh6uee6TXVqv3OZ
5L3rv3LtSzM6Tg9ebh5bohn57UfzFgR5pWpnzY9opJ3WOnT0I3+WjUt+ufY175MPdgvoGf797dM9
Puy9KCm2c/u0NvkvL3zkYrueM5vOfHvt/D1N9c9/cvr2FFP7L1qfHnc+om/UFs3pjOciRqWMGHtl
8scf/5K/M6jpY0dbEVrH6W1Fd66t+qYN+TxoUJPCpdpREzvu3PpKO5+fsnN6hS7sTPKfCXx20hnv
0FEjC+s5Lp+fVf/Un+a0uyvjR5rzNp1adWzKxtKf3tx4dGJS2+jgDrW/eeXF472bH/iytbVVZhfC
85eXL5+9tP9ao9qr4kcqf3q2xTcRpfmvhx398Xrvwo/rEqzWxyF/jZpyrWcj06XU7M/mB3/ReewD
0ZMjxl66lpexOHZXXvrgev76A+aWTQJX/Oz1Q0rg9NodLWnqpwfnz5W99+fVuW/NbD8mdnPX6D++
XfZhi8aEn6yKv34+ZC4lgqf41hLFI5qL02f6ieMNNspkjUXwB/8Sp3/phjj+xxZx3KuVuJxbboqX
+24Lcfq64eL8J7QRp58poR9zy1qi5W6rJU4/o7Y4bi0Tl2evlzjOLAkFiOBaCXzSg+J8irzF8Un+
4vVq2UCiHeuK10smZW9/i+NvSthV/i1xPEFCnuD64rj6jjjOrIOL4R9KtFdriXbvJGGfKyTqq5eQ
01+CvkzCng9LyLlgszif529L6EHCzhuFidN3ltC/yiCOH5OQP0mi/8ZJ6KetTNzOn14nTj94mDhe
p464PJe9xfGGEu3bXgLvI+HH3pTwM0TNovWKqivO51d/cT7Mvpdoe0m0ezxJHUXwoj/F6edL4NES
frXDBvH2VX4sjg+Q8J8TJPRJxBHl86EE/4YS/LfJxPGNEnaeK+H3Zki015X3xOVZIOGX6kqUa5Yo
9/27EuOIhJ0UStjh4UbifPpJ+Jl0CfpzfuL0X0rEFUck2neoRL3q35QYjyTqdVBCz0US48tfEn7+
YlNx+gcl+L8swedcK3F6jYSeSyTa8WsJP9lHwp8PluiPtyT4+7SQiNMk4rc1Eu3YXcIPt5Oo71Ob
xOnXSvSLVyXqe1JiHNwhMa49KzFObZeoV66EPb8nIc9CCf45En7puIT9aCXG2b4S49oJCXyeRH/5
ViJut0rYz0CJes2VaK9LEvoMkbCTgRL29qCE376+XlzO1RL1nS8Rh3ST6KeTJeRZ3EwcXyTRT9dL
+PNICb1tk9DzTIn2UknML3R1xeu7QkJvQyT4b5SIK+wS7bJAwg43hojzSZYYx8dKtMsf74njWQ3E
4xyFhJ7bStihVoL+dQl7CJOIl9pL8HlLAt8l4U8yZeL0SyX4bPlIXJ8/S8hfKjE+dpKQ53kJefpJ
0CdI4Nsl5HdI8ZGww8cl5H9Nwg9clOiP1yXa8ZLEfC2gNcOnoawkkzspmAB74o+UMXbYUJZ8g8MP
wBkP5fscLrvGbch2Aj5pP3N4fhuOHk5dyh77kcNzIzm8IeC/Gzlcforj0wZw30UcHlDM4c0B/zyA
w611OD71AY9pC/J8wtFrAX/nBPAfzNGPA/x8Dof73aDlD/4E5NzJ4f0A33CFwws6cnx4He5eAvS7
aTl7tAJ9vszRh8MBTH+fWpw8kznNnIb97OwM0PNFDuCPlwa9BfxLOJw/rtquNocXvcU11JfQLhNB
D6VNuAIHAr1CBXr7k+PTDPCfX+Xwwj84PA/w5b1BP397U3o2AH3ybxyuBjx0F4erVVy5/BnTQLb/
tpBFzOYQ/lzdpk7A52ea/9AYqNc52h62Al54hcYf+AHkbEu3y44UaK+rHH0Sz38r2El/jv5JwOdq
AN8nKPck6C2Co+fP0d44BHoO45AHAV/wKcgP9tMNcD9WtnoVB6l4vYGei/6i9RAyncNLoL5GwC9B
O+aX0XIeaAF6+JTDPwH8qzehXQT965X5HB4B9sb72DmgHyvo5wHAd3txdlv8Bme3T0I1kjpy9MVn
OD4PA/23wCdZwGcLiQ87EHuIhnPR/PniLLCHAIE92C5Au0D71gP87AbOrorg/PEm/uzZT8CnPe1n
XvgD2usXDlfyZ3IOA3/ooHWBfunroIfaHM73i7PdQM+XaDmz/KG9vuTwBYDHQH0DoL68PfRvCPa5
nm6Xpy+CPQRy5SZBvQa3hHp9QbfvMCvIWcrhIYB73wC/9yjHZy/gL/0C9hBM2/NT14GPnEP48+kx
YFf52zj+ywEfNxjsB+yQj1VeAf9p/Yb2Y8PmgTwHaD85vwD69d+0/xnbhvOfAR9z8vQGQZ8FvZU2
54AOQP/jTGiXIxyfCYBPyIf6nufwUYAfngXlHqbx/nqo13G6X0wKATvZQbd7R/APhRG0vbXoCe31
A0ffCPC0zsDnV5pPOoyDEbdpe0gDu80vBXvgz96dAf4P0+343K8gTx8O6cnrYSjY5+90e20Df+X3
Fe2v3nkO9FyP49MH8GC+P7bicP6+hMZPQvve4vhMBvwrb85vJM/k/MZykH8bxBWFazhcy58vBTzg
PQ43AZ/Fe6Ed00DPQL+kKdQL5G8H9J8/DPwP0X5JC+Nv/kWOz2jg0+0YyD+Iw3m/dCALxt99dP8a
VwpyhtP9ZfZh8XHhiWFAD+NsIuAL0qG/nKH7y3cPQLtDvboD/s2jUK/f6H608Etox4lcuRvBv335
CLTXHZr/Lx8zfaeRrAjuh+H70dbvQX4Yx/sD3m038Ac8FPCN10B+qG9rwH8uAXsGP/wL6PmzfaDn
OA6/DfQrTMDnW07OlwD/ewvI8zgd7/35LuizPofz/WVKLdDbCs7QwE3LyrrAeHSM1sPHEv7/vBzo
fWj+vSaC/MCnN+BtioC+Cy0nEzaz9gMHalNAD9sgTlM35OhXA/0DUTCeQr/j/c8Vdv2QtPsWDp8J
uN0X5IdDurMBf7Yd4A9w9Hx/rwtxbFEPDufvYfjkOOhtMG3/089DO7ai46u6KwC/QeuzLvjb5Au0
fYZ9C/WC+F8FeM5rwOc32u8NXQn0p2j+r84BvQnGkQ0QjxWBHXYF/Ps08A/XaD4dYRwshHEQbpOS
fQXjl1owfnX6HeTsR/v5KY3Bv33E9aO70L6bF8P4LpgX3GwDdtuC47OG1885wLtyOD9eDIRxMP9r
Dv8JJlRlk6BffE/b4VHgE9GdHvdHjwe7/ZXW82qYX5T+RMfzD0K7F0C78/OLWzBelGynxwu1Auzc
R2C34B/yoX8tBz4Z3lDfZZzd9uTP1ieD/s/QcnbUAb0g/n/tCNjJY3T/9b8F8s/lFKYH/GGIc0og
zuH11gfmrSVtaHs4D3FLwH46TkgxQ//y5uj5ceEpiJOt73DlPgb+R/cC6Afi7SigXzOEj0vpej3e
AeS5Q49fd2CeXpAPcSwM/Ce+Az1D/1IA/d5TwL8dHSdErQP+gnlWQENO/sL3Ofmfhvaq/xv4ZwjE
GgH+gH8tdhzJ/ZYeR15kx5cWMvUcOs7fEwh2eIgu98pSkPM3ep47Ywa041E6HtPx8Q/4sdcAz/8A
/MBxel4/APxqYT3ajy2Efi3rR+vnFD9fuM4hZrDPFw4CDusAvH+o1x74NOBwft3gKMQbJWUcvgUC
o4fqQhzyCqc3CHNlBlhPKN5Fx7EjYD1BdpwjnAT0lljo7970OPX2FNDzj3Tcchri2PymHH0vwNdf
Ar31pPWzBOyt6E0OT4RyI/h48ge6HWeEgR6KOLwV4NuXw7ggiG8X9QH6s3Q83BTWQ+QHaT8cNgHq
C3GCHPAeMJ8tgHEnA/A1MB8sHMgJzt8T+Bvff/+i9ZPYthax1dayTW/Td8l+1wD09h0tfx+I3wov
03IOmAzt6E37mWg/wD/j6L/k5QyCegn8wFlox+S6HJ8ugGdBu+Su4XA1tMuNJlyckAw34ZhSObx4
KvQX8CdKvr6g/8LTtP7tjTk+xe9BPAbjTvgzQH+b7l/fdQV9Hqb5qAeA34D25eUfCPPool9o/2aB
+VRuBB1Xp0H8nzuWjv9XPgh6+5oej54DfxUA40Ih4PoDEMf24vCWgJ/ZDnpO53AwC5lpOND/Rs+b
boE8yRNoeRrw4/VcWAcDvcUcFo9P5BCXFl+h9dZ8P9j/MI4+DvxPrf6gh79pfZ4Bv5d7jbafP8F/
lhyh45BXN3D++Qj4Z359bGkJ1FcwXqzaA+3Yho5//obxTv0aV1E7ZLgO/TFXEAfak6FeIOcgwI0w
7ygYTI/ju9Zz6zy5Mzk5+fjEUQj6/4uurx/MH3N/gvVnUGjEs2AP0I/Cef3AulNhKW2HShjXrF/S
49ryplx9A9ZxeDC0u5n3z4c4/jdBD5cAt77OATC9lJ2G/p78Cz2uzQd7UJ+k5RkF65m5V2n6n9ZC
v/uZxkdDfJscTPejAdCvrR9x9IcBX9AL+PjQ49qzMH9Rw8R9L9RX1QPsZD9ttz4Qz+SepNulFsSN
hTvofroV1q8irtB++BbEn7mCeUfsWaDvStvhh7AuUSSI37orAb9D66cE1lcLjtHrq4pcsHOBn8+E
+KTodxpfBXaVD3b1B+hHB+sn+RBvwGMRZB2g3NwTtB/+Dvx2cVsOnwN+u8dToDfQpwXoA6G/B8AE
l/cn205D/wqg4/+ESCi3Ph2fH8iDdjxA16sOjC/WXRz9DPBjUeDniwXj8hZYn7R+Tsdvn8I8PQLK
DQY8vQ7EP7DOw+8TdeDX1QXx1S6InyMu0HJ+A3GdtRZHz+9r7IJxQfY1bVcd3gH91KHjpYngt9Wf
cPgT0E+joV/4/UHb+SF+vuBPy6nSgvzHaf/WE+Qp/ZW2/yhYZyi4SdfrYYjni2G9hY+jDsA6VYRg
nWpWAtiJjJ7vbw8HeohL+XWkpbD+UCDYJ6r1NPDx4nB+fF8N8VjAXrrdR0N8VQDr/HsAf/tF4HOe
jmM/gvWBiL30PGg/7L8UCcavtX3Bbv+gx7u7/PrqTbpddoBfKvyB9p9fvwf+8ATtB1IHgjwl9Dj1
Coxr8oWcZSZDPLBgDcjjTfcjyzRoX0G/mALzndIf6XJvScQh12BcU5+m9aCC/b7CDZwfvgP46rfB
Tn6i6RXgb3MF/vYqxLElGzicH9cS4gEH/8+vTz4L6xVFTen1io51QJ6NnDxvgt9rA/sgctgH4de1
psL8qGArh6cAfgXWA3MhgH0L8Jcvgx560XGIci7ocz/dXg+Bvy0Q+NvHYJxVH6L1/x3M+wL60est
68Gv+h2n/epYiJ9zBf30C4ij5HO5+KQE8MSjwGcwPR49AutFAZmcXR0HfD+sp5Xcpu2nLdiV3xl6
vHg+DvzeKToubQRxaekIet3mY9hXKoB9paZAfxTWT0oeo/XMPGOBbfd19DrqRljHywe/FAT0GyHe
9hPwWdSMq28B+Pn6IE8ojDvqg7Qf+AX8pwzisQGA74H1djmsIwUAvhviHCvEOf6A/wr+1g/m0fzN
JtNgPUTWXjC/AH8i20P7E3MR8Id1XX6/eGgJ8O9Ar8fuBP3na+l5gRfYQ6lgnepTaN+AX+h2DwE+
MitHzz96azTsWxUJ4vkSWEdN9qLHNXkAtDv0a94fvvUh8LlB2/MHUN9SqC+/nh8A+ywB39D+5BC/
fiXYN78KfIq70P6tnh/Yw3rOHvh9zP6wLqH+ge6nOx8CP1NGt0sMlFsiWEdq0Qzk2UTjxbDulwvr
fvy6wUWIJ2Vdabt9qRXUF9YxEgAfDX7Drx9tP8Xg93K30+sei2B8L7opiD8hXk1uRffHJtBPcyGO
hW4nm/gR52eSYb7G2/kvQF8cTK+vKqF91ZdpPfTeBvI/TMsfORbs5Cfan7QD/yCX0+0Y/hKMm4Lz
Ob1gvCv+kS73O9g/KoC4JRDw6/1ATojfeD6JEH8GrKLXnd6E8w/JMF7z8V4rGN8LrtF6vgTrWsW9
aP1M4fdBIM7k90k3dgdcEOdMgHMmhS3pOCrveSj3CF3f9rCfkgv15fcBn+XXw8PocgeDntVy2j/8
COsGJbCfOxjw7vz+Tkt6XB4E9c3vRY87M3dCO0JgC8O/7CrsF/spaP18B+taRUdpPayGeCAXGIwB
/HtYF/XrRNtzHMT/1p9p/bSDuKUA1oX4ff+j0O4R2zg+MMzIrDCvCYB1iV1AXw/kt4bCug3gPY+K
j2sHvoFyUzhkLehhD9RLJoiHHxsE7SKYL3Tl7WQfHWcuh3lBgeD82x+gH3knun0nqqG9rnN8+H3z
GwvAzovp9cxVMH9Pnkr7wz6vQLnf0+OpeZv4+NUd/GoAtCNvJ0/AuGmFeUom4HEwP1V/zOE2wOuC
/Zccpcv9YJv4OPJVKtiJwD/M+wr0H8PRd+bnX/z+PsSx/LpNEIzjcsE5n9VNuPGl6DlO8/w+xWoY
35Nv0vb8KpxPkM2mzyesgfOHfhAP8Ps+20NBnmZcufz6+Q44B1UoOL90dZv4OHgR4lXrYVoPS2G9
Il+w//UBnEsJ+JaWvyAT5LxIr8dOgvlC6btchfg4pNsDMK8p5OrLn8fbAHF17n56vmaH+WAxrLPx
69j1YH8nVzAeLYZxNllO97uJEuNIKpxziNhA13cz7CcW3KHxjtB/i5Po/nucX9eCftEW6B8Fvy1v
S48v23OhXwvWebzhnEaBwD4/AT+TC364B+C9wB6KmtP2sA3mO0Xr6f5V/DXgMC8IhXZJfQLa9zq9
zvM+rNsUCNZt2oC/Ugv8VeerQA9+pj3gAeA//drT8x3tIXG/HdAa5Cyi470XYT+rwM7ZTw7I3wXi
c2s4Xe4CWH8oakb7gVGwvlrIP68U8BHRYA936TikRV3QPzx87HEo942F4Df20uO+7+egH2h3vj9+
D/NKay96vrAT9rMKBPHwKxB3FYCdhwE+95C4P380Asr9k46LWhhA/u/p/uvdHPQvsMPBsI9W8gXN
50lYDymCcx19Ab8I52eSb9DrXdOA3ipY/zkI57GLYJ+FP5/zLexPqQXrBtZl4JcgTuPX95Y1Ajlh
nY1fp125CfQp2JdZBPYZ0Yn2D191Bv1cocfT63Aeo2g7rbe+G0EemI8M4+WE8aII+gs/X54L6wyl
EEj+Afgk6L/FcB6DP+em2AxywvmrRwB/Hc6lyATx/F+wnlYM529vwzjyPqw3FvxF0/eH8+fym7Rf
3TAS/ADs7/DrMFP4/aBgerzLgnOPuYL54B3op7Isrn+BucvSXgZ72EP7+X7APyCYjlevjYJx7Rbd
H5fYgc8h2t5+h/Eofy9drzHQ75J70fOOunA+J1dwPm0fnH8ovEuPp6thXIso4BQ8BfQcsp47z+a3
jasvv044AtYhAwT7UDkwHykZRPvtJ/l9/EYcfhn6RS+wc+tX9PiSB3FRPow7Sgjo+4yBfn2WbseJ
sH9dINhHeAf0HxFM+5PTcH5eLhhnf4d4r2g3HR8OhnlNrsD/b4LzDPKrHM6fIz3my9mJ3zRObzeB
Pg3OFxUX03GFHNbB5AJ/pYbxIreIjtPOgD9Xn6Pt53I28Pme5r/GAeVepO1HA+epkr+n+1FbOC8R
IThn1Q38Xkljetxpxs/Hf6Ttqh6cK/M7SPNvEwz8Besbl2G9S92Pnjf13Q72Pw7mIxCffP4Y8IHz
5Lx9Pg7tUvwHzPeBz58QFxUJ7G0M+Hm54NzOr+C3/XbQ/TED4m0rLODx+7yvwrqHX1e6P86E+zjk
URz+KOBvwj6m/FkOh2MxsiBYh4wQ7MPOnQ76h3iY319rw+/zAn9+XNgP44VVMF7o/oT++yxnn0tB
PxGwzlMM9Hw889x6brz2E9xf0I0fjwTjSAewt5IDtB2qYF0lX3A+cOIOkNPI4XOgfRWwL1ByQ+Dn
4f6Lklu0fr6G87cR2+j95bcTQf8wMvLzwYAGELd/SPfTPrAvad1Fz1O22aC+B+l+9MEIsKu7dJw5
BuKl5Lb0PFEG5wdkR2k/MwbG02IHR+8F7dL4gPg4dQjOmVh/pMf3YIiH8wX7Wa+BPCVt6f7blN8n
hXkoP04dB/qitvT8ojHsKxV8QuvfF9Yb5YLzS0kw75YV0/ijB8T986JcKFewvjEb4qv8/nSck1UM
cQjYP79+dR7OFfudpPtvG/APEeAfZgG+H+KfEoh/IgG/uo4bL4rhvEQe/4xmC/jncwL+X0B929F+
YBns75S+zw0U/LOH+4+D/vgTvV5xDNYDS/bQfjiGvx9BcN7yB1j3LhGss+Xy8w5or+4gfyCsCxV/
wPHhzzudgnUwv420/TcG/2kFPnz/ulUP7mPK5fpRP+A/EOTJFZwPt8F+ayHM1/j7j16B8Td5N93u
GohDSovoec1eifgqC+5rKyml+dyEeWsJrO+Vn4uA+ZQc4v9pgC+F8dT6A92+taHflZ6m61UPzo3k
CuLSrvx9N0tpPa/k+zXEb/z+2tHVYOenaT4d+fNCsD/O33e5BuolPEfUqjHoGeIKfr/mQfb8TyOZ
Ffwk758dsG6Tv4jD+XU/H7hvSwbzFP68kALiutIHOfw8tPsOGEf8BPsIw0D+AJCf71+tVoH8gvvv
XgC8QLAv7A/nQ0rr0Ou96+AcXdFp2j9r4X6NYh963urdCM6Zz6D9/x7eL/Wi/VIurBclH6fH/VzY
X1ML7O0ojONywb7zZNBDsT/tH2LgfE6hoB1z6kF94X4E/jz8mC/Ex5dnYL26pCetn+6w/+43j6tv
O/44JuinyJvWTx3gUwgHos8Dns6e52wjOyI4z/meP3df3hKIEyIAz4yC+sJ5P94/v/aF+HjUAM4/
5EfQ6yqvwHqIXzjt/49/IT5ORcO+gFqwfvIEnP8sOEXHJylwf1PBSTqOvV4L4oQ34XwaVPt5uF9b
DefH+H1tGdhJEZyL4PdbO44GvIyOEyywz2K9TPf3k7C+oRbcXxAP68wlN+lx/+FOYG8/0/gc/hzd
XjrOPAxxaTJsCPD7d3/Cuk0u7Hvy84u9cJ9gsmBdcQ6Mg6WnaD/52xvgN2DdhvcbK2Ac8YN1Wt5u
/z4D9e1Kr58sgXWqfLB/3u+dSAb+oDf+XNBUOOejhviHH6caeUP7LuX45ML4mzEb9H+Ajsc+h/4o
b0X7gR9gvSUZ5oMBgHeGdfJk2Ifl9dAb7iOzRtHrIVNhPzHiBK3PljDvyAX/Vn6fMvhbPzgPlgz4
HP4csg+9PnN9j/h49z3cZyqrQ7dvS9C/XHAOcCzUV92J9lfh/P6LYPyKhfWK3F9oe3gS7CEf7IFf
70qEuNp6lO6PJfy5dMH++2ToF36CftGXn09Nh7gI7Lx9sfi4OQvGa6tgnB0M46/1Ls1/SLH4+NUM
9JkviFdv6UBvl2j+p8BvFF+i62tsDv55Omc/D/D3X4OdJAvuR9AdFB+nImEduwDWJ1cCvgX0kzyL
1k8e3N8kh/1rfh9wJezT5Qv0cBr2UwrP0PUa/hnYleA5AB9D/JycR5/niYbnSARE0eNOGqxfBeyj
46sxMO4I7yPQwrmsUsHzAXrAfKpoFNgz6FO7AvoF2BXPfyMf98K+A7//ew3i55L19DpMi2TQj+A8
ADOvbSJ7QLZkA79Tyf3NB/0InwNwANolIpvDf4ZsQ2GelSzYr/kU7k/JvU2v/yyAdZXkfXS7fA/l
Cp8b0AHWVyOa0vsdnWBdsVCw3/0i3LdeCutRLwN+md/370Sv27wE9yPIBOdwhsA6j1xw39886C/F
l+lxcwS0i7UZLWchtIsV5ikzAI+C+2JKZHR/6QzPDUieR+87eD0I58eep+cvw2rB/he8PKdHLof7
QlxRAOeU+Ps9T8D9gPmC/cdZMK+U76THqVpg/8Vg//w6/xZ+v/4zDufPvf8K9AWC++IbwnMhcvvT
/lmm0aSbLGaN3aG1OTQamcZgNjhkmjRykWliEuM0qXqbPt1gd+htiXGRRotZn6hNMeq538R/0eiy
tQwDrdEwmXwdkqWJB7pIo9Zu19tlmhHmSQZzKsHtmSZCMnqYIsikzdZZTFaDUW+zG0yKoKgcs9Zk
0I3U2kbEmB0KhUNjtViMmkk2rTUozabXq8arTW7nDNYajRadSp0g17iSN8TOZlW5QhulUGWJ01kj
LUajIVU/VG8z641h+my9LtOhl0uQB5stNhOrOk2a0aJ1xMSOVyhUseODA1WxKXKVSjUsQRMaPWoQ
+1tSokaVlCjXEDiF4GFZWpvB7NBksj+wpDxkj0myGgllrCFQxVCnpKjJrwpF9KjhaWl2vWOQIZuU
FKSKNchVsUy+BEO6Oc6SqlcxZbosqfI/UVKlklN9nNasTdfbBhITmJCQY9YpFMMzHdZMx0itMVMf
KdF+0pkn2QwOPcchBle1osGYv6zx8UMTRa3NZc7h0aPitZMGGhx2wjs4NMRTvsp0vSNOa7XqU0mH
VMUPTbCPdyt/IOskBhkz7RkGc7qb6gqZmKnP1MfrtaRw8tHuUI1PcYtBqB1JzzZZjJhdhEkYBtEY
U2MppVVYH1Ex0bAxQWVwhc7mhC6TMQc5IQwjImpSSBuqDAZRx4VzBLuSIVybmuqejyAKUGoSgjTV
7VDhqYasf6hkU6bx/pQ81GmLmowMcwVrTgn2IDKaWRVyDTNi2h02Sw7zozZGp0I/K+WaBI3eZHXk
kKHTSsZci43YOFAQB6QeqsOZHGGa+BSNgwx2MeMTHEFWrcEWM3S8Z+5NpUpwEOkS9Ea9zqGwO2IS
gjUECjLq7faY8SpSKAOoFEGkAjqbXuvQa8xEHTFDiEAOpcJq0Ov0kwx2vUZnMZPqZeocGkeCI9iR
aTUyREQNpITBmpghbFdTk8ICeeE5Rgz7KOtwrvf9E1VTKknViPKNWp1ek8G2pNlAPJGHVSRlhpbX
kLhrm5a0JhStrKg7y4v+/Z/VQjjRAhkHSJxn15OIDymCxDp2p8LH8wbvCDNY7JoUrV0fFENCRn74
FOIQFhHZyutKOgixMJPe7FBTMGMmbEYhvcHsAj2pWAU9WzUtiTBt+hStUWvW6VMk8pJIMD5Bw3II
J/U0kbDVoWckTjWqmYt5kgkiWoJnM6Ex+yWFRLRmjU7r0GUAoiel4e82vSPDZpnExNfZ2RoraUgL
ExGTrp8lJ6CV/ErGQs0EfQ70N1maXmfUa236bJ3e6iDfSCvpzVnkgx19sFkyzanko4M4GaA06U06
a45oiCaP0qdkpqczcXmUUiLgFPhEhbhPjFSqqLCNIZSIC11m6JI8UgN6ZYEIpWsSVcHSNZHCXRYp
3FWRpFmKi6RkWzaBGLPWZJdsWyV2GQq5jbEg9rNL9EpmLmjQGhMcxDxdyhFMbDbBYFJrbVoTMVEb
G2TGJ9hdycoKVx7g2V0rzy5SHhnvnWdVKvnJa3mR7DeWAxMqCKZ3KtFgleYZJTWno6kkG0udaTQm
GMysbw+3ki8xZuLdVaJBOk0tXTJFJTVFpakk5SOaHmFO1ZOpvT5VobAR/2oxcRGqRAPjDGHpfDgr
TizQNxlPSEu4Nk0ntOI6ClKTqUqCJdOm01epJSGd5FReQCelKcGUXyG32vQqbtrvYg5FpjWVdLqq
ep4wSyDpAzFchyVBjIuZQtheF0koMklRBovZxXxMa7ITwVh9lp5xEDaHiznDbZlmVF5kDhn0XMuq
rCTsgDTSY1kxXOPAGZWE/QlIlS6TSpuVgM7FFSJJswqpPKlmXSYLRuntZNxQsdOcUApjKMUHoUoM
q6p1JWIpOZUKzqWqjGzQNjyFRGNZeptSbsJwZIbWnE6+xQ9lJA6ksoiv4oizlZTClaDZ/cwOEr2S
gZdZ+nQ7c8X6S5ze5Mn6Cz9kceMCw8DhHocgngOnA46FWxzcGXGll3KwIrjZC6sN9yoTmi5cEPJA
p5WZiK0qScSw5C9RI9VhqllkFQtZNVamxJKlJ/zt4i3K9W5hLFXNdT8uqqw252o7JAm+XCTrnm8I
Y0ZF6aFQKls4M4dkvYHkOnGixq0OASOAkYxHpFeLLm1KZZUaByXp3Vxxl/K3YlZceSoWEiQxFZPI
LloUNf9VuEPHS8BYl1wDux5Os7IlqIeaRJuwMqXTdWUXRWZm0i4WDKTOWYa7JiHQOeUXrHSHziPt
sz0oiJkDq0yTXSJ2UWc8rVPhGZkVcjJp0hCHwuyfKtn1N6cFMPlclAVInbYLQ2fIFp9nCemc7Z3w
dFJ7J5X9GOuVBB2ac3Au5xdVNkUJqqhUkKTnEMvNFhOu0aSbMzW67GxFoFk/ScPuOrNLqOyaLwkh
HVoDmRZqorX2DFge55d/E+yVPVTMcHbnXKWKTWFW3YhNpOqBp16lTgjTmO5HqVE1UjtmldqeobXp
UzVWB8lSeTYkWJCRqvWAmqi159LcH20o5QNS7A6bVlcRXVlsOf+sTpzJdE80k2C5p9YvXZrz2qip
AoIrCmA3GCrJG+hMXmf8nHsZZxyc18mZDYSxK4bslJL5FGkxm/U6dv2oUn2DndW3OmXVSE3sGTx3
e8a9rolkWS7VRLinyhuwIcERkkVYMVRKTQyxZ3v5jl/leoS7UA8PSwqFze8Y0i1Vqiw1t9F5L0qq
lr483mN13/vcGykq9BxaXT1XQ4rqtQFpT4+6WNUMKzQTVG3NsAyrWUlng6nUIgK3xufJGH+PxalQ
cHj1FVx9carXPONr2ATH17AFjnexhq6E8UiwYBcFc4mt83jERUZuVdSDyN0Dr1mt4txSjCcF1KjC
JMP6e6k26UJrVHnSxVRHhcwsoTqdSoxddarNMnC9QmxEJfR+SufeD+cWKS1EQ6gN6WYiVEpmWpre
5e4fooljqlFzDEMJQ21qqpscPemIHonukQe7J1WS7h73pGJVeJqaqB7bDWpCcK5/eyASnroo0NQl
SOOhTqtm6ImInkf9HojveWEeVY1xTJ5IyeTzrMBqh7EeiVvtUj2q7HjPpB0vLK7SAXvBAb2gFH2a
xcbeMSLwgxLZBXvBQXbDZL2LtOEOC/lEPoyAg60ityh5wIk9kVozrLjdjprhxW5ouMGKPvWmCDHY
GYTrqFEWs57bFaqUUfocC3V4TKJY6RuJDHb+FqQBOochS6qNq2JQPflDzHp9qj3REs9vvrvJwG3T
rrTtFc4cptRlZJonSBRd1S6iLivFhXKYXKFwZpPbpnNK7rZUNruLnAkhx5G9x4FZznYwZ9qZgdCl
UBDGSsFOQPm9EiqC6ydmao0ahyWGGVodQRmkDObjsIQQjSJME2dJ1diY8yEa5gfm7jfmB6VcE6VP
02YaHdyPqeyv/E9qm8Gk19j0DKaxWowGXQ7HLrSiBmTSr2X3D1MU7G1MsOmgVBBXmWnX2zV2UhYh
S8nUTdA7VGo1y6DSiv7/km5IgdztF2DEVVXbgxCbUUeIh+oIk1JHmLQ6wqTVEVZdUwnzxFT+B3RW
kyYkOZn5tynlvhvSf43mqmFOzBTz3+aAa3xw+i/QiYgJKDUat9xoLJ5JKTWxJFjkhVCqVFaHy5wl
+pXL/JVBmWYDiU9NGiYESyXS2Qwpmcw2dYyJBJJW5ui3xpFj1Su0HuRJKc9T7SNJzHzSrM92uM7R
0+M+NV9S1Ydoql1e+QEWmhPpVjV7FsxFhtU/ZlVDBbl6dsmz4kSODRFGzs/zsOf/PW4L7kEDZAZf
I+V53lT3Vw5nLXlPpUEN7W45yDBq4uCTa2ycnjri2LhyFEeOlp8D6aM4VTOpgXMmTgqgjms4o625
kwdOShovJHVxU70KBxSokTA+Nzfa6RyebXFXIWawC2JWZ9vbPU5VbTXf40o4336ukh9sDFfTIKra
LEaU9L4u+zCa8md7MF/4u3YSLEa7Sj0oPsGSAKXZy3/631iIYudBFZvnMA2yS86DTP+vm/8p+whm
H+fyP1Xlcrfxv72+WJVnEFtKc+oZ/od19v/25Lon+R9QRU14mP+ahef77mf+6zX3/7ZV0z7nv0Yh
Hnief+NORo3Pav6LdfK/YA8e+oF/Y1VxD3cvjHI1p5QzdDm/k1VJV/lUsbLsBgupVWUJFsQk0C9K
0ojsjRMabWZ2DPsI53AN/+zkGHV11sZVWYka4tNrrCDJ1XM3C8ILbGzW4IqsI9nlddalVmdfgD8U
XsHRYLIaKbXXdEmBlG9UqQlqumeF8U8vTrRW3JJy7+pWHb1JGU3Nt5DTkmqyhZwWVrMt5Ky4KvSG
ehtDrXBH52J5K2lRIalFsexu6UWEASVtTZ4scZ2xRwdL3GBf9eBWU8VI9/saLEHCbj0sIcHickbP
tnAZ48zSGsvv6bgn27juFMIMkW7RV3s7153SxouT2zLNDib41NtsFht61myl39BGWWCm2WJj3rGU
qjFprTFV7Qag+FgYOdMbfYy7oGxCWIb7Aa7LZQdWt2ypEPmeSUDCUo81G1TeTXUW0sAxLnfTIKvF
YCaa5Wci9KmRajwYrJyvRRWfEKqpTnGenwQSiBF+T8Vw/oiseycM9VQqF1Xv/HFRFCMlzyhEk2Dl
zIy5vY6JE6q2NvZdNDYy2dbyTwNnmJTHHrw8NXYkkL6TPJ7Mi9REC6bqFlyN82gCgQZoyh99dC8F
cnow7b6IhU+oud8wzmxUyDJQU/7kACmW1ZrQC4oL1uA5jKfFSU/rPSrOlcir8r3bbD9N0FBP2CCl
hOvN7EKVIS0myW5j7qs1p2qIHQzQMDfZArUmQ2+06m3McZ8g5mw1s1qXxQZbWQAw7k6doNLcM9Ep
PTFlhd0zPQmeQsIWl+hpzapxGFHQYCFVN1i4uw3G9M6of6Za7nqJeyRIKKXbLFYUzxuaXWwTtFlg
1W0W4m6bMQ5iQLUlrEGfAzxDqRpnsVyrocnqH5kVtENY1e0w0N12YIbSQf9w/dwd2++1RIInMrIy
eW4D4//TO9P4mu9L4z3tSi6dxRZoM+gf0KZrcgoea+eeBjyI4t0caMPc1Uwo0UzkPZW/0kAWWoMa
kz5T/m/SWxW1qEntsYfd/5N6mqh8nvcw2FMU+D2lBm1SuHyHJvM2AFfyuEqnMxIxlSFGg1mvtTGv
FE23ZerNzGvKNHpzOkFjTLEmRUiYPFQVa5KTpFQEhQaFBYYEhTJKMcXzKrjXpXAvh8CqgNfweso2
kNg6v/LiOQ/+nmLPeeiMPIdAZgUUT7SEO01Kjar8pbEG2HtipmZB9MIny8fTGD+BeiltRbCjFCuD
PWMiSm4Xo65mwCRVlmj1x0tQUzd8uTS4ilB7MOB4wEXS/TrnxbisSlTYtDS0VVUm9niOWJkTKUcE
rG70LGTJ1qcCrOhENXjQwA2mru+NS3Z3emO54m3UBtf2DRkh8RunQzQC58GM3Arm8BxRKBtWi74Z
PERT6X3nNSpARXnMtn8MGaXZldF7XvHgipfB/2OVZ48uMucOhjGrt5VOHtybQkNJnGXUpzlU0i/s
vmdlC57EcS+L0duYxfB/oFHDiH5thvSMf0TBYt3mfr293rkvCa6s+fsmnNDPhEv7mfsmk0s+6B9U
msv+6X4J5K7vul9yVeHX7qcI0j7vHzQit/3h/RLMSddnz5vQbJRCNkqX3J6ySuW7XI7Qg4W45MFc
Zu+SM6qZqnjiV1zlXQ0X4WoRrvV2d7hJd9yaUXh1+qCrZTizw+pO+IRChAqFCHWpM4ZWrdD7I6Ww
Kw90rSvfH+FccgT/CWr0yI3cF8mq44Tui4AuurD7Jou0A/xPMLRquc/7IqETzzH+/oQyrhbjWSTj
KvcaCGRcLMoTB+Qi62p4EBdLcM0FuMHM0yDG5SI874QuFoENkD9fGYLuTGVbmDvzWZ1HQirY535K
mMy9LDeMvlMaOgd/Gvrelh1euWz7/Sq8qtvmpe+av6ci1YSpebANdU9NsDryiJtmeLWtozoySZjs
PyrU/Tblaoh6P0zc+Xn+f8LQnUv1T5m7c8n+MaN3Ktp/muk7FfgedADqzpH7YNpUefcqfKiqzHsW
NlRR6D9saFgUERMi0lUIwJ5zo29Md3JUtPK9se5w9uSo5b0tUfqQYo2Wyx4CdM6Ra3R9ioU/lBhr
kKuqGyyylxAy/SFTTXST5P0rW9oKPSjT84hCoIeBNaeHasp0X/XjbNj557TkkmT3UlfIc967PuOk
TJH6BTHPymLOgKJzn9SBUPZJV6y8Gp3WqKs0ogRrNKYqOahUiZoEBVNHIp1Cw77IU2+3W9Jq6PZh
daImnnuWkif8Pe9dbLkD7lW5zuy1RktHdiKtTWe39rI5A8VyVuOcI8c12EOukjfqVsUVH4xn6ZQc
XZDOkungPunNqcYYHZNVRwTgj9XrVKQzOxSBRB0GncZCWk+vNcUkahLlGlVCCMckjH/UV/UeVMY8
A6xGOTLnPjmm8cTDMBJ7wFxS3R6LK3lS1QVxcTsytIEiAuBTrQoNkEmwrFZ7cbdjuMlOWp9i7Kj6
8gTh99Lbusm8ZlxtDRfqjp+tXtESTjbcMw9rtMe45n90icT7BGvUQ3UkX2KkiNatkRaj0ZCq5/b6
VHINE2AoWWs2mNn9PpU7WaU2DV1lEsYJIHh5NJtbxGaoV39LElWqjJj1uVagUFwJshDR6ovYn4Kz
O5VRb9KbHcNT7HpbFrF9CeqqdFuFS+J+TxA+TopBE1zRqRhRJZ2KEIkpS4RMXFmVCen6JLoilAiR
WEOLkYnIXpmsyhYZOYz4BuYhO9oUQ5ZCEUo+M86UvUVMYzCnWUSolOSz3eAKIYlbskySlM4bVYyo
kv5EiMQUU5msSsVkmJVhYRrXT1Ay7xMv98/cOUrmGWnjx1ePGRlpEDOPeNnFBWNuCSQ+LCrHrDUZ
dCO1thExZodnVbeLSltVAYwHddZqUXJ2KugqtaIqainZqy5DMhdVVqU3vEsqKsRgZzo2d9Y2ymLW
s29+T8ySa8zKIJEqUrbOi+oitcIJtcDFOOUupHfKX7wxXaZ3wt9Zg7qdD5UXqHQ9n1JuwoNjZAb7
1G4VZ/uB1MCp4vkHuWFqimDSuRIMJjVz466eCTmZrsVN+FhmoUo3LFAZlKJPs9j08XptqiCSLa+9
Ox0hmISFekdF3vAQ1/OGkXE+MkdnZB/gRoYMraZ8x0CfrdNbmYkE/JDGHFQRgtZMm16TZbA5MrVG
gBwZNsskmUlvIkIxa0CVjEwRPWp4Whr5dZAhOyZ2vELFrFfFkqYKSzCkm+OYHRm5inknHANlaW3M
zdiZLKFKVT2GqdXLbqhedmP1smdVJ7uyenVXVq/uStfqHhTmqikQStdsoQqWLimkivwuaaSK/NVV
iUv2IJnfRYOoIn/16u+qSYS7bBLhrpqENEvXVCKd3zWVSOevrkpcMwmp/K6ahHT+6tVfyiSCdVq7
Q5NicNiVaUaL1sE4GuJpxgcHqpgHrGhCo0cNYvGkRI0qiVmRU3FDf3j0qHjtpIHMmkeS1cgtsErY
SLDZYjNpjYbJeg1fhlLFJuYtC1KlpFA2yPygwmbJFSvXxBoYSVUpKSns5rtQH+LqcFlO0sPYbvbv
EDT8XyJoSNB/mqAhbDdIM2TrU5Xs/9LulfkeHm/JNKfyQHmvS1BooFa0MOVVS0pU8B0oUEPgQAYK
Yv4Lluw9lGiCLsqpspKQiqrVy4XuAgkVzM9K5j/2ZnKi0SBNhRahZlUJyJRSrjvxYEWgOsYJlNck
xWXN4TrxCmQFDqyGwK419n+UxOKu/j9YYilb/Y+QOFAn6FnUMEiPdsw/dsQjxScqxSSg+hrb1fn+
VXXpyjBnJfPlAm+FBvyjUIIK7TgvTxkmVhY/plcqhv0iOdzzrMOV94p1oJJxusrgkBpkHWw3GnR6
wlwOTnV8cKgIfwFvSf2Ws+M0XJMMWb3WIENGjzXKkGuemmQYFlSzDIOCarhRghU13CghNVPjcn+A
nErgMO0w8cmMGHVwjDnNkaNKcZW+8tyR1MJ14Uj2FEF+hYKtv5Jx48FK93iJzrkkaEXnVxK0onMp
CVqXVU3maDVXd4n5pgSt63WXmEeG6SdqnIVS5T9IhcnlYSMQMPat1IiO9izMR6sw1ovKVT5lIPIT
Q7QliNdVsBQaRiRiJ8Uqg8HkjJ5ZL3MvQ7ibGYLdFYmxFfcyBLmbwU36EHcLCAn1IIPRheZl6KTM
APlYiF3YF0EJe6VSaoVUNL9ohxGlFHUVIpTKasok0YlFKV2QiUQk4noKl3JZovldkAkoXZVJTE/u
yOSSnoDSuUxswCqmJy6SdTm/c5l4SldlEtGTWzK5oiee0rlMTPwoqif2B+cy8fmdy8RTuiqTiJ7c
kskVPfGUzmViI0MxPXEho8v5ncvEU7oqkyv1ZAYEMeElw0Wx3C4X41xyllBKcG1qqsa9dZdKy4LC
r66vbIitFJbjIQwUyvwXhtc7FE7XO7g6ub7kT0KuhCCNOCdzhXYkdildqSmRHN6pXKmEVENWDcma
7tA7bUmn67n3IFANN2Uaa6iKZn26m5zE2VgcNdSqouztmSme1bfSURAXN8oVCivjZAbYIzO0cHte
NVklOGzMW+3jEyzVYqZM1zuIEwJu1RMskPBKzLHqa4YZKKxGmAURydiTcwPsAy0WY81xi7VUW7Zg
nVGvtQ1i9qocjupXNaRCuChLZopRX01+oWw7MGY7yGYxMeMVY3PsuUvnTKUOCXjSHZzwcrM/SHLz
pENIMvOoR0hz86RLSHLzrE+4ws6NTiHJzsNeIcnP024hybB6/ULipIRH/aJqXu72CyluHvULKWae
9QtJbh71CyluHvYLF9i50y+k2HnaL6T4edwvpBi61S/EVnkVcoM9xpxmMBscORLCiGZTMPdSZ1st
ZuYssJv54rRmh8Fu17qTz5UOIZrRJeMXz2mwD9OaPVGOa0btLGsVBiya1UVjFc3rqmGKZzbYR+tt
luG2KD13CMiNzMGskt3IAIW5kYO5/4TpNBJZKi+FujIuSOZyMgKI5HPFtEWyuWTYYvlc8d8i+Vwz
6qozVmHSIhldNGiRnG65xcprvO4bAMrllgGw+dw3ADabBwbA5XPfANh8nhiAMKPLBsBm9MgA2Jye
GwC7eO22AeBc7hgAl89tA+CyuW8AkM9tA+DyeWAAlTK6agBcRk8MgMvpuQGwq/JuGwDO5Y4BcPnc
NgAum/sGAPncNgAunwcGUCmjqwbAZfTEALicnhsAu7HhtgHgXO4YAJfPbQPgsrlvAJDPbQPg8nlg
AJUyumoAXEZPDIDL6bkBMPtDbrc/yuRO87PZ3G59Npf7jc9lc7vt2WweNL0wn6stz+bzpOHZjFW2
e4JDEcw9r8POVj8lM03swUIJWubpHoH28of7WZjH/RnMdr3NEWNinvthgZfdWox27nwJYRJe8SQQ
wpp/HogU90iFin08eozFrhlu1ZtNZE7PMQph7hw16uEuXuYhJQZCwzyTBB4oRvKFaPgnjvBiuft8
JDWzX8PsgSYmui07k2skpUtCLqFLEWJniic5lMw7eTUmu0Ezifyk4atqm6hmLYD9JUNrTjXqK073
IFCh4HIMSLHYHGhLGJMEci+UHqRm7CWNvRVZlC44zZhpzxildegyuEeOirML4dghOkmOoakGu4BW
nGeYjXnckEHnEHA1iFaaPbQg9WOUxDkDhSIyQ6+bYM80xelN7C49f0d2ZVLqpnxFiI57RhIDci+o
YB+UMIx7mAwhrHjkhyTDBINJxd8KrVCkWgZqdRMSbVqdXkJYKgPcHu+MSup+PsFDABSh5fXhn2pQ
USElS8s/qEOqOqFRmVrjALuVMInLzGZIQaEm0SNtmD5en+4CPdx2HqW3G9LN7H3n2tRU7gkjrJii
D3ZxhY/kTZeVSSUNKWyQIc3CNHyihX9uDFQnRaI+kMOe4VkO7nldznKoI2P0uPUUIZBDjFwpLyev
MIwqMyj4GtszBqRqrQ69DQklmkPygRqkLaP0KZnp5Y8xYJo0TGXONFGwXcUNZpUYB1JtFZ9JrJkV
RiG3OyzWxAziEFPF2046K/GjWpvDs7zB6SJPe3CThfQDI9zgEqJlhoGKR7rZ3a1JSPkjbPjHX7jZ
AiGkHlGZJmuUwca+0zXHA12E2CsJ4a4hhDCDKYmpYsxEl7ZMq0OlHpqlHmTg38riOqdQdlBk7TKB
HWnd1mm4TZ/KaoNlwjj+TKv7WlEqTHpdxRNA2MfJGcgoOV6tVHIPM9GYANOkah1ajV3UTUjzV1L8
UR9UMyEKW4CNBz0vYZTN4NBXqsLQGqpDIF0CrsTQmqpFSEVzpmkzjQ5kGh60alXcRAcqSVboqS6u
ZwqzZ2Q6Ui2TzG7mY9w+47Qrj5rudS+pmCUoJc1EYn8985hyrUNPJmJ2xyCTI2ZAsIaEzVnxQxNF
PaNUNvbRlVVnCuUzcVGyy4WJ5HNempLMBkgsShwUtwml1pMh2CzReGyOYHayx7Im86RwLgTXGNJi
kswOu41M4FJDDHaN1ZIaw9wcGMw+3l1lUAUxj29TqdU69VCdrnwWRoRMM2rT7UajTvIwG1tqqE1v
NTJBqolE25JUNhOoKj5Brqmy3oSSqUFVdKGRWivpt3YILAz8nyhtnDZ7kIGZ4UBEy3dDNpKlnksH
w6nE+cIKRmT8Y8dg7oFo4r25nDqY2+MtL4V9gnYgE1hVxKXc0zUl/ALPiZ/QVEUjFY6GJgwaAAoT
PxEcM0g9uGoKdtLF+hB2sHNGBRNASW9XQcnP/5xxDOenfxo0sat8WIBqUoWcaJ9/iiwvipM8zA7p
MBJgSZ1GoOZTQZMytFJb/iKOTxlKBGGOLFBDzwDuIayq8ZISVhF6OGw5g/UOdmpPRma7RWpnF3xK
GruGlEBmWYY0g94WqzenOzJUpnhdfKWeH28kPYF7ePowIlhQmsGcSkIkHTe3IEgow15r06u457sy
C0rBOsaZxOiYVxnGaSYZUvVmDXNiAITCz5mXa4g3NOnJUJvBPGrWajEadDnsixbN+myHJmWCQ2Vy
MVMQm4kdthlYZeJETLAEMvNWHfcZ222CXaEkeYx67QRNhtaWyqNB9klaEndxrZBgD2GaCSpNI3xL
0YipnIptZSofh1TkQ5Oi8i+Q3wEP9WWfwc88VLnisb5qkfk95cP4l3gLnhFc/oI/FcH1E8lMW+Ow
xLBvMA5iVMZ8HJYQqmFeZWMhemSedadhfmAWG5kfiOYh+uB+TGV/5X8SaRSOXSh6mQCsa3EP9Zfz
jyNmDQVyajOzyShCxksyjOnTbURI4rPJnIsMaiks+f+eethX7nCLmppMs2FiJrxeyGRSsxyoxz8H
c68LdaompmLcmx090kOQlB6CpPUQJK2HoPtuJv/C+ldpB0ECO1D+99oBtxPC7wVIV83wr6tZjVr4
v6/698TA/31q4KKseAi7mPf54o0iz7fRmIWNGIPI+CiYivDv/uU0x2uSXRNTqQzZquGwv1fxNmFD
BZVz9pVeNxysERTJ3OanDIfXR4M9ZLA3SXJGYbUwraSseJMy2zM0BhJHMy/6YxlUqO+eiln1u52D
K97tDIZHaqW1wvvU3I9aQjTsErirxitlu9KmK225Lhgu+z9jHxDS/m/VGt7T40q1YcwN/FfUy/XW
NPwbawX7/AaLXXSvHmIN8ouS9agkObQOcKjh5U+trjiHAC9PTMlx6O3qoVnsdI47nsA+v5qoLVXD
PB8OyEMxzj4im/uBeQsD94Ml06GxpHE64CbZ5Ncg/leDOUtrNJCstvRMZguEpwjS6W3s6zXE30aC
9m6liPAShxSRwGVKUAk3v8XJyt83JPF7xSoQ/zKRcPTQcKlXhAgqKkZUqaKi7/1AsiW6OyTLJF52
IShZk8q9TIG1D/KVtKDZomGfms49GD2bsT2Z1s6u8abJUrS6Ccybg/QVnzT2HFOKxWiXMQ9Vl5lY
g5Lx5x5SuVc1VXznFt00k8rPUlT8RCpgrngoe8UPsKCcymw/aFLYPSrhb2kgngAWKYVdjRH7gRn3
dVqrNsVgNDhyKBg2Z/Tcjh/1E9GpxspvjJb/wiw9GdjnsJZDJr1Ow+zfagSbSZIE5VtBFMUkZgep
Sh4URWUm/J4OqNPCnrGo+lfiQjVpqYiGeRg++satjoqo1C6tO7uk7uCUEbtbXA4Kzh9pdCnMQ/l1
JitzMVmyiJ4nEMllhMSoNzMXs86aw1wdFqPMaEixOXrbLb0Vsj4Wq6NPgiXNMUlr0/ch7Ilgtj6o
kzyilCsVvRV9SJ4+RMBMIxPd9WEeisSW3qd3bwa25xCtmghLhrfdkarr2ZPhH8J8NZV/SteR3sqV
S75ZHewGPvNdznzXcXQaPbPVR3pait2uYTf6CWROlQ2OjNQEEsrBsTEDIzXK3sreweWfFUHcx6Qk
QhLUWxEmIx8HDIzRKHoH8mTwWzj6ic6kwF9l7J+XjP/zknmTf14s4o1wGaLwkvmUf6tdTsPk5DhV
IDLg5QU494s3S+ldnkcG/zPcZCivTFZHkLd2OaUXUNcFBEvqy1LXhhJqI14yQJj/66F83lCTOuz/
PObF8mdo6pdzqawRL1Je7fJyvNhyGpD/K3TBcGxYzrU+e631///+/9////v/f///77/yn6zcy/dq
W0vmRz4HkKR+OKeBjIwOxra1yn/vi37PbG2ox4xfDvR7x0q/10G/e8mGwO9ykl5e8AoZeBrKcgHj
6L0RfR1ZU/iN+csoW0yGpfqyuTz93g+JfPVkr8L32c9192LGwHfg+/4PJ9RmRsoN8F3L5veRFcF3
R/eFvsx4twfKy36+DozI3J+6JTcK5grwIsDzBHgx4PkCXObP4UvepnH+ezHQM1LsRkO2dYY4vkQC
958pjh9B/I0IL0F4V4RfQLiqApaVzRTHSxH9fITLZonjZYj+DYT7zhLHZai+kxDsN0sc90X0ZoT7
zxLH/RD9Uu8KPGCWOO6P6P9CfLrNEscDEP3ftSpw+SxxvBui/w3xCZsljssRfSBqx4hZ4ngYok/H
9AhPQXg0wqcjXI3wnQhPQrgX0ls2wu1I/rxZ4nguoh+E9JOH9YnoCxD+PpJnNcIfQPIUInwVwjch
fAfiH4Ds/yTCuyF8DuIjR/g6JI9fnjgehuh7Iv7+eeJ4BKL/BvEJyBPHfWeL46USuO9ccfyIBB6N
5OmA7TlPHPebLY6XSeB+c8XxEglcjeQ5heSU54nj/rPFcdkcCfq54vgFCTwJyZOF2IfliePJiP5R
hEfkieMZiN4f6SE6TxyXzxbH/eeI47J54rgVlRuDyNV54nguor/C8AK8SIAnQxk7BfgmoL8wn8Pr
AM7/5SH6Rt4V/AsFuBz4bxLgPP98hM9EfJYI8DzACxB+ANVrtQDPB7wE4cuxfmaJ42USeMQccfwC
4r8f93eEL8D9F/Efh/ioJfAkCTxZAs+QwLvNFsfDJHC/OeJ4gATeba44XiaB+84Tx/OR/NdwPIbw
97DfQPYfj/qLL8L9cD9C+DIcp0ngEXPF8UIJPPfFiv6C8WzE/yj2G3PF8VxEvwT727ni+AVEfwmV
u2muOF6K6N9FeNFccbwM0V/BepstjpfNEcd3zhXHZYjPauznJXDZXHG8WAIPQHzqYjuZI44HzBXH
SyVwNeL/HhJzpwReiuwE40mIvjfCkxF+BtUrA+GrsB4QfgvJeQThX+BxCunBSBI/H0yWwHMl8DCE
90JxWjTC30T1uoD0gHE1oh+E+EfPE8eTEH17VG4Gwm/geR/CB6Ny8xC+HdHnIzwU278EXoDqReGI
/nkkf8A8cTxZAl+N+HRB7bgJ4QaE70T4FCRP3jxxPADJj/ELiE8a9icI/wmV64f4+3pVjNf+Apwf
37shfB3iE4ZwXQUsK3xbHFcj+kW4vyA8A/HPRvgviM8mhP+O8NVIPxT+tjh9EeLzJCq3G+KD8Z2I
vgXCixF+EPdrFKdV7JkQ+0T4SuzHEF4f0Zch/EGEy5CczRDsi/DmCPdDuD/C/XF/x/M4hHdG9GEI
VyI8AuGBCI9GeBDC1Qjvh/AkhF9FdpKM8IGIPgPhQxBuRfhQhGcj/AmE5yFchfSQj8cF1F5LEJ6G
+BQi/FmEb0L4cwgvQvhchO9E+AsIL0b4YoQfQfgShJcgvADhBahfrEC4fz6HM7tqK/C6EMKfQO3S
DeEf4fEL4QiWhSEchw8RCE/H4xTC+yJcjXAEy5IQPgfbD8J9EH0GwsMRIyvCG+L1HIQ3QXguwpsj
PA/hG5Ai8hE+BtEvQXhPhBcgvA6SfzXCLyC8EOED8ToPbi8cZyK8CPs9hNdF/IsRvhLxP4JwPcJL
EP4iwi8gfBr2h9geEF6G8JvYsBZU4L4I9kX4YjwOInwnwv0Rno/jT4SX4vEC4WWoXDnC6yE8DOGD
8LwG4cfw/BThDRAfNZYHr7cgfDeiT0Z4Q4RnIDwO2z/Co/G4jPAsPM9C+HBs/wifieM3hB9F8ixB
+AMIL0D4PMR/NcKLkZyFCN+D518IH4HoixDeCJW7E+F+CC9GeEe8TojwFTguRfhGHL8h/Aq2f4Tv
w/M4hL+BHejCCjwI6ccX4XXweizCF+N1foQ3RuwDEB6M6LshvCFeb0R4E8QnDOFnUX0jEN4U0Ucj
/CDC1Qj/GuFJCD+J/T/CL6FyMxAejtclEN4C8c9GuBmvDyD8NKLPQ3hLhOfjcvG6CsKL8TwF4a0Q
n9UIfxSv8yO8NaLfhPDaiL4I4X/g9QGEf4vjXoR7Y/vH7YLoSxDeBslzAeFtEV6K8HYIL0P4Z9j+
X6rA2yPYF+GHsf9H+BK8vo3wAjz/QvhDiH83hO/H8Q/CD+B5E8K3YPtHeADiH43wRngfCuEdEH0S
wrtg+0c4Xv/MQHhHxMeK8N+x/0f4MBz/ILwT4pOH8M8Qno/wl3D8g+VH9AUIn4r3uRDeF/t/hG/A
/h/hm7D/R/jDqNydCJ+M7R/hPtj+Ed4Q2z/Cj+B1QoRfwPN3hM/D8Q/CuyI5ZS9X4N0Q7ItwvN/t
h/BdiN4f4d0RHoDwuzj+QfhX2P8jPA7bP8ITUbtHIBzvO0cjvAeSR41wvO+chPBIxCcZ4S3wehTC
z2P/j/D62P4RPhbbP8LfxOs5CO+F5MxH+FU8r0R4R4QXIPwRxGc1wlti+0f4QWz/CH8K+3+E90H8
dyJcjvBihMfgdQ+EB2H7R7gNxz8IVyD+pQjfifAyhNux/19UgWfi/VyE/4D9P8LzcPyDcCOe/yJ8
JLZ/hJ/A9o/wIdj+EV6I43+Ev4zooxGuwfNfhEch+iSEL8T+H+Fe2P8jfAG2f4Sr8fwX4cdx/I/w
Mdj+ER5cAcvyEb4Dxz8I743jH4R/j/isRvjneD8I4b/i9ViE4/2dIoS3RvXdifA2eD0f4W9i+0e4
Hts/wjth/4/bC8f/CL+F6luG8BCEy16pwPG5F1+EhyJyP4TfxfEPwvfh+S/CwxCfbghvgOMfhIcj
+jCEv4H9P8LrYPtH+Dgc/yC8L+KfhPC62P4RHo/tH+E/ID5WhON95GyE98HxP8IfQ3zyED4drysi
fBO2f4T/hf0/wt/C8Q/CH0flFiI8A/t/hI/F6z8Ix+fldiL8QRz/IPx1vP6D8P5InhKEN8b2j/AI
RF+K8Bl4/ovwT7H/X4z0g/cTEV6C/T/Cp+P1H4RbsP0jvA6e/yJ8Ml4/R/gAJGYYwq/h+B/Lidd/
EL4C728ivBX2/wgPwPEPwjNw/IPwJ/D6D8LxQm02wiNRvXIR3hiv/yA8CtHnIzwR2z/CfbD9I/x9
hK9G+F7s/xF+ANs/rhf2/wi3Yv+P8Fzs/xF+BMf/CL+D6luC2wuvfyI8E/t/hD+C43+EP4MXvpdU
4E2x/SP8aRz/I3w89v8IH4DtH+FpOP5BuA+2f4Rn4fgH4WHY/hE+Asf/WB4c/yD8RWz/CNciPBnh
Fuz/Ef4cjn8Qfr4ClmUjvAjhuQgvw/EPwk/i9X+EL8f2j/A/cfyD8Hex/SM8GslTiPCt2P4RPgrb
P8LbYftH+FPY/yN8Fo5/EG7D6/8IfwDH/wiPRfKXIvw09v8Ij0P0sqUV+DAE+yJ8OML9EK5GuD/C
u+H1H4RfQvTdMH8c/yD8IWz/CG+N7R/h8Yh/NMIP4/gH4SPw+j/CFdj+sZzY/hF+Dts/wrOx/0d4
ApIzF+GPYvtH+FfY/hH+Al7/QfhabP8Iz8Xr/whPRPIUInwztn+sN0RfhPCO2P4RPhLRF2M94PgH
4Va8/o/wUYjPBYTH4fUfhCch+jKEP4lw2asV+GfY/yN8F45/EG7G/h/hw7D/R/jP2P8j/Bi2f4SP
RmKGIXwstn+Ej0H00Qjvie0f4UnY/hHeBcc/CC9G/DMQrsTxD8KP4/UfhM/A8T/CLyI8D+FrsP0j
PBL7f4S/je0f6w3Jvxrh+BxaIcIX4f1fhE/E6z8Ifx7v/2L+qNxijGP/j/Cm2P8j/A6O/xG+FfEv
RXgP7P8RrsH7v68h/eP5L8K3I3I/hHfG6z8ID8HrPwh/CvHphvCB2P4R/hbiE4ZwDeITgfBtCI9G
eE8c/yM8GdEnITwA+3+ED8LxP8J3YP+P8Gew/0e4FpWbi/AUhOch/Dre/0V4Ll7/RHgq4vN/7J0J
eFTV+f8nhGXYnAFRIy4MGHXAhYCoCbhMIOAdjHYqqBG3iIoRbRsh0YhoByZpMwypEVFTajVil0ht
G3FpRNRJEAjgMoDaiFYjVp2wGYJCQCX/837fM/e+mUEgCv76fx55WpPvmTv3837fc+7Z7s1MpShv
E+VVojwo9z9F+dly/0eUnyTXv6I8R/b/ovxmwY2I8ttk+xflt4jjG0V5oyiPivLTZf8vyt8Vx7eK
8jxRbnvUKr9d9v+i/N/icKco/4Ps/0X5LNn/i/JbxXncorzd33mJ8qni+HRRPl/u/4jy4XL/R5TP
ke1flH8szp8jymfL/R9Rfps4Pk+UXyX7f1FeJft/Uf4P2f+L8n6y/xflXwluuSg/X7Z/Uf6kXP+K
cvmcZ5Uo/4U4f7Uoz5XzH1H+K3F8WJSvE+X1Mk65/hXllXL+I8pfl/ufojxfnD8qyu+Q619R/k/Z
/8vjxXlsfxTzXtn/i/Jp4nCnKH9Ytn9RfpRs/6J8uziPW5TfK9e/orxAHJ8uynvK9i/Kd8j9H1F+
j1z/ivJCcf4cUb5atn9RfoPs/0V5qez/RfmXsv8X5UWC6xfld4vyUlHeT/b/onytOL5ClE+X7V+U
Pyvbvyh3yOcfRPkMcf4aUX6rnP/IPIvj60V5D9n+RflMcXyDKL9Ptn9RPkKuf0X5tbL9y3Ylzt8q
yl+Q85/HrPILZPuX5XL+L8rvk/MfUX68bP+i/J9y/i/Kz5DtX5TfJeJJF+Wpcv4vyjvJ/l+U+4Vd
nyifJcpz5Pll+xflLfL5H1E+W5wnX5R/I9u/KA+I4/2ifIZc/8r8yPYvyt+V839RXifOXynKd8r2
L8rvlvN/Uf6GnP+I8vly/iPKSwS3XuZNlEdE+W9EeYMo3yTbvyiXfxcTFeUrZfsX5btl/y/Kfyu4
tsdFPyaK7aL8KLn/KcpDcv9flAfFeVyifI4od4vyP8j2L8rnyvYvys+U/b8of0W2f1H+vuD6RPlb
cv9TlK+S7V+U/1ecJ0+UPynnPzJ+cXyRKPfI+7+i/K+y/YvyR+X6V5RXy/mPKL9fcCtFebkorxLl
Ltn+RfmJcv4jyv8l9z9FuV3O/0V5WPb/ovwBEU+DKJ8nyhtF+YOiPCrK54vyZtlO5P6/KO8u+/9K
q/whUWwX5efI/l+UrxbHp4jyh0W5S5RvEXlwy/PI+b8onyr3P0X5QPn8gyh/T85/RPnvRTw+Ub5A
lOeI8g/k+leUT5fzH1H+B3GefFF+o+z/Rfmj4ni/KH9Otn9R/ojs/0X5H2X7F+XHyef/RXlQ9v/y
PCKealHeR7Z/Uf6pOD4synfJ/R9RvkPu/4vyc+X8X5Qbcv9TlOfK/R9R/rXs/0V5qez/RflQef/r
Cat8oSi2i/K7xPFOUX6HnP+L8iFy/iPKb5btX5QXy/5flD8o278of0jOf0T5JNn+RXmanP+L8mTZ
/4ty+XkpuaL8SVGeJ8rvlfN/Uf6GbP+iPCT7f1H+D9n+RfmfBbdclLfK9i/Ky+T+pygvkve/RPlf
xPmrRXm23P8U5T3l/EeU3y3bvyhfItu/KP9CcBtE+S5R3ijK/yrKo6K8SpQ3i/KnRHmrKPfJ/n+h
6G/l8/+ifJE43CnKi+T8X5T/TRzvEuWT5PMPovxb+fybKK+V8x9R/ndxfo8oL5D3f0X5Frn/I8r/
INu/KP+HOH+uKP+nKM8T5dWiPF+UPyPKi0R5F7n/I8or5f6PKF8szlMuyp8V5RWi/GjZ/kX5BfL+
lyh/TpynWpSHZPsX5TfI9i/Kz5LzH1kvsv2L8ucFt0GUvyzn/6I8RT7/IMqPlfufovx34vhWUS4/
b8H2pFVeJ9e/ovwjOf8X5W+J06SI8v/K+7+ifLTs/0X5C+I8aaL8X6I8XZQ/Juf/ovw22f+L8smy
/xfle2T7F+U1VrEtV5S/KMrzRLlH9v+i3C2f/xTlS8R5/KL8JPn8jyifIOf/ovwyOY7/9O+nfz/9
++nfT/9++vfTv5/+/fTvp38//fv//p8R2GI3Ql2+eqyzzSgJF3SJnnaqWvydMlj9J3N5snr5Nbt8
PMvWdva6xzvb2k5+W/3XMcCjfiONJ16aGtvUv5NXk6YVRVMEuo40rZyawtBLSNPKoqkaejFp+uiX
pkroRaTpo5mayqEXkqZFSZMfegFpWp405UPPI00fLdKUCz2HNH20R5MPejZp+uimJg/0DNL0kR1N
adDTSNNHbzS5oKeSpo+4aHJCTyZNHz3RZIOeRJo+8qmpeS/py0g74R96POk+8A89mnRf+IceSfpI
+IceTrof/EMPIX0U/EMPIn00/EP3J30M/EP3JZ0C/9A9SB8L/9CdSPeHf+g9qqrzjoN/6BbSx8M/
9CbSJ8A/9EbSJ8I/9AbSA+D/W9LrSLvgH3o16YHwD11HehD8Qy8hfRL8Qy8mnQr/0ItInwz/0AtJ
nwL/0AtInwr/0PNIu+Efeg7pwfAPPZv0EPiHnkH6NPiHnkb6dPiHnkr6DPiHnkz6TPiHnkR6KPx/
g/onnQb/0ONJD4N/6NGkh8M/9EjSZ8E/9HDSI+Afegjps+EfehDpc+Afuj/pc+Efui/pdPiH7kE6
A/6hO5EeCf/Qe/6o9Cj4h24hfR78Q28ifT78Q28kfQH8Q28gfSH8f436J+2Bf+jVpDPhH7qO9Gj4
h15Cegz8Qy8mnQX/0ItIj4V/6IWkx8E/9ALSF8E/9DzSBvxDzyHthX/o2aTHwz/0DNIXwz/0NNLZ
8A89lfQl8A89mfSl8A89ifTP4H8P6p+0D/6hx5P+OfxDjyZ9GfxDjyQ9Af6hh5OeCP/QQ0hfDv/Q
g0hfAf/Q/UlfCf/QfUnnwD90D9JXwT90J9KT4B96z6NKXw3/0C2kr4F/6E2kr4V/6I2kr4N/6A2k
r4f/3ah/0rnwD72a9A3wD11HejL8Qy8hfSP8Qy8mfRP8Qy8ifTP8Qy8kPQX+oReQvgX+oeeRzoN/
6Dmkb4V/6Nmkp8I/9AzSt8E/9DTSt8M/9FTSv4B/6Mmkfwn/0JNI/wr+W1H/pPPhH3o86TvgH3o0
6WnwDz2S9HT4hx5OugD+oYeQLoR/6EGk74R/6P6k74J/6L6ki+Afugfpu+EfuhPpGfAPvecPSt8D
/9AtpGfCP/Qm0vfCP/RG0vfBP/QG0r+G/12of9J++IdeTXoW/EPXkZ4N/9BLSAfgH3ox6WL4h15E
ugT+oReS/g38Qy8g/Vv4h55HuhT+oeeQDsI/9GzSc+AfegbpEPxDTyM9F/6hp5Iug3/oyaR/B//Q
k0jfD/87Uf+ky+EfejzpB+AfejTpefAPPZL0g/APPZz0fPiHHkL6IfiHHkT6YfiH7k/6EfiH7ku6
Av6he5D+PfxDdyK9AP6h9yxQ+g/wD91C+lH4h95E+o/wD72R9GPwD72B9OPw/xXqn3Ql/EOvJv0E
/EPXkV4I/9BLSD8J/9CLSf8J/qEXkf4z/EMvJP0X+IdeQPqv8A89j3QV/EPPIf0U/EPPJr0I/qFn
kP4b/ENPI/00/ENPJf13+IeeTPof8A89ifQ/4f9L1D/paviHHk/6GfiHHk16MfxDjyT9LPxDDyf9
HPxDDyH9PPxDDyL9AvxD9yf9L/iH7ku6Bv6he5B+Ef6hO5FeAv/Qe36v9EvwD91Cein8Q28i/TL8
Q28k/Qr8Q28g/Sr870D9kw7DP/Rq0rXwD11Hug7+oZeQXgb/0ItJvwb/0ItIL4d/6IWkV8A/9ALS
K+Efeh7peviHnkN6FfxDzya9Gv6hZ5BeA//Q00i/Dv/QU0m/Af/Qk0m/Cf/Qk0i/Bf8tqH/SEfiH
Hk96LfxDjya9Dv6hR5JeD//Qw0m/Df/QQ0i/A//Qg0i/C//Q/Un/G/6h+5JugH/oHqTfg3/oTqQ3
wD/0ngql34d/6BbSH8A/9CbS/4F/6I2kP4R/6A2kP4L/7ah/0o3wD72a9MfwD11HeiP8Qy8h/Qn8
Qy8m/V/4h15E+lP4h15I+jP4h15A+nP4h55HOgr/0HNIN8E/9GzSm+AfegbpzfAPPY30FviHnkp6
K/xDTya9Df6hJ5H+Av6bUf+km+Efejzp7fAPPZp0C/xDjyS9A/6hh5P+Ev6hh5D+Cv6hB5HeCf/Q
/Unvgn/ovqRb4R+6B+nd8A/difQe+Ife84jSX8M/dAvpb+AfehPpb+EfeiPpvfAPvYF0G/x/gfon
TX+y39QIvZp0EukIdB1penS4KQy9hDQ9GtNUDb2YNH2kQFMl9CLSdAu/qRx6IWn66JEmP/QC0vSR
8k350PNI20nnQs8hTY/gNfmgZ5Omj4pq8kDPIE0fidKUBj2NNH0kWJMLeirp3qSd0JNJH0HaBj2J
NH3kRlPzNtQ/aSf8Q48n3Qf+oUeT7gv/0CNJHwn/0MNJ94N/6CGkj4J/6EGkj4Z/6P6kj4F/6L6k
U+AfugfpY+EfuhPp/vAPvedhpY+Df+gW0sfDP/Qm0ifAP/RG0ifCP/QG0gPgfyvqn7QL/qFXkx4I
/9B1pAfBP/QS0ifBP/Ri0qnwD72I9MnwD72Q9CnwD72A9KnwDz2PtBv+oeeQHgz/0LNJD4F/6Bmk
T4N/6GmkT4d/6Kmkz4B/6Mmkz4R/6Emkh8L/FtQ/6TT4hx5Pehj8Q48mPRz+oUeSPgv+oYeTHgH/
0ENInw3/0INInwP/0P1Jnwv/0H1Jp8M/dA/SGfAP3Yn0SPiH3vOQ0qPgH7qF9HnwD72J9PnwD72R
9AXwD72B9IXwvxn1T9oD/9CrSWfCP3Qd6dHwD72E9Bj4h15MOgv+oReRHgv/0AtJj4N/6AWkL4J/
6HmkDfiHnkPaC//Qs0mPh3/oGaQvhn/oaaSz4R96KulL4B96MulL4R96Eumfwf8m1D9pH/xDjyf9
c/iHHk36MviHHkl6AvxDDyc9Ef6hh5C+HP6hB5G+Av6h+5O+Ev6h+5LOgX/oHqSvgn/oTqQnwT/0
nvlKXw3/0C2kr4F/6E2kr4V/6I2kr4N/6A2kr4f/JtQ/6Vz4h15N+gb4h64jPRn+oZeQvhH+oReT
vgn+oReRvhn+oReSngL/0AtI3wL/0PNI58E/9BzSt8I/9GzSU+Efegbp2+Afehrp2+EfeirpX8A/
9GTSv4R/6EmkfwX/UdQ/6Xz4hx5P+g74hx5Nehr8Q48kPR3+oYeTLoB/6CGkC+EfehDpO+Efuj/p
u+Afui/pIviH7kH6bviH7kR6BvxD73lQ6XvgH7qF9Ez4h95E+l74h95I+j74h95A+tfw/znqn7Qf
/qFXk54F/9B1pGfDP/QS0gH4h15Muhj+oReRLoF/6IWkfwP/0AtI/xb+oeeRLoV/6Dmkg/APPZv0
HPiHnkE6BP/Q00jPhX/oqaTL4B96MunfwT/0JNL3w/9nqH/S5fAPPZ70A/APPZr0PPiHHkn6QfiH
Hk56PvxDDyH9EPxDDyL9MPxD9yf9CPxD9yVdAf/QPUj/Hv6hO5FeAP/Qe+Yp/Qf4h24h/Sj8Q28i
/Uf4h95I+jH4h95A+nH4/xT1T7oS/qFXk34C/qHrSC+Ef+glpJ+Ef+jFpP8E/9CLSP8Z/qEXkv4L
/EMvIP1X+IeeR7oK/qHnkH4K/qFnk14E/9AzSP8N/qGnkX4a/qGnkv47/ENPJv0P+IeeRPqf8P9f
1D/paviHHk/6GfiHHk16MfxDjyT9LPxDDyf9HPxDDyH9PPxDDyL9AvxD9yf9L/iH7ku6Bv6he5B+
Ef6hO5FeAv/Qex5Q+iX4h24hvRT+oTeRfhn+oTeSfgX+oTeQfhX+P0H9kw7DP/Rq0rXwD11Hug7+
oZeQXgb/0ItJvwb/0ItIL4d/6IWkV8A/9ALSK+Efeh7peviHnkN6FfxDzya9Gv6hZ5BeA//Q00i/
Dv/QU0m/Af/Qk0m/Cf/Qk0i/Bf8bUf+kI/APPZ70WviHHk16HfxDjyS9Hv6hh5N+G/6hh5B+B/6h
B5F+F/6h+5P+N/xD9yXdAP/QPUi/B//QnUhvgH/oPeVKvw//0C2kP4B/6E2k/wP/0BtJfwj/0BtI
fwT/H6P+STfCP/Rq0h/DP3Qd6Y3wD72E9CfwD72Y9H/hH3oR6U/hH3oh6c/gH3oB6c/hH3oe6Sj8
Q88h3QT/0LNJb4J/6BmkN8M/9DTSW+AfeirprfAPPZn0NviHnkT6C/hvRP2TboZ/6PGkt8M/9GjS
LfAPPZL0DviHHk76S/iHHkL6K/iHHkR6J/xD9ye9C/6h+5JuhX/oHqR3wz90J9J74B96z/1Kfw3/
0C2kv4F/6E2kv4V/6I2k98I/9AbSbfD/EeqfNH0UYVMj9GrSSaQj0HWk6aNtm8LQS0jTR9M3VUMv
Jk0f1d1UCb2IdBfS5dALSdNXJDT5oReQpo8QbcqHnkeavhqrKRd6DunupH3Qs0nTn4g3eaBnkKY/
MWlKg55Gmr4iockFPZU0fRRakxN6Mmn6iPcmG/Qk0g7SzR+i/kk74R96POk+8A89mnRf+IceSfpI
+IceTrof/EMPIX0U/EMPIn00/EP3J30M/EP3JZ0C/9A9SB8L/9CdSPeHf+g9v1P6OPiHbiF9PPxD
byJ9AvxDbyR9IvxDbyA9AP7/g/on7YJ/6NWkB8I/dB3pQfAPvYT0SfAPvZh0KvxDLyJ9MvxDLyR9
CvxDLyB9KvxDzyPthn/oOaQHwz/0bNJD4B96BunT4B96GunT4R96Kukz4B96Mukz4R96Eumh8P8B
6p90GvxDjyc9DP6hR5MeDv/QI0mfBf/Qw0mPgH/oIaTPhn/oQaTPgX/o/qTPhX/ovqTT4R+6B+kM
+IfuRHok/EPvKVN6FPxDt5A+D/6hN5E+H/6hN5K+AP6hN5C+EP7fR/2T9sA/9GrSmfAPXUd6NPxD
LyE9Bv6hF5POgn/oRaTHwj/0QtLj4B96AemL4B96HmkD/qHnkPbCP/Rs0uPhH3oG6YvhH3oa6Wz4
h55K+hL4h55M+lL4h55E+mfwvwH1T9oH/9DjSf8c/qFHk74M/qFHkp4A/9DDSU+Ef+ghpC+Hf+hB
pK+Af+j+pK+Ef+i+pHPgH7oH6avgH7oT6UnwD71nrtJXwz90C+lr4B96E+lr4R96I+nr4B96A+nr
4f891D/pXPiHXk36BviHriM9Gf6hl5C+Ef6hF5O+Cf6hF5G+Gf6hF5KeAv/QC0jfAv/Q80jnwT/0
HNK3wj/0bNJT4R96Bunb4B96Gunb4R96KulfwD/0ZNK/hH/oSaR/Bf8N8HNXZ9uUclUPRfRzglF2
Qr46wgh+FKXxxQid/546wCg7aghKP7y66Vg1jZriGEC3vG22y43gp0Zgi9MoO/98dUD0mw/xnj/j
PWfjPWVHfRFSr2xUs4/g2G+MwGvOa5e1e3/0XyqOa5c5BmTZbMRvDTG/ms91FfMXhTT/9x8LPh3/
uj7ez8cP5uNnxI6/VR6v4pxFL5R1oR+XG4NbYaD1iDuPMkJddt7JjxF2v7atcQriUaHSvzPF+zPx
/rNH8vv30vtr9yYbwWajNnqhkbTCWLu3IEWd7Bl9sl58Mn5//Pn852+f09lmK5xmBM6/X70BCcmc
OKGgl3LyL/VSdPLetrbsspNfuo2oJyylH6Euy9Ur2YM/MWq/TjYCm5OMjIbpLsRrBMJJRrDLn9Xr
mW39XlOHLlC/qtenfRql5/+uzrzm2hVd7lVlSTtUxsnPHXTKwIW2wp5NJ7YhVXSeUJenCjn+Jgqp
LXItnh+8PPPKzCsyL1cRGrO2tB6hDgx+bYQC9N13RjAr1W0EXqK5dOeZF4UedFJh4CWa2yY7Hg/7
X8IXnDkeqnXVOl6oNQLNSbvWGQPrjOCD+erIKSsDRfgGvdCzW5JtqND736UKDbjoPCuLUxv1F2gZ
wVqjtulCI1hn1G4aMWtjWzebzbu0Df8ctuyBjaVzUxvUsXPmpv77CPrq09SP1I8pobmp79DP4NzU
/6ifSq5VP5R6Dzbm4/xGsDg1Sj9DAbfGhveDZVgNw/7FsFc17HkNe5lhzzDsRQ0La1g9YCFaABll
mUd4Xw2W8j/vri+MsqweRzDvQqO2NdlIihhlnf3q/x5jV4NRdnvSEUbZ0tQKOkXZc/BslM1HOMNW
RbfvUdkry/qFOv3c1Crg5i5rVKYczmK8x9GneFmkM/BpqL+3jNovlL83jdptI2Z9xv4+NkJ/4+DG
HsEhDdlfSFldjqDfPaVLl6V3VVmZn/oIZWX+sgu7Ulbmpz6ErMxfdr7SSj5AWZm/LKMr8Z9b5unK
YRpdrawE64mbtNoIRnCF1e5R1DpFmWeUjfAgaQeXqsHbjdqPk1WRV2UrGc7L5idTmJTFIs7aS7tF
1kp11qq7cdaKdNYquyG8dGSN0nUhJ2/ErM8Tsna8t+ainG23Fn/62DjvrmicidvqTtBpO57T9twy
e3ek7S5Om6M7p61Qp613d6TtDk5b9+4UwNJlzu4cZ0r3g04bvayi+bcRfOOgUphdVsAp5PRxCoKt
fOo2dfBK47aVJxiDl3PyyubDCCU2hxM7ubWt7eKyzndSXvN0XiM9Oa85Oq/hnojfg0b5LCdw3BDj
1a73Zl4fOebLLoaKUttRwd0WPo2T13WIUdvYWZ0w2d2bOpLi5DR8xx9dvUbs6jXTEneS1tN0qoLv
Gklv7icXwdWJLWq3alGdjVBxTwLrDkJ1AR7uEC7kDuEi3SGcrzuEsdwhZHCHkHlE7J0jZn2s+xRl
BYFTB+HDTx5caJxRA0xZ5xcQxmCqzsuoNpA4lWuX7gI8nPNtO0VjTtNJjzo46S6d9AYHsmMcTGNO
977S94OL8gfU3tvZu2tbu7rI0A05PdaQPX3QkAdwQ76oDzfkE3RDHtsHDflYbsiZfbghG304Rl+f
DjXkbR1qyLe3a8iwrxtyUiuMiEZMJiixNk7oH7+iRqwT6tQJrTqaE2rTCa04GsH7Diah47w1Y0+7
/YjUSTdMb9c7dOHe4SKd1HGxpNKXLKuktvVGUrulcFK/7c1J7ZKCpO7ujaQmpXBS7SkcpzPlMPYO
7ZOKFJi9QxfuHS6SiSUjlNjG3khs1pcisc29OeCaEzmxdAwltupEGMg5mMRO9NbckMv/9pXYy3Vi
J8YS63QhsR9xYo9xcWL/oxN7lAuJfY8T28fFiU1xcZwu14+WWKQgPrGXy8SSEUpsmBO7uUUkNqIT
m+LmxIZ1Yu1uGMht1+9ONl7t+faehzo9f9+fDYQ5fLIVZle+6G/UHfDkWAecP5g74KLBsQ64uve+
OmCZoK6okj03tuuHO5Yfsx8mPvWmwTrqRmm6Zs7VVE9c1Rv98l97Q/2zN/fLf+7N/fLfe6NffqI3
+uWnevNErbo398M1vb+7H45l/znOpMp+aW/uiKu4Fm7eLmqhQtdC9VCuhVJdC5VDOzDpGWu8+sQR
myrpf2JAq93Tidv3OK6YpLHcdtQ7enmN0Pw1xFSulqUMA3sNMdEChn3HEBk7Y4vqgjL7G6+e8twj
ketG39O9/Sha1jlsTQGT+sdBCUbQqnMZSjB0lEobs7BgoAcAZ96tZt20WjDOJzknROuFmV2LVxXm
DltlhCamugMtScb59OygWk4Ur4qtJNRCoiRScN53jfCx2AbX8kU0H9zQs816lRH8L68yRsaWMKIK
2g1xzRkqBWd4X755YM+r6kcfvdi7ays1zjOsxtmFr4ozdR7OiMsDRjWVB89IzgMNLpSHtJFyDeD1
Lj3p8cLA4JarzvXu2mLVQ2eu2fH65F6cWTWnej0MlV/AzalGD0P+CzrQnEbpK21UgpnzNG9UnBlM
0ZUZ/1g2Q/NowuaPbY9NcNAyPnah/9tIequDEy6zI4S7+I7wPHNKNJ/jUFdiPl+Bn2wVUyG/vgJd
F3PK8vUV6Ly43VWwJDZxN3Ztip+4t5yAxtDRJoAZuspaaba+FLozuSi7fda2tqssHrRazjzIxU5W
LFMmlnCEbfAxlnCErfcd9nUWcqrWWUDRcoDrY8IWUR95uj48l+n1gK6PtMsOKiuyOX3P5QwuwfbL
mbLOr5q9ezbG1jUcj2rr+Dl3DcVrnE+DS+GpRskqfACO8XJsQldwghEa7aQ+Jdfh7OQYnJXq23yC
9fKcvv6WpNKJqT46IscIZqfmUn48GDlUsUrSmZutNZNP56hqAufIo3NUMaF9z701IUEXfa+Witmi
ajLOy7nJ0ISNePT1Jh2Y7Gz9YZc53MVf5meKyxzhqLS5uVl90ySaVbpOWe5VnDK3TpnvqvaXeWyi
2O4yNyeKZT8foCRNJEapeukzwAhsbDR2beDfMahcFssZJoIqZ/WTOGc0FyNgzaR2wNpWdbaoOtsI
uxH4rPF7X9WEAe5axhEGuGsP+1WNFKqrGiiVfien/96oSL9Lpz/tek6/U6ffdX0HwuvlfWX5pVte
o/+J4dic5/TWqekVlxpiUmoqcjk1xCR2aW57dsIZW3oD+p2o22MoNE+cTtlv7UX2jWBL9J6IyIBd
ZyByA2eADsM+xw0HN0Zu7WindtOBx8gz0aFNpA5t7noedorX+/Fz/nqME9yhnWCUrMMncRUcaYQy
Y91YEndjR87p7t+eVJptdl4TufNq7GV1Xnd8hs7rJqzoenEi7DfqFZ1OROtkOfM5mE5KT3p8etKT
f5PuDfWkJ/em79U7fc8EI/z9JpjjKV6fdxMnmOL9IQmuFwmm57tiCW7QCQ7ncT7qdYKr837MfIC2
33zwVLd4ffpIzgdNhX9IPqpFPuj5rlg+wjof7qmcj2qdj5SpHciH1VGfZ/++AxiAgc8bjcF7YkMW
RgPat0enEfV+Ivfpddzlt+l9eh23/zaKO8AXiqEGpN0K36Qiy7arAeljNSC9p86hftfXR43ueVpv
5/NU6b43evuP7B+Bt/ePGJR/v/a/Ufgv1/5bf8Vx+7X/6K86NGZ0YKQgEo0UuXfwSEEkTBLuOKQj
BU6nTOeZI8XPVwvfRdp3xTT2nad9l077rig2iSi+3xiOUUiN4WCo0HxcHy82irhydVyR6RyXLzaC
Te9AfXTyvnzF5fzPa81PEV9satMprlaIR7WSXsi1QjziugsPz9QmdleDtkfKHiwt5Iykc0b++pHI
iKEzUs2R4Rjs3uA9z+YfZIDnUYAZ3qXWvaHEpf5IHWEGbXDpvYtKHZqLQ3v9TbnDr0NLuUvv8OvQ
7HfFL6NEFeiefwv1/Ptsz6ofuG1db8x4b+/DTboXJWsN6iK4m3fZ2jrTuHHbWyONwfVckfOZq2K1
c6y5K0WsKTrW0pkcq13HWjTzQFOjkR29wikd1JbC9+o19116bLz3YK6tA1/h4pJC9OqSwqmV8+ae
cD5lhXBui3Vx97FzOgZdnNKHYzds3/Fbu2HEDT37pd4Nu2ct74b5bdgNc6kmnaZ+zy570vDLudrB
XluhgI/fl+M3R3pXbK1ccLQ3lJXKQ32mw9k5lQf7ozLn9Evd5+K4oac13Pf5QCQ12lPPB/2c1Aad
1Fy/rOOElVf7jaiONH4MYmbjT8YJer2KV60LAHTai+dmcP1rIuKIjrhhlt6L1xHXzzqYcSfPWNLl
0sbO9L99rVpv1ZdCXtylQDAs6gN8KRAMi/rAwUA7HWzvTWMpdpnLGEODHzqisv13RB29sMv00K0x
dHoM3WXoipvnHsDUnoO5vs2el8+6NLWKK3NenajMGl2ZFb/T0y1dmaW/a9f8llhb9psSMjzOupX5
Peda2MQ3p9+dePrdW2yWIBxloZwtvNUgLFRqC5H72UK5thC+/3DNvIiEMf4BPcbfr8f4B1B9ufPa
526fm7E8Juw5wJjQviJjw1IRZ2FVWD7xobNQOk8/8aGzUDQPMVU/uJ8GfN4BMhAXhW5OuRzFGBlF
fqxveJCjyI31DQ9+V4v+3iMWTqlGrFjrNjic514V4eTocJwPcTiGDoe+EeZAvcb32ptt36yBOeDe
LM9IVZeGn3N5BmmuLPV4c2TijuyR37EPmyaGmr+8I27feXQ2jIc5G2k6G+kPdywbHRtv0AAPNN4g
BBV7ClfiFy+LSnTrsKsf4bBTdNiVjxy+FQZfyfOTwaCnKDiuK98WcTl1XNEK/RSFjquhAldcQ1wn
vt/59EFffHzypanRHghoxVIRUGsPDsi3gAOiYyggz4JDuCCcz6dTIUQQQnbws6hHRtGooyj9A0cR
0VEU/aF9r7ifWUDLrT94RMG8YH8jCsJRLmo4kfeuExbqtYXwo/rGpLZQ/ShqNuWx//v5ZGUP6yKv
XStir9axex7j2Ct17GmPHVxzPNBomNgR8076/GQQ6AkCzuhpS0RUFTqqqsf1kwM6qorHD+OckWA0
TDdW8jBNMDw6WtmBVHR8KY67BLQ8+RXnI5/zcZzcX/frfEQX6fu4Oh8Niw7XnIVIlAzf05wMIqFz
eBptOrzoABXRsSknn3Vpag57H1Aj75nGOoi/63umsQ7i7/9TU06EQ7c12cI1cr/CF+sg/qE38WMd
xD8OV/URiarPXc3VRyRsC1ej+nzPHOYpp5uzcMUL8i6lzkLRM/oupc4CfQibiqly8WEZABdxQE4O
aPnz8r6dDqh+sb5vpwOqWfxdjft7zz5xStXpxRp6a3eEc44Mx67Doe8hwk00/chE87M/yuwTmB99
9tnY3RqY3Gvks5H6Ue/05/WdNJ0N9/OHc/aJtnig2SdCoHtUXIl3PCsqsUGHXfmCvj+lwy5/4fDN
Pvminp8MBt0r4rjeWyXiCuu4Gv6l7xPpuOr/hYuv6iAHko5dfHzypakVHJCxWN4A0gF5XtQ3gHRA
aS8e0tknTkf3YLrHZp91z8jbMDqKoiX6NoyOgj6I8cebfWKGsb/BBeHQTRVOZJvcYC7SFqpf0ndU
tIXKl1Cz9pcP1ezzZPP6Pi5u9pkdvCnVzdd5f5qCQu/zcveJyz1DusjVLtJe1vdftAvXy+0rIvZM
IlXEAZ+R6ti1jydsDnTtIx66Y8I1UfhPecdEe6h4Rd8x0R5KXzmYJn2nd+k/g55/0P/oboCqpDsT
HkO+Sw/3d8YN90Sk4T7yKg/3RMSe1qsHQ/4et63ocRPML9ZoYK6eX6xpD/yBG590esLkawydHrvd
a9C2bWsOYK9js1A+69JUF9ft7/8ubznpuq16Xd9y0nVb8fr/1CwU4dCdKLbw7jJ5J0pbaHxD34nS
FiJvHK5ZKJGo+oy3uPqIhB2kt1B9+ZHDPAtttiMLkb/Ju1KxizSi70rZ9UUa4YXN2v004I6Nfim6
OTVwFONlFFG7XtCt1bdxdBQNa7+rRX/vqSdOqWYHsdYd5nBeWiTv0ehwXOv1PRodjnP9jzL1BOZH
n3pW2a2x6O9hMfWs0dnIeVvf5NDZMN4+nFNPNMADDT8IgW5scCXurJI3NnTY4Xf0jQ0ddvU7h2/q
yVfy/GQw6FYDx3Wd3FUv1XG1vqtvNei4ou/iiouuPhxTTz750tRcDuiNv8q7Djqg3AZ910EH5Gs4
pFNPnI7uNCCE7NDtqe7s4LboaBlKjg6l4j19xyHWG73XPpQt+/hDopa7fvB4gvnBfm+kvcce0jiN
v5Eb7R4de2SDvj+gYw9vQL26PzhUE88B5tV9lDc01px3jrWZu56X2/Z5haeIK3yN3HR269B9H+h7
BDp0zwc224802+QH8Q9wuSMeup/A6e/2Z3k/QXuo+Y++n6A9VP3nIFrxLPpUBmPJ1qRnu71+Yto9
7UZctK5b6+irHVAtxUk4uP3QTlQa2ps/5KGdqERv/LADk4mObJb2o6yt583Suev5Mbni9c34OX89
Hm4zN8n145VHXxLckviEJZV+x0OW0W5We/mD3I9u7aYv0836Vkk3fZluPlxTJyJRfm1b9QR7s94M
2sJTp80HqOSOzXz5rEtTI93Qzh5fKG/QaO/p2/QNGu3dve1/auaLcOgGDVv4QG4h12sL+V/oGzTa
Qu4Xh6v6iIS/Q2rm6iMStluaeeHScphnvpWchXcr5a0enQV3i77Vo7OQ0oKYfDsOxziMK4Tu8nBA
Y2VAFTqgoh36Lo8OKG/HdzXu7z0JxinVPCXW0PM5nBcelzdZdDjVX+qbLDqcyi9/lEkwMD/6JDhH
dHlVz4tJcJ7ORvQrfdtFZ6Phq8M5CUZbPNCoiBDoVgtX4vY/ylstOmzfLn2rRYft2XX4JsF8Uc9P
BoNufnBcVz0nb37ouEpb9c0PHVdRKy6+nIMcSDp28fHJl6Y6OaD6R+XNDx1Q825980MH1Lj7kE6C
cTq64dE1tv86WkZhj/VJX+t7HvqPa1O+bt9B7mei0oKJyg8dXzBv2d/4gojohgWMRGfKvexm/Wk+
ud/oexXahe8bVG7Nt4dqJvz9HwCo72pd52G5A96gY2/8Vt+w0LFHvm1fA4dxKoy/HTrQRY946OYG
5/+b38ubG7FPU2rTNze0h/S2g5kKz8NU+OJdXecHT/vPcYlD8K11D1pT4XmJU2Gi4g/EbUn8B+Jt
TM9Xmj4YorJrwgdDLInttwpaR3ZIe3nnzOenQOmPL9VPqvP5qRVd8bEPj3TFxz483pU/9uGhrvyx
D3/sio99eKArPvbh95wjRGfoP6ap0nksOiKJ78noPNLXqtAMgX4cukknn3VpahHX6JAKuWegI6l2
cCRFOpJKR5Ltf2jSiXBol4Et3PIPucugLUSdbCFXW2hwJh1UV/89ntmgM9MzG325IRIJY19fVF/R
ke1zd8gnnQZn4YaH5QaHzkLlkZwFQ2eh/EjEVN8vSXSNByDSPgRaK7d02v96SO5HaFRzP0alaVRj
v+9qtt97OolTqhE/1oRTdP3LcNw6HPfRHE5KbGg7+gBX0aGZTgLzo08nbWKYuepv8jOkYkPkMZwN
W2yIPKZj2ejYyIJWdqCRBSHQ6r8LKnHhg3Lh34XDrk/hsOkYPCKScjBt6vtNJ/lynZ8MBi3KOa4e
csO+Ucdl689xRXRczcfisko/4uD6mI5NJ/nkaonNAd09Ty6xdUD0jVVYYuuAco47cP12YDqJ09H6
tktsOrnjAbnE1VFUHs9RVOooyo9v3/XtZ7BvefBQTCcx9u9v5EBEtC7mXJ4hN/IrtIuGE9hFqXZR
fwIqN22A7DP/b6aT+V2s6/wOuaHt17HnDODY83XsxoBDM+rt48F+H6++QKAVLWf0/fvlM4Q6qrCL
o8rRUVW7DqJ1/uAJIlFpXG4dyOMyUXEDZGAHcvLDHyz1cGLq5CayTyemeSgnxqMT0ziU565pXeLn
rj98woLJayMD10TVT568urtg8npqF0xeh3bhyevJXXjyekYXTF4HdsHkdTCHifBik9f0WMsbxlbc
sZY3jGcaQw/p5JXPujTVzkn9RZm80a4jKR/Okdh1JP7h/1OTV4RDd8k7w8KiJ+Vd8ti4dxZboGMw
7p11uCavRKKLJO1sbhhEwgNAZ6P6cs45zJPXBs7Cn0LyLn1nzoL/HM5Cg85C/jmIqercjk1ew/xJ
vGiZ9PyTREU0KnIuo8IaFT73YCYaHeowcUrqMHUTrtL1P0f+nZ8Ox57B4VTpcFrTf5TJKzA/+uS1
vLM1qD1aKSavlTobnpGcjXKdjbSRh3PyilZ2oMkrQqBFNFfip6VyEa3DrhqlF9E67IpRh2/yypfr
/GQwaGXMcV0iN9rzdVyN5+mVsY4rch4uq+qhB9fHdGzyyidXi1QOaOlv5SJVB2RcoBepOqD0Cw7p
5BWno0Vs59jk9RwZhSfW21yo16+x3ubCH3nyinnJ/kYORETLXs5lvtyAd2sXNR697NUuqjyoXOfo
QzV5Pcm8xI+Nm7xeEvyUL/QUmr8qte+lqrja/yH3pJ3aQfpovVTVDtwInT81NtiMq3qtkbTdwJ/b
d4l9qnxSazZ9lmTZuH1d6s3WpX50r+zBK4yyfnfSbW18hmPtbuVdtddewfjnzUfrBWoy0p1UIheo
yXrFM0YvUJP1imfMwcxsKzGz/fjBZTeHT/3tGmpQZcU9UGjWRzeqj1vDT1gz3MrEGS7Rcbsziwdv
omPFksXTyIbkw7MFmqKfC3WtiW2BRpIxi3wrGbPIfyfzLPKNZJ5FvpOMWeSqZMwi13KuEF1sFtmo
8+maqBfWOp/OiWi+rRMO6SySz7o0tZpr9tSA3NTWkeRczpFU60iMy/+nZpEIh57xZws3yX35Km2h
/Aq9n6wt+K84XLNIImGpdSU3RCJhqXUlqs911WGeRfo5C9fNkn9joLNgXMVZ8OsspF+FmPIndWwW
mZfMs8gIo3b45d8CaFTFJEblaVTppIMZ8Ts0i8Qp1UAfa8I+Xf8ynFwdTuRqDsenwwlffZhmke0/
pQ2YH30WmZ5sjStXPGx9Upuhk2G/lpORrpPRes3hnESikR1oEokQ6MF3rsPK++SD7zrs/Os4bJcO
O/e6wzeJ5Kt1fjIYtMjmuOxyez1Fx1V1vV5k67gqrsdV1Tjh4LqYjk0i+eRqydwJAd11r1wy64Cc
N+glcycOyHbDIZ1E4nS0Xu3Ek8ht0e0z5ZK1k+5sJuslq44ifXL7nk+O+TIz3Xge+cShmEdi9N/f
2IGgaGHM6XTLnfeINuK/US+ItZH8G1G/DTd1bB7JfcO+5pGDrQ80jn0cecGAfT1nOsA64DufOK3q
ZF38V82zLv4a7cZ2s15PazfNN7WrFvmhxt/xIeIdufj5c1EPcPEjBFr9ciU8OUM+Uq7Dpu91x8JX
h50z5cecXRKdBvXKW3hQJzrmuLccpv1TftaU903n8jOnoeL1bvycvx4fufsDPsqzSLSRs8vlel1n
O3qnXq/rbDfcedjuGN+p7xgX6TvGd+o7xkW4yMJ3HqCaO/hX/kV6T4BbWkaR3BPQ3kvv1nsC2nvR
3f9Ts12EQ7sIbOHO38ldBG0hPEPvImgL1TMOV/URCX+FN1PfWJjB1Zcyk5/XuPcwz3bTOAv5d8pd
DJ2Fonv1LobOQt69iKnyvsMxLuMKoQ0JDuijQrkhoQOqv09vSOiAau47mAlMx/7K/z6et8Qauo3D
8clwnLGRwK93F2Ijwa9/lDkxMD/6nBgf76i7vNEha1hsTdJbLbP07kWS3mqZdTjnxGiKB/wj/1n6
7nsS6nDudHn3XYddOVtvEuiwy2cfvjkxX9Pzk8Ggm/Ac15dBeRNex9UQ0DfhdVz1Ab5fcZDjSAf/
yD+gb8lzQDdOk/fjdUCeEn0/XgeUVnJI58Q4Hd1MT4rNif9zh7yfrqMo+o2+n66jyPvNjz8nxpxl
v3/q/xv2ks/p7Cc39P3aSPVv9c11baTyt6hfe/BQ7a1+77+4yhEX+lVycztPh54W1Hfgdeiu4KEZ
HNs3CJyVbnkjHP7GUBXRyl/JW986ooo5+ta3jqh0zsHMbZts9F2s3eeG7fQ//MF+cY+mfc1tN1lz
26bEuS3R8Zf7IR7CiY4tkhDftX7iMA/hbm5mf/+lfFZdZ6b5CX0nXWemMS6YQ7GD69afe51WiB1c
Sk3p/GUpTybhWYAk2sVdNkApPAuQhF3cZScoTc8CJNEu7rJjn9Q3ip885OM5DKs+l8LBPgQny/8L
uQ+hk5X7J70PoZPl+1P7ZFnfJ9YuWfSdXfLLHb/v18ece4CJK8KhnQsbLLwsd5ptsSvhz3rnwqav
hD/z/bgnDsewwSdfmtrAAZ1+u9zEsOk50l/1JoYOqPkvh3TYwOlo+8EWGzb+cpvcgdBRpFfpHQgd
hbuqfRRb9jVYbDoUgwU6gf3+0VuVvoXPSfxcbjvX6PDzn9JbDjr8XKWnrCxOrTjoB3s683fK9fNm
q1VwzaOq46ttHJHds3g9feChf+l6+pxDW0Ffo4Zv8tj83u5hb3DF5h7eV2Il2aG566teond+rN45
dz19WI16J31Gja0g+ZLu27PVwrp+Ax2wUR0wfz39UbE6gP6WGAe0ZIceXZ/zDR3wiTrg0fX0txbq
APoTCxywwwg9vT5CT8jVfjrC6Pn0enp6Th1AD82pA7K7f0Vr+Gq6C6miN1T0dIdSHUA3JnFAs8ra
+iLaXlJBGipI2npSB9COEw7YboSeW19FY23tZ+qA59bTOEwufqsP2GmElq7Pe4oO+FwdoN76FA6g
lOOAXd5X+Ou7k2zeV/k3yv1MGkYLYsOoGlDzjODtqfnZwWtSi7KD81PVwGzLDs5NLcXP4tRym619
FWJCOmt3L/Vj5pXmx6mTnPOg/jj1dYXGsHVGqCDVFdiZZJzfk7qpx8PF6xwP1bnqHC/U0cepNxek
hp5tje1f06ekd7mWPiWdzx/YneyY+xCAgZS/Ucusyx64xwg+2LqIWlTApsrUi8mBoqeTbNkDm4ft
NEYFouo1x8MKsM5wjGlZgiMc496l+6jqFWNgi3q//W94v5PfX7Kz4CyjZF3BiUYZMFNCD+arE04J
+uxG6MG8pwns3KzmJPzqyoAL75sSQgBTVPYMFSDFRJn0qLA7O+aWcNiUF/6AeSPQmvzrbvg0+c30
WfP5w1YZgZfqF1FaHkK46gCVIFe944XwrkhJpOBSo+zss89MVrmZmZpOCUqLPjKVrrcClh7K183U
jYWyqKQoaow6/yiVTUfJuCSrlkpWOUpnczR5Kl7vwJXZwZcMduKLz+A6lcH0v1EGax0vrFIZXPui
zuBqlQs3VcLAtUYwlMPvz9UZXFdwnuIUnKoymIcMhjiDhspgiDNo33xsdghcpDKPT5DPJzDnkEmx
3qosu0+SEfh4r1ogDVuHGLJHvVSkji7oPGyVClN/K2opakAtUiiyAD7i33ZfRuz7XPT3ypf1SjKW
7NVfY28MXG0MjuD9gaV4v63ATpl8/xqVyVmvtaqZ29WZ12Rem3ld5vXXLjMC4VYjcP47O1UjLej5
Ip2i2VFr39wtZC/7eVvQqbJ7/7y9VCvPpTart0ZTb2pra/JTSXAZnfbtGfyrqKM71MkKhukz3/Pd
Z/51b/Osb95IZ/ko+ht1timOAVk22+WZV2ZekXl55sQJRmCL4Q2+7Q22qUt6xCVl/6SJpjd0fw7X
fkF6djBqBNdMwb8zHQOKcRFnTHdN72mErk4xSt4vbNmspuUXO9XRRrChcN1mlZBlm5Ozg5svKfuX
oU6TnbG5oIt6x52DVW+fOoLbedlR0ZOpdWanerJVqcLsMoIfRsdMgWFv6PZUO3WN3p63pzoz/eel
2gp6Wz220X35yizMXWzqZy8PtQL1i5PSYITO/+xLOnNBqj06kapF8VLomxnsmcF1Y1Vruy8T+RrW
5h24tsAXfDfwWfKwtkvUkDK4ueC8KYbjl8unOPLDWSrfzuC7wbUBNcMa/GZ7/zscv76oWf2nmxFY
6TICK74p3JodXOnN2F0wMPiuMXivGoVa5fFG0K1qzG60vVn4ZWi6O7A3eZoKaUK6CjZDBRt9+m4K
nENULdiVFZzgNvgxkTFpwQmnZwb2dLrrKKNsjLpsx6TvcPwqK9Wl8GM8m7vTYSlUShlIselU2PGL
uvbtUd/ktjZv6BGu0HWqOguGh7JTR6gJhBo9HQP8qE8D9elR9Rnm+vSp+lxnBFcUbticbASbszOi
Bd3pbaPUkadQtY2g7p/q0ZWaUI8roveohrzC41NX4WuGvCCCK6P0wIrV/GZtoeHBbIEzE1vgOVYL
PJj29/Z3t7/h1P5mGmpIKkV2jrr5JApdj1RlxXrkQkNccqNuiNRYqcXiWR31n2zVHh3Oiaku9d9r
UtMcg/EfpR2D1UuOwZ1TVfrp8+CoaU7E/qL6JUc3zYtbuGn6oi9exU0zN0SDl2qWTqN2o5rLj0il
JG2+q61NNxSnbihO9dZo4C7usX3BMaqBZNMgfHEad1Wu4MWnB1o73XVkrJk4nGpodvSJNZLcWCPJ
jTUSX6yR+KKn5cY3kjPU2WdyI5lSvp/28VG79jGT2sdQag4qz3Njef524HfkeUX0ssm6ocx6jRqC
2VbQVD6l8Y36K2ov1FUpX+vpuaTgHgo77cU0XFvvqn4/+tQVbW3ZasKQ5g11zQ4VpRmh42QfgSNr
rEkMXVuh85c2x3qKITm6p1Am7NTscoJvqo5h7LBwxvaCs7zoHahvWKb7hnxncHVA1VfwLWPwv8vV
tTiO+oOuqi9Q/cFK6g8G1xb0G69WTI4BHsVL4et/VeGX4Cn3mW3/5gv0n9dRnV6jeviS9wuuMcou
tque/Ylm9Ow1umdPUj17UpmvLdgn0JpUeK4RUuSP2lQllF3cSx09fX9Hd48drWJ4zXM1sksT3t7q
PxzBGfuKYECHItj+xUFFoHxH26arYci8lFG/vuiGO9raostVY0gcn9K9wTeN4NdGaJyaEIy3U8q7
r3QU78LkIewo7qEnKsWrk8wtoZ5G4D6nmsv8laeasbIZVPagddgpRug+1ZDbCvvFHVR8HU7a5igu
TDxDMc1kjVd5MHLajIx6b/CdbMeYbTRpvCR0r9PbvS3Tfy9Nor27Poq1ujab0VPB1PTZ7b9ApcpQ
Lw1cCe0NjbUbp41Tvf9rmbP+S6iCi40lerCzZaqrqS2wO33apUZwrzHw3c0T1fsdD4X9I234dqHS
no4rw+o6tzelYeZG29xjnLTL3Se5idYTqv2n0qmGbVW/uei3JlrJlBkXvoIJ1PrPjIF71UzW43ho
eWbgm07TLlPz+RTC7lXY6b0D4QswFS6tNdZvNNQkukTNw8PqYklVRydPm/LKSPVi1uDPyEsaLszo
S1eqFhVIt/Fxrs3jYzHEIth8njSRVlvgXKHmnu4udSeoH8rL5ltUfWsjXZWRzVfG3qmmBikEcWcF
P4t+oi7b7GQlrCyrOao3dLm6wtRlpro9l5oRBzunZjleWK4U/axXU/3gR9nB3dGxtDUSbFCXRboY
pBwDuP1NUGuKr2MLH1V7odNiMxC/mshGA3vTZzpUA8x2ZLVmB0c1XaFSVLLTUUwZLxoW3FX7Rdfg
9sDHFxaMDO7ZtcFYv9UInr4+kza5bZmDW8dSy/2U+sGTRjV9rn4G9tY77ndRBa7E44dN76j/YO5q
vsdR/Jz6ZfDuzODuzF3vDdu6sza54FQcMni3mqUM2zoldlGV9RtqhPqprrLfZqNteUZT4bZMtR6a
NieTT6hOMbhJddKb1cRhkxGoS84q6zcyq+yaoZ2yygqGJiV9oU7Vbrw1zzexKZpZ1u/MmGhW4rSY
aFViiMY2GYHlnTMVeHlTXxr52NPYYW0qUypnBae/nE5hfxX49ty7XFPKl/AUrhajZPCj4LZo/1vb
2gLLPYFv06dt5CqyX83VE9y166PgbkrssSrFxvpPVV6/zh44avNfrXg375UdjKd9f5KSFXxjbHA5
bSIEI5nB7d7gNxgPvLNa6dJzFNPDHFlz1LDsfcmsbxXzWdklDY7iz8hH8bqCW4xdEeNFs3EMrMc5
Mv1fJXnU/zOfSWpaiiO3OorPVuY9xVsL71PvK7zbG2g9xzFbjYi2zFnhNd3oRyNxx5b2Sr1EncPu
paksmkB3fmPBwO9kKc7YYes2T1ScgqH7PgpHDNu6OQ1TZKp/tCdV97savvvwscNUe12RPfDDl85V
B7etCXx9rhHcdVfvV9ERvGes/1x1XiXvF3VRnWRBY1bZ9NcDX59VMDnw9dmOkgCGd+Uky/5OZunK
TP/nScbaaHtWyU7gCk6mS9n5CkFkI8hSk8vO0aNuUb+pAbmzp3RTVunWpofpgKRwpuOFN4wl5tnK
prUZA1cY3d+kXQlnZqlqvVml6zbfE/j6HEcJbcoilky7Kt2UZV/nKV3u8X+aRIFFvkBstdFO+w5u
cOnE1M4c4DlxAY4NvhG9Uy1WVDPpPDbYlB2iijOby9jitoKpmMAHawMfJ3ns7xR2oUnFFUZbWKJq
aRLtNBxLGs+ePtJY26RaGEpoMbyvtGQHl48Nvhn99mYKQDXcaGDZG5nBD8eW7Cw4976RY5NWZM76
jNrSJRkr7uztnbUX7bnkARu3rhqSNIlRGeyj4m16Sr1wiZoJTL/kxp2br0fOOVeBvXsd9/9RvfrK
CLpMP0Q00c9+3tb24llU8F5g97l3DVTXoKqK5cb6RmNlHS2RjfV1xkkTlaHudfT8iFOdFolBHbaL
bnrqJSrmAbFe22EzTlLJ4ktA9dteSv/m3qTV2MbRZgcbVS+QIjpqVctjS7+wCE0le/X8QXXe1BXT
SoK66V7Gym64oC6kpYWZ/5KdRW7uogfUbutqhLqRk2DnXdkDHU1H0e696E9U9/xr8zSt6j+7Pgy2
1G7qGvjswoIzgxF1KYUGeEq3G+s3G8HjV8a67Ai6+ZfRzTuyg44m2mJ8RXbqEUfxY5RRtdBUXXrY
s3NFcsFJOGIwFqZh+Ck7vpMROv4jOrVqQRkrCrdRd74wcwmfZF0mbbJmr1Td+Qo1A1Xd+fFHq568
U6eyazolJdUNC5eNUO8foSbcBbXRshHJsd9V9z2ia0yo7jv2yohaNVtV3Xdd4Yqmkei+4XtY2Ah2
M4KtqiNeFt+/XjHBqybEezwvUWt1XLqhZOfdvZJ27PpQ5cS7ftOwnSXvO373Hwxz5zruf5uGlM4n
vogxYHugNd3xs/eQzayyzmeNDa7IVNWhEltD5xrcnNHguGhZoNVT2EN11sPUQjuyOSMzuOzl2JTk
U6NNXQTbkf1PjV3vBFovVGvllWH0I9RVNaqOMXtghNaEEbVYOOn0XVmlq6i4e5SqOzPj3TuHq0uo
8IzMQOOF5htr6YjQMcbAuqzBy0rfUy74NEb3iEqDWvWo9tL+UnaoxND0wcPr24kTfN7gl141Z6MV
yursYG30pkuxqswuu8elZsLZwc+yg3uiA6aqtVfwNVoDDvGWXWq/pOS/1UmFRxgZawu6Z4a6jRrt
cswLO15opWXpkdeqY9vGuTcfo4ZJtdBwR++4jDd33vNS9/CJOVZeg3m+Xt/TZMYbfPfVHPV7dGie
Xtp2DdmCY1xG2T3u6PtGbCZEwywWX8YUPrFfnTh6z3i8J7pDbyWNwjlWRsd8SVecGF8V5h1vcKda
zV9Sdov9kowvCzIzQ7+wZYbGuTKWT/+5N3R9SnbGDkfxFowRu6LrLm5ry8hzOQKfUC8XMtQKc5XX
MXaFmlVtV8CmuXTFBn7tthVcqd7rCo1xZY4aa5s+fuywnU246fx+RtQRmIItg+tdOPU3+tSnqlhH
0anpDpE3dCmdOtsxttlwZNVmB3eo1U/TmXjfz2jvQJUUnJYZGmvj9dqa0ASVmYvV8mZ6SkbEcIze
boSOUIcV/jcj4g1+OP14FYB31PUpjmK+d/JR1H4xVeMKOsWwVZkZ41xqNfBetnpjUz3xgx82hW0m
rWBEu/mVN/h6Js1VvWrO7fSWTUxNyViumGuNUA9iNmYsvyT42fQjiZnxQUFRdvDz6O/HAzcsnJnx
S5dafDQqVLNqAJuvVUdtzjFdfVJw8pRy8jNG+5nQ/tz/zVhOfvppPwUnkpfz5MmVjwY6OV0/n2TT
6ntDrInpjri83fwqT7nxBv9tUIr3GqExdm/oSrtecHUzAvc4bYVjjFl7WKu6Vfos/XIfLC1q+aDO
xasK+scOPIuWeg/V8uGnFK8qHJS5oistGB7ok2xTA8Q4O0UWeC1P7jaZa8F7aNWGG8X6dD1xIkdx
apJeRGbyzoc+6mUeyNXablZdEr4YVlVJVtnpzsxZn6rBSjXUMU7qPczdFHqswBu6KFboixUaNHLm
0JLfiHabzFsM6XQ2D+3OpNMDCi7a+HPRvQ63UbtphFH7WS/jRVtzrF/ZbnRf69XrDrta3IS9tdGz
vC9yQWdVUOutbRrOO992g2/Y0D2Rge8Wq4SpfiNsdG9WK7sV/lF0ryDTfyEtu9Ii9K0Hdo/jhXeD
/VIdLzRTnKpP2hR95gbeYXLvfM1eeIlO4V14c5jfrFZrmaVHtJtMjLM33avG3sSjePRWL1+X+LK3
jBb0KrE7V9jVoYVnvRg7Za2jj63pdPWOOdmprpOpVHXxxkm3p6ap47zBcWp+8EtnU08a7Wnla2uy
7ZVbClPK4/e3v6SlqZP+TJiuTUw61Duzy9QZabI77P24/e0gzfvUdMiuquv0YERNXmkVG9iYpF44
PjP4plrItDueEqaqsPNKvRWXPTAcmJl6vM1wjK3NCu5e2+QN9Xqd7p7WblKv1WbuXJmkXlptOP5Z
T00gDXO87OAXWcGdUV+uqoAasx6DdZTDGt4/nEm7Vup4I2l5yiojY3lK2F6fmkR1nEy7N0nL1Iun
GwPXZ7atzAyscGVltDpK1OnaVJY7t9W11dOWoT1Q6wrs6ewoOQaLrShfznKXNi5/+1svOX7s9ZKD
10uOn9ZL+1gvfXrV//R6adxV/0frpTdy9rdecoj1kqP9esnxg9ZLL2QdgvWS48dYL12uZu/13zV7
j/LsfR1m77c67l+lZ+9T9ex9Ks3ev6rdqmbv/c76rmn7uuxgGNN2sZPYtjo2bd9o7Fr3HdP2ME07
wsFtxkn9zGl7BNP2wJ5f35WRFYzURrtmRO8cmhnYqCbvdfz2teqcwbBazaxUA2HW4PU0f48qSPbA
OqN7ixHst3LWLb2of73a2u+L9Xc53uCb3uDbmL+0iZuOoYvt/KzFxU41khUkG91rMVi1ULpTvLhx
oF739syO3bJsf4iae91Og/8X0RPULP7V82kuHriCbkRGz5vQ1tZCM4KUFsd16kgcn/aqiw4Jq7lY
JnW/X0RLcJf5HjvG5O6YhJSEC4/yzpqZymVn8t+Wq843NXNFN9sUNT+6w55sm6JaxEWqQbSqBpEj
J0ivxJoT4Gkq1vtq8Rfi0Qt5tBoxayOG34Hb51yTOrT0mtRTpqhB6IwpajhNVb8MVj9dsTnVmZml
3eZkpZ6SWXpRtym01zolM3hRFxoZ1c8k78qLEKM3+DNn0x3U+NtUH7R9bMlWx0PLsFnreGFHcATN
RcYOC4+lJ5zaon+6sq2tSV1F8fcLLjeCnxqztviOpgHyXrUyKlSz0sujRqhQ/b7LCKlJftklqmt4
Oe1bGuPeMoIlbvz2vAs/ylLw4yGn+hEdMInuwJ99hpPuBd2r1nwP0avRPLXuaeLBnd9MN3CCHxtl
lzcawZ/bV2ZibFhJ/7G9Qg+vBLe/0onWWsHmV47AT7VkeJl5K9RJwXry0thJFSn6zmgi39sQfd1H
o/vLwKhlZaiM404yQld6jJBHjdH91O8XGUYw02eEupS8o0Lt0og55izsGc+qxQcEBN+KPvEzK2yc
pQt/QsDK6G8TXnHpV/54Zfwr+fqVCQnv8etXbk14D38oTK2KhR+fLbPDRIkNrvhHUM2QSlq/UZlY
dbX1fipQ6U1RxvGejHr9NkfJMsx7NCG9axyh+RsQot/gIPwAoZEItwhCo0XAe0Cg4+MIld3iCA1M
iDAhYhLqidBFEOotQoNJiCQS7N1jBP4ru7IwE2qYUGMSqonw5CSLUG0RwiahJpEQ7hnnoYoJlUyo
NAkVRMgUhAqLUGUSKhMJ7t4xQjV7KGdCKRNKTYKfCBdeYRH8TFCzWH4PCKWJhAZHnIciJuQzId8k
5BHh3qssQp7locgk5CcSPH1ihBx8elRZLhNymJBjEnxEOE4QfBYh1yTkJBIqjo7zYDDBwwSPSUgn
wos5FiHdIhgmwZNIsKXECPxZuGVpTHAzwW0SXES4UhBcFiHNJLgTCVUnxnlIYYKTCU6TYCfCV6JP
sFuEFJPgTCQ4XTECf21FmY0JrV/jIPwAoVn9Fn1QEKhAE2wmgY6Pv+LccR6iOGdJIxMaTUIDEYYJ
QoNFwHtAaEwk5A+OEdK4HiJMqGdCvUkIE2HoBIsQ/tq8HiImoT6RUDk0zkMNE6qZUG0SqojwC3HF
VVkeakxC9T6yNCxGKGcPlUyoYEKFSSgnQk9BKLcIlSahIpHAT30Tgf90tKyUCX4m+E1CERGeutwi
FFmEUpPgTyS4RurxzIgfm/j7a4jtwyhVls/sPGbnmexcYp8h2LkWO99k5yWy+a+XicCfr16WwwQf
E3wmwSDCmokWwbAIOSbBt49WNjZGqOQey8OEdCakm4Q0ItwqCGkWwWMS0hMJzovjWpmbCS4muExC
ChG6CUKKRXCbBFcioSg7rh6cTLAzwW4SbET4s7hSbBbBaRLsiQR8wKb00LoHhOY9OAg/QIiq36Jj
BIEKNAHvAYGOjyOkXRZHaGRCAxMaTEKECB9fZhEiFqHRJDQkEiomxBHqmRBmQtgk1BDh14JQYxHq
TUI4kcDfHirqoZoJVUyoMgmVRDhBECotQrVJqEok+K6K81DBhHImlJuEUiK89HOLUGoRKkxCeSKh
ZlKMwB9mUeZnQhETikxCPhGuEoR8i+A3CUX7IFwb5yGPCblMyDUJOUTY5bMIORYhzyTkJhLw1/qS
4GOCwQTDJHiI8JAgeCyCzyQYiQT6rlMm8B9KlaUzIY0JaSbBTYSzBMFtEdJNQloiIXxDHMHFhBQm
pJgEJxHWihWF0yK4TEJKIqF1cvzKggk2JthMQutuRfiVIFBBbGVhEmyJBP5SB3E9NO8GIbobB+EH
ryyI0FsQGi0C3sMri90JhOq8+JUFEyJMiJiEeiL87VKLUG8RGkxCJJGQMjWOEGZCDRNqTEI1EbyC
UG0RwiahJpHgvy1+ZcGESiZUmoQKInx+iVhZWIQqk1CZSIjeHndNlzOhlAmlJsFPhBJB8FuEcpNQ
ug/Cr+JXFkzIZ0K+ScgjwkmCkGcRikxCfiLBd0fc9ZDLhBwm5JgEHxFqs8XKwiLkmoScRELptDiC
wQQPEzwmIZ0I1wtCukUwTIInkYA/qZdZSmOCmwluk+AiwrcXi5WFRUgzCe5EAv0pJRECtQYtK/j0
Tj690zy9nU7/mDi93Tp9inl6Z+Lp8wt5Kjj54vipYKl+xUh4pbIwzrSNo2ptxYnxg5ci6jfc7zWX
Iq1mVDYzKjo+fpJ9V4yQz1O4KM5Z0siERpPQQIS/jBdLEYuA9/BSJJFQNDOuaUSYUM+EepMQJkKW
IIQtQsQk1CcSqu+NI9QwoZoJ1SahiggbxS5alUWoMQnViYTofXGESiZUMKHCJJQTwS8I5Rah0iRU
JBJcfm4DBeclLBT0K0O88a8Y+hVnwiu5/rh2U8rx+jlevxlvEcUbEYuTIiveUjNef2K89bPiMpLP
hDwm5JmEXCL8UhByLUK+SchLJNgCMUJDd16+MMHHBJ9JMIjQSxAMi5BjEnyJhIa5nL/IRfH5a9av
vJDwCn1pkNVJeDikdA4p3QwpjUK6W77ZCsljhpSeGJKvLC6tbia4mOAyCSlEOEYQUiyC2yS4Egml
v4sjOJlgZ4LdJNiI8Pw4sd6xCE6TYE8khO+PX+/sAqF5Fw7CD17vqN+iEwSBCmLrnV0xAh0f31M/
EOehkQkNTGgwCREibB8r1jsWodEkNCQScudxA3h+bHwDKJoXx65ndpjZYZNdQ+xC8f4ai11vssOJ
7OoHmZ2RwK5/MI5dzewqZleZ7Epi784SaySLXW2yqxLZtofiCBVMKGdCuUkoJcIjglBqESpMQnki
If3huNbhZ0IRE4pMQj4RzhaEfIvgNwlFiYTKR+I85DEhlwm5JiGHCOvHiDWSRcgzCbmJhIaK+DUS
EwwmGCbBQ4Q7BMFjEXwmwUgkeBbEr5GYkMaENJPgJoJDENwWId0kpCUSiv4Qv0ZiQgoTUkyCkwh/
Hy3WSBbBZRJS9tGOH41fIzHBxgSbSWjdqQgXCwIVxNZIJsGWSEh5jK8Ux+iEQfOxOHbzTrCjO/F2
/ODVE7HfyhSrJ4uN9/DqaWfijsjjcflrYEKECRGTUE+EXwhCvUVoMAmRREKkMm4ADDOhhgk1JqGa
CD0FodoihE1CTSKhahHn7y1PfP7C+pXnE15pWBS/4uKoKjmqSjOqCoqqULy/woqqyoyqMjEqz9Nx
mS1nQikTSk2CnwhHCoLfIpSbhNJEQtHf4whFTMhnQr5JyCPCMxeKFZdFKDIJ+YmE6n/EZSmXCTlM
yDEJPiL8TBB8FiHXJOQkElKq41dcTPAwwWMS0omw9QKx4rIIhknwJBJ8z3AbeOaC+DaQ90wcO43Z
bma7TbaL2HeI97ssdprJdieyKxcz++wEds3iOHYKs53MdppsO7G/Ol8s1Cx2isl2JrKbn40j2JjQ
+hUOwg9edH1F938EgQpiiy6TQMfHz1+ej2sdUZyzpJEJjSahgQjDBKHBIuA9vOhKJJS/EL/oYkI9
E+pNQpgIb4lFR9giRExCfSKh/l9xHmqYUM2EapNQRYRfCEKVRagxCdWJhLQX4xddTKhgQoVJKCdC
T0EotwiVJqEikZC3JI5QygQ/E/wmoYgIT40SyySLUGoS/IkE+oCWdlnKZ0IeE/JMQi4RLhKEXIuQ
bxLyEgn2l/lK6Tkq/kpxvRzHzmG2j9k+k20Qe81IsYCy2Dkm25fILn0lLn8eJqQzId0kpBHhVkFI
swgek5CeSAi/GiO4e/J6iAkuJrhMQgoRuglCikVwmwRXIiG6mvO3JiM+f7Y1uv9LeCVljVwEOjkk
O4dkN0OyUUgF4s02KySnGZI9MaTcNXFpbf0ShOYvcRB+8AJK/RbtKwhUEFtAfRkj0PHxk5fX4xdQ
TGhgQoNJiBChOl0soCxCo0loSCRE3ohrfPVMCDMhbBJqiHCpINRYhHqTEE4kpL8VvxhiQhUTqkxC
JRG2nCsWQxah2iRUJRLyI9wAqs+NbwClkfhlErPLmV1uskuJnS/eX2qxK0x2eSI7vJbZIxLYDWvj
2H5mFzG7yGTnE/vLc8QCymL7TXZRItu5Pn4BxYRcJuSahBwizBOEHIuQZxJyEwnG2/ELKCYYTDBM
gocIaYLgsQg+k2AkEqrfiV9AMSGNCWkmwU2EN88WCyiLkG4S0hIJ0XfjPLiYkMKEFJPgJMLtguC0
CC6TkJJI8DXEebAzwcYEm0lo3aEIPQSBCmILKJNgSySUvhdHaN4BQnQHDsIPXiYRoWqEWCZZBLyH
l0k7EtvxhrgsNTAhwoSISagnwjhBqLcIDSYhkkhwf8BXSo8R8VeK54M4dpjZNcyuMdnVxF59llhA
Weywya5JZFf9Jy5/VUyoZEKlSaggQp4gVFiEKpNQmUho/DBGKOrFiyEmlDKh1CT4idBVEPwWodwk
lCYScjZz/lYPT3jkUr9SnfBK6ea4zBZxVPkcVb4ZVR5FlS/en2dFVWRGlZ8YVfOWuMzmMiGHCTkm
wUeEIwTBZxFyTULOPtrNtvgFFBM8TPCYhHQiPD1MLKAsgmESPImE3C/ispTGBDcT3CbBRYTxguCy
CGkmwZ1IqG+OXwwxwckEp0mwEyGaJhZDFiHFJDgTCbYWbgNPpyVMglril0nMbm3B2/GDl0kt1P+J
91NBbJlksun4+P5vB7PTEth5O+LYUdBKGpndaLIbiN08VCygLDbewwuoRHbll/ELKCbUM6HeJISJ
8DtBCFuEiEmoTyQ0fBW/gGJCNROqTUIVEU4XhCqLUGMSqhMJnl3xCygmVDChwiSUE2H1mWIBZREq
TUJFIqGoNc5DKRP8TPCbhCIi5AlCkUUoNQn+RELj7jgP+UzIY0KeScglQldByLUI+SYhL5GQ8nUc
IYcJPib4TIJBhD+dIZZJFiHHJPj20Y6/icuShwnpTEg3CWlEGC0IaRbBYxLSEwk13/KV0vWM+Csl
8m0c281sF7NdJjuF2CtOFwsoi+022a5EdnpbXP6cTLAzwW4SbES4SRBsFsFpEuyJBP4ycCLU9+b1
0HYQmrfjIPzg9ZD6LdpJEKggth7aHiPQ8fEe6PveVf5WnBafP59+5emEV/KOSGrvu5GjauCoGsyo
IhTV7eL9ESuqRjOqhsSoKh1xhHomhJkQNgk1ROghCDUWod4khBMJDc6k9q2jmglVTKgyCZVEqBoi
1lAWodokVCUSPH3jPFQwoZwJ5SahlAjjBKHUIlSYhPJEQtGRXEM9hsTXUPmRcWw/s4uYXWSy84m9
erBYKVlsv8kuSmTX92P27wbHsxv7xbHzmJ3L7FyTnUPsS8X7cyx2nsnOTWSnHB1H8DHBYIJhEjxE
2OIWayiL4DMJRiLBd0xc60hnQhoT0kyCmwhzBMFtEdJNQloioSYlzoOLCSlMSDEJTiK4BcFpEVwm
ISWR0HxsnAc7E2xMsJmE1mbq/04Va6hmk2A3CbZEQs5xcR6am0GINuMg/OA1FBFuEoRGi4D38Bqq
OXEz9/g4QgMTIkyImIR6InQShHqL0GASIokE+pDn9islJtQwocYkVBOh8hSxUrIIYZNQk0hIG8BX
yk2nxF8pxoA4dhWzK5ldabIriJ0q3l9hsatMdmUiu9oVl79yJpQyodQk+IlQd7JYQ1mEcpNQmkjg
b/wVI1QRE/KZkG8S8oiQKwh5FqHIJOTvw8NQzl/qyfH5q9ev9Eh4pXFoXGZzOaocjirHjMpHUa1O
FWsoK6pcM6qcxKjwFejt1lBM8DDBYxLSiZAnCOkWwTAJnkSCf3gcIY0Jbia4TYKLCF0FwWUR0kyC
O5FQc1ZcllKY4GSC0yTYifCnk8QayiKkmARnIgHf6d1upcSE1i9wEH7wSukLmv8JAhXEVkomgY6P
74PO4TbQ9aT4NsBfgi5XSqCVNDK70WQ3EHvFILFSsth4D6+UEtlV5zJ7zqB4dvjcOHaE2fXMrjfZ
YWKPF+8PW+yIya5PZPP33Msn/5hQzYRqk1BFhOhAsYayCDUmoTqRgO+Hl62jkgkVTKgwCeVE+I0g
lFuESpNQkUjAN723uwnFBD8T/CahiAipglBkEUpNgj+RgK9ub3cTigl5TMgzCblEqHOJNZRFyDcJ
eYkEfDN7uzUUE3xM8JkEgwi5gmBYhByT4Esk4CvT291qYkI6E9JNQhoR9g4QbdEieExC+j7asScu
S24muJjgMgkpRHhUEFIsgtskuBIJ+O52daXkDoi/UvAN5ZLtZLad2XaTbSO2S7zfZrGdJtueyMb3
mbe7p7QNhOZtOAg/eA2lfou+cqJYQ20zCXgPr6G2Jc4hsmKEFAevh5jQwIQGkxAhwjWCELEIjSah
IZGA76RV+XOdGJ+/Vv1K14RX8PXK7dZQHFWYowqbUdVQVCtOEGsoK6p6M6pwYlT4Au9296GYUMWE
KpNQSYSbBKHSIlSbhKpEAr7uW7aOCiaUM6HcJJQSoZMglFqECpNQnkjAFwa3WykxoYgJRSYhnwiV
x4uVkkXwm4SiRAK+OZzmf8fH1xB/w7JcKTE7l9m5JjuH2Kni/TkWO89k5yay8Q3hih09LmEfe1L8
GorZBrMNk+0hdpV4v8di+0y2kcjm79CW96GYkMaENJPgJsI4QXBbhP/H3rfAR1Wcb++GIBtBd1HU
eKtRowZFTRQkyG2jCZxoolFAYr00Xorx0hot0dgSCQ2RXZfV1EpNLbaptTatWuMFG7DgBjBZwOoC
XkJBGyjFE0AMiCSAId+87ztnZs6ePcnBqv/v+35/fy27mXNmnmdu77zvnLPzZAuETCsCik+bnkMR
QiohpAoEHyBsPUmJoSRCmkBItSKgjLTpORQhuAjBJRC6P2MIP1cQIMGIoQSCy4qAutCm1/U+QwT9
M7wJPyiGAoQ0BaFdImAeiqE+s+5j3xIfQxFCjBBiAiEKCMtOVGIoidAmEGJWBBRjVhEihNBECE0C
oREQblQQGiVCRCA0WRFQutkUKRFCPSHUC4Q6QDiQqkRKEqFBINRbEVAVms2UZanxMwVVjlXsWsIO
EHZAYFcB9sNK/iqJXSuwA1Zs1EQ2vZRHCGWEUCYQSgHhFAWhVCJUCIQyKwJpByorVAkhFBNCsUAo
AoQlJyjxkEQoEQjFVgRUiGTt9/AJ8e0X4Vdut1xB7VW1ZTVi5SdWfsEqG1ilK/mzJStNsPJbWaGc
qimGIoQMQsgQCGmAsPx4JYaSCJkCIcOKgLK+pudQhOAjBJ9A8ABCiYLgkQipAsFnRUARYLWVXITQ
vRNvwg+KoXaC/3ecEkPtFAgugQD3x++nzYqPlLDMmnZCaBcIbYCwUEFokwiYhyIlKwLqCYP/d1z8
GCBFVTVSIuwoYUcFdgSw05T8EYkdE9hRKzbqBjPsrcPisVF01xRDEXYjYTcK7AbAfk7J3yCxmwR2
oxWbNHPV51CEUEcIdQKhFhAuUxBqJUK9QKizIqDYrOk5FCFUEUKVQKgAhPZjlRhKIgQEQpUVAWVj
Tc+hCKGUEEoFQgkgPKwglEiEMoFQakVAHVjT63qEUEQIRQJBA4RTFARNIhQLhCIrAsq8mmIoQsgm
hGyBkAkIS45RRopE8AuEbCsCiq+qCBmEkEYIaQIhFRCKFYRUiZAhENISjON58ZESIXgIwSMQXICw
b6gSKUkEn0DwWBFQBZbNlCVD42cKqqKq2N07ELtzB2bHD4qh2Df9p0p+SDBiqB0GNtwf/z7Oo/HP
lAihjRDaBEIMEFIVhJhEaBcIbVYEkkQEhM7jKB4ihAghRARCEyC84VPiIYkQFQgRKwLKXbL2+6kv
vv2i/EqJ5QoKhZpiKGLVQKwaBKt6YJWm5K+XrBoFqwYrK5QgNT2HIoRaQqgVCAFAWOZVYiiJUCcQ
aq0IqBBqiqEIoYIQKgRCGSDcqCCUSYQqgVCRYHT8MW78lRJCCSGUCIRiQDhwtBIpSYRSgVBiRUBF
T1M8RAgaIWgCwQ8IdQqCXyIUCQTNioCKm6Z4iBAyCSFTIGQAwiUKQoZEyBYImVYEEIs0x0OEkEoI
qQLBBwjvH6XEQxIhTSCkWhGif6FxHHVZfDl+5a+WKzq/MqzrUPzeBb9yqSWP5wU+XyxXUvmVln3x
pWXwKyMsebL5lScseTR+pak3/koxv/KJ5Uopv5JrKa2CX7nLkifwAvVMdXMaBJHULS7qFpfolu7t
8HsBJTMkaHQilUd0i8vaLQ2s+KxVwXe1cGUEzCuU88EeUU55RAstxcT6IRYfCJiFK5s0LrjaORGs
ONz75GBxb3kTKwATL9wTX7UYFdCoLTul9T72v79DAe1w7xSlgEZWACbu2h1fgE4FNBgMPH6w33Dv
MUoBDawATHzJUoDrRSyg3iigGxjE4N61R8oC6lkBmHiPpYBUKqDOqMJCKCAK99YqBdSxAjDxPEsB
mVRArVHAJiggAvderRRQywrAxO2dlnHICkA5IOzDACxCcONQiVQeYLkxcdOR8X1YTPBVRgPAWKtp
hHvTDsgCqlgBmPjmF5Yh/aIxfpZW9NLyAzdu2S9uXITpoaWY/lNLARUq/6VlVEY93PtbpYwyKgPT
L4kvI+TRQvm65o5q4XARFgAnhdbBDGAhN2QZcEQvnA06rSmJ1XZpMRa2AK/kf2kUFl6awdJRs0P/
QpepcPC2Fl6AmcJhuCcvi82KRVC+vnqf+UZ9OCPHi9Kf6cTvkFN/ZRd+B3r6H786BJUh7oPwYFB3
qxau8SD3pYHtxqyuAojJA5H7fX9D7j7ijlfCeyV4+yGD+2iFeypx9xF3uIe4A4R+9D7zjfqP9iBH
uE3f/Dl+h5z6l5/hd6CndxyU3MM1MdQ4XVohGJdBwQuSkfGWV5Bx2yFkjFc2iq4LL4L0rHWLB2JH
YhH6V6xhgjX3bDeP0lAYUoKBnagRjOXptxIlwNevQ0o0FMJLI0SpBCnVFEOxA4nP9cQnSnzgBv1K
hU8U+TAqmOeafUBlqoXKVKTSSVQgi/7RzkMGrr7mgKQSytZCs1nPdrOL9URKI1J+ACgbgKS2L0JS
DUQKbtDf2CP7pUJ0a8k2mdqIYrMLMFM4XCG6FQsevdd8o/4rGoZwm34kDUPIqX+PiAM3/ZgDypCc
F8U1Z15Vucvl9c0DO+8dOg+PYhHX6kzX8DCWcE0pVTNbDIdMIPRIEtZ088tY0zKqKV55Z7dsfkgn
peYQFqC/txd6YISlB0ZgD+ylHoBc+rQdWBFA1/P3J+4BjailUQ+k4nriRl6PvY68iogX3KCPlLyW
poke+GSrTC2mHiiiHkgTPYAFL9pjvlEfRpMJbtMD1OqQU1+4Hb8DN722O0EP+KvUVsZDTVSD4aJK
+UR7ewD+eKrXea9hvTxUL7xyY6ck1saAlvmhXkco9fJRvTxUL7iH6gUQ+se7zTfq42g0wW16I3UC
5NRXduB3oKc3dan1aqd66fOxXjGqFx4pEprXTddcYbym07VOuuZD/eh5ZU/gNVi22TU8b0Lki/xS
zYfnQYh2zPit2o74C/jQvAwqs+kveC2VysRfd4syY39Ry4z8ReVS8orKBX/3K/I1vqrmw9/lCi6p
S1Uu+EtE0S7dq9V2wV/ZiTJ9a9Qy8Xd2gktVTOWCP8GSdVhrqsNalUv2JpUL/ihEtEvpDrVd8AcP
osyqHWqZZTtULr49Khd8FV7kK/lCzYevqgsu0R6VC76cK9pFO9qttAu+eCrLpGtGmXSNcwkc61a4
4EuPIl/bMDUfvpQo591pbnXeneZW2iVyoVtpF3zFSJZ5oanMC1UupZeoXPDlE5GvabSaD18OEVzS
LlO54ONw0S6dU9R2wUe9okzPVLXM7ikql8zrVS74mFH27ffVfPgYUHDRb1e54IMPOY8eUNsFN/Xl
GHxALTPygMqlpFLlgtu9ch49rObD7Vg5j4IqF9yACs3z8z76PV7L5H30exWv7fcqHm6vhGuiPWhJ
XcKSdnfA+gSeRXjUiD+jJY2hCVuAV47ZIVcuSF+SRCsXFKAftwtWrr0d8SsXpAQD3bRyQS79N1vR
UAK6/vgesXLNCNUWvQii9rUxiHNDTRpSb4IYWl5rN11ro2sldK2TrhXTNYyj1dWwgaqrd+Bq2A41
aj+AdY2+hHVtpLrCDfrZ26XZr4JVA0SY9djHMrUJXa8FmCkchntIF48tHFj2czvM9+oDdKw33Kk/
+B/8Dpn10L/JPYHvs3eLhWNGaB7VeV4m9H3ocarz4xC3s2tU53l+ukZ1fhwj95CXIoP3GK0SqnNb
Bw8QwjGg1rEfq/3qi1jtUqo2XrmwQ5LOFtXesEmmllG1S6na2WKxBAi9cbv5Rt37KdYNbtOrqd8h
p/7UFvxegvUHV23OShBEuGlFcK0WzIsFC9/pOAaLqWwXKfqtmKmyTb8elvRUNqTk3Z8lqX9d6FL/
Ok5GOrKwL/8t45SULTJO6WFuS8fv+i8NAgZZ2p/+LSOHNzfLyOFlKO2apAT520z5522Wrv3PIM+p
ifJETXmmbJY++GTI0+Hul3WFqYTdW6RjPHCzdIz3s7nc8Rt3gvxlpvxr26UP+jbkuaN/BmmmEu7d
Ih3D6nbpGD4IpZ3Yf2nghcnSTt8i3bFR7dIdGw6lrUmUP2bK726Xlgniv46nXP0yqDKV8LvNcl6/
9i85r/8EpeX3X1q2qbRrNssZ88N/yRlz/WeKvx8mgY9mD9rwd/Uhm+BiZUyfwpxQ0IchvRG/qjcS
gk/2v/3anOYAmg5Epj0EKFa/BLz00LROLZzXjgUvIBGSGhAF0Ru+RAPyxgtgQCp1CCEgebdwqoPt
WrhQ14Kap9VPWiMuWhUGnn//AJdWHfEsQdmRtUtIdiS2hGRH1kIghEAgOwKQ+ghpUyp1/eZP0Aa0
69MgpAiNv+Q+VhyIw9CjZ8zqhoSBJbinO4eqx/5uQl45Rdqc1nb8ujhOfeRMYbDFK2FcLyTFcsVQ
HznNsrVjqI98sD3+iqE+ssO6JxivPkISLzU+7GD6oFAHGuRKZWMYJUf4Q/EeY8cT7o9/5SRefYQU
TUi9hIuY0ENx0ELoULZqO6UWgksgdDtQHyFFE1Iv4SIm9FAcEOYpCG0SQRdaCO0O1EdI0YTUS0L0
QY++AeEsBSEiEWICIepAfYQUTUi9hIuY0ANuQFjxpURokAhNAqHRgfoIKZqQegkXMaEH3IDQrOyc
1kr1kXqBUOdAfYQUTUi9hIuY0ANuQOjdKxEqZB0CAqHKgfoIKZqQegkXMaEH3IDwjIJQIhHKBEKp
A/URUjQh9RIuYkIPuAFhrIKgSYRigVDkQH2EFE1IvYSLmNBmDiBsUGe5RPALhGwH6iOkaELqJVzE
hB5wA8KDCkKqRMgQCGkO1EdI0YTUS0L0QQ+4AeE4BcElEXwCwZNgxsWrj5CiCamXcBETeowNigev
KXZNl4oH3ULxoNOB+ggpmpB6CRcxocfYB/l+sniMLdVH2gVCmwP1EVI0IfUSLmJCj7EB4XNlxjXJ
OkQFQsSB+ggpmpB6CRcxoUfSgBBWEOolQqNAaHCgPkKKJqRewkVM6JH0wbjnLQGJUCcQau3VR07b
Gr82WdRHSOuEdE24vAntggP2y8qjmjKJXSWwKxyoj5CiCamXcBETelgNCIUKQrFEKBUIJQ7UR0jR
hNRLuIgJPawGhB2fSwS/RCgSCJoD9RFSNCH1khB90MNqQAgqCBkSIVsgZDpQHyFFE1Iv4SIm9LAa
EM5REHwSIU0gpDpQHyFFE1Iv4SImtE1wwPD3OUK31ELwCASXFcGiPkKKJqRewkVM6OVdQLhNQWiX
CJ1CC0F3oD5CiiakXsJFTOjlXUBwKwhRidAmEGIO1EdI0YTUS7iICb28Cwi/+0wiNEqEiEBocqA+
QoompF7CRUzo5V1AGK8g1EmEBoFQ70B9hBRNSL2Ei5jQszhA2LhTIlRJhFqBEHCgPkKKJqRewkVM
6BVdQHhIQSiVCBUCocyB+ggpmpB6CRcxoVd0AeEEBaFIIpQIhGIH6iOkaELqJVzEhF63BYRFSoyQ
LRE0geB3oD5CiiakXsJFTOh1W0CYoiCkSYRMgZDhQH2EFE1IvYSLmFBkAQi7lZjFIxFSBYLPgfoI
KZqQegkXMaHIAuQQHlcQOqUcgksgdDtQHyFFE1Iv4SImFFkAwvkKQptE0IW0QbsD9RFSNCH1khB9
UGQBCGs6JEJEIsQEQtSB+ggpmpB6CRcxocgCEO5UEBokQpNAaHSgPkKKJqRewkVMKLIAhEEKQq1E
qBcIdQ7UR0jRhNRLuIgJRRaA8EddIlRIhIBAqHKgPkKKJqRewkVMKLIAhMsVhBKJUCYQSh2oj5Ci
CamXcBETiiwAYfOnSmQhEYoFQpED9RFSNCH1Ei5iQpEFIMxWEDIlgl8gZPenPkJyJiRdwhVMKKyA
4tOU4lNl8Rmi+DR79ZGt2+JdQUN9ZLXlikV9hFRQSPEkRB8UigCrR5X8LsnKJ1h5rKws6iOkaELq
JVzEhEIRECPIUBB0KUbQLcQIOh2oj5CiCamXcBETCkUAoeU/SigiEdoFQpsD9RFSNCH1Ei5iQqEI
INyuIDRJhKhAiDhQHyFFE1Iv4SImFIoAQpKCUC8RGgVCg736yL6PLIECv/KiJYQw1EeesFyxqI+Q
PgppoXBJFApsgO+1Sv6A5Fsn+NY6UB8hRRNSL+EiJhS+AELnv5XwRSJUCYQKB+ojpGhC6iVcxITC
F0B4TEEolgilAqHEXn3k2n/Ht5+hPpJtuWJWHyEJFJI74aonFO8ApYNblHhHUioSlDQH6iOkaELq
JSH6oHgHEH6tIGRIhGyBkOlAfYQUTUi9hIuYULwDCKMVBJ9ESBMIqQ7UR0jRhNRLuIgJxTuga/DB
ZiXekboGHoHgsiJY1EdI0YTUS7iICcU7gPATBaFdInQKXQPdXn1k9Ob4AWBRHyGtE9I14fImFAkB
dle7EglJ7DaBHbNXH3mzPR7boj5CWieka8LlTShGAuyfKfkbJXZEYDc5UB8hRRNSL+EiJhQjAcKJ
CkKdRGgQCPUO1EdI0YTUS7iICcVIgPC3fykxkkSoFQgBB+ojpGhC6iVcxIRiJECYpiCUSoQKgVDm
QH2EFE1IvYSLmFCMBAhffKLESBKhRCAUO1AfIUUTUi/hIiYUIwHCLxSEbImgCQS/A/URUjQh9RIu
YkIxEiBcqCCkSYRMgZDhQH2EFE1IvYSLmFCMBAj/+FgieCRCqkDw2auP/OJjy6IZrz5CWieka8Ll
TSh6Ao2Ca5T8nVKjwCWwux2oj5CiCamXcBETip4A4fNNEqFNIuhCo6DdgfoIKZqQekmIPih6AoSw
ghCRCDGBELVXH7lmU3z7Geojoy1XLOojpIJCiidc+IQiLmDVtVGJuCSrJsGq0YH6CCmakHoJFzGh
iAsQFigItRKhXiDUOVAfIUUTUi/hIiYUcQHCxQpChUQICIQqB+ojpGhC6iVcxIQiLkBY+08l4pII
ZQKh1IH6CCmakHoJFzGhiAsQ7lUQNIlQLBCK7NVHLv5n/BiwqI+Q1gnpmnB5E4rFAPuLDUp+ie0X
2Nn26iN/2xCPbVEfIa0T0jXh8iYUqAH2g0r+VImdIbDTHKiPkKIJqZeE6IOCLkA4TkFwSQSfQPBY
ESzqI6RoQuolXMSEgi4QMHitTQm6pIBBtxAw6HSgPkKKJqRewkVMKOgChGsUhJhEaBcIbQ7UR0jR
hNRLuIgJBV2A8LkS1jRJhKhAiDhQHyFFE1Iv4SImFHQBQlhBqJcIjQKhwYH6CCmakHoJFzGhMAkQ
zlMQAhKhTiDUOlAfIUUTUi/hIiYUJgHCqg+VMEkiVAmECnv1kfCH8TPFoj5CWieka8LlTSiAAuxC
JX+xxC4V2CUO1EdI0YTUS7iICcVDgLDjAyUekghFAkFzoD5CiiakXhKiD4qHACGoIGRIhGyBkGmv
PlL4QXz7GeojF1uumNVHSAKF5E646gkFUEBp3/tKACUppQlKqQ7UR0jRhNRLuIgJBVCga/CkgtAt
dQ08AsFlRbCoj5CiCamXcBETCqAA4SIFoV0idApdA92B+ggpmpB6CRcxoTAJEGLrlTBJIrQJhJgD
9RFSNCH1Ei5iQsEQIPxYQWiUCBGB0GSvPnLR+vgBYFEfIa0T0jXh8iYUJgH2nnVKmCSxGwR2vb36
yBvrLA5YvPoIaZ2QrgmXN6EACrAfUPJXSexagR1woD5CiiakXsJFTCiAAoRhCkKpRKgQCGUO1EdI
0YTUS7iICQVQgPDqWiWAkgglAqHYgfoIKZqQegkXMaEAChCKFIRsiaAJBL8D9RFSNCH1Ei5iQgEU
IOyKKQGURMgUCBkO1EdI0YTUS7iICQVQgDBfQfBIhFSB4HOgPkKKJqRewkVMKEwC9YJzFYROqV7g
EgjdDtRHSNGE1Eu4iAmFSYAQfU8JkySCLjQK2u3VR+a/Fz9TLOojpHVCuiYh+qAACrALlPwRiR0T
2FEH6iOkaELqJVzEhIIhQNj+rhIMSYQmgdDoQH2EFE1IvYSLmFAwBAgBBaFWItQLhDp79ZGCd+Pb
z1AfuchyxaI+QioopHjChU8ogAJWe/6hBFCSVUCwqnKgPkKKJqRewkVMKIAChFoFoUQilAmEUgfq
I6RoQuolXMSEAihAuEBB0CRCsUAocqA+QoompF7CRUwoTAKEd95RWlki+AVCtgP1EVI0IfUSLmJC
wRAg3KUgpEqEDIGQZq8+csE7FicoXn2EtE5I1yREHxQmAfauNUqYJLF9AttjxTbUR15dE49tUR8h
rRPSNeHyJhRAgeLB/Up+XSoedAvFg04H6iOkaELqJVzEhAIoQPApCDGJ0C4Q2hyoj5CiCamXcBET
CqAA4a+rlQBKIkQFQsSB+ggpmpB6CRcxoQAKEAoUhHqJ0CgQGhyoj5CiCamXcBETCqAAYfsqJYCS
CHUCodaB+ggpmpB6CRcxoQAKEAIKQplEqBIIFQ7UR0jRhNRLuIgJhUmAcLaCUCwRSgVCiQP1EVI0
IfUSLmJCYRIgrIwqYZJEKBIImr36SCAaP1Ms6iOkdUK6JiH6oAAKsDUlf4bEzhbYmQ7UR0jRhNRL
uIgJxUOAsK1ViYckQppASHWgPkKKJqRewkVMKB4CjYK5CkK31CjwCARXgjpwjRGtNb79DPWRCyxX
LOojpIJCiidc+IRiKGC1q0WJoSSrTqFroDtQHyFFE1Iv4SImFEMBwnwFISoR2gRCzIH6CCmakHoJ
FzGhGAoQzlUQGiVCRCA0OVAfIUUTUi/hIiYUKQFC9G0lUpIIDQKh3l59ZP7b8T1kUR8hrRPSNeHy
JhQpAXaBkr9KYtcK7IC9+ojPgm1RHyGtE9I14fImFEMBdmylEkNJ7AqBXeZAfYQUTUi9hIuYUAwF
CD9WEIokQolAKHagPkKKJqRewkVMKIYChCEKQrZE0ASC34H6CCmakHoJFzGhGAoQ/rJCiaEkQqZA
yHCgPkKKJqRewkVMKIYCBE1B8EiEVIHgc6A+QoompF7CRUwohgL1gm3LlRhKqhe4BEK3A/URUjQh
9RIuYkIxFCDMVRDaJIIu1AvaHaiPkKIJqZeE6IMiJUA4Q0GISISYQIjaq49sa7a8xRKvPkJaJ6Rr
wuVNKIYC7OeV/A0Su0lgNzpQHyFFE1Iv4SImFEMBQq6CUCsR6gVCnQP1EVI0IfUSLmJC8RAgbIko
8ZBECAiEKnv1kecj8e1nqI/Mt1yxqI+QCgopnnDhE4qhgFWBkr9EsioTrEodqI+Qogmpl3ARE4qh
AGH7W0oMJRGKBUKRA/URUjQh9RIuYkIxFCAEFIRMieAXCNkO1EdI0YTUS7iICcVQgHC2gpAqETIE
QpoD9RFSNCH1khB9UKQECCuXKZGSRPAJBI8VwVAfCSyLHwMW9RHSOiFdEy5vQpES6BpoSn5d6hp0
C12DTnv1kSEWbIv6CGmdkK4JlzehGAqw31mqxFASu11gtzlQHyFFE1Iv4SImFEMBwl0KQpNEiAqE
iAP1EVI0IfUSLmJCMRQgeBSEeonQKBAaHKiPkKIJqZdwEROKoQDh+b8rMZREqBMItQ7UR0jRhNRL
uIgJxVCAkKsglEmEKoFQ4UB9hBRNSL2Ei5hQDAUIW95UYiiJUCoQShyoj5CiCamXcBETiqEAoUpB
8EuEIoGgOVAfIUUTUi8J0QdFSoDwPQUhQyJkC4RMe/WRLUviZ4pFfYS0TkjXhMubUAwF2M8q+X0S
O01gpzpQHyFFE1Iv4SImFEOBRoFfQeiWGgUegeCyIljUR0jRhNRLuIgJxUOA8MliJR6SCJ1Co0C3
Vx95dnF8+xnqIwHLFYv6CKmgkOIJFz6hGApYaUr+qGTVJljFHKiPkKIJqZdwEROKoQBhW5MSQ0mE
iEBocqA+QoompF7CRUwohgKEuQpCnURoEAj1DtRHSNGE1Eu4iAlFSoBwhoJQJRFqBULAXn1k29/i
e8iiPkJaJ6RrwuVNKFIC7OeV/KUSu0Jgl9mrj9xlwbaoj5DWCemacHkTiqEA+1wlf5HELhHYxQ7U
R0jRhNRLuIgJxVCAEH1DiaEkgiYQ/A7UR0jRhNRLuIgJxVCAMENBSJMImQIhw4H6CCmakHoJFzGh
GAoQkhUEj0RIFQg+B+ojpGhC6iVcxIRiKFAveHaREkNJ9QKXQOh2oD5CiiakXsJFTCiGAgS/gtAm
EXShXtDuQH2EFE1IvSREHxRDAcInrysxlESICYSoA/URUjQh9RIuYkKREiDMUhAaJEKTQGi0Vx/x
vx4/UyzqI6R1QromXN6EYijAdin5ayV2vcCuc6A+QoompF7CRUwohgKE376mxFASISAQqhyoj5Ci
CamXcBETiocAYZyCUCIRygRCqb36iOu1+PYz1Ee2vWp5nh+vPkIqKKR4woVPKIYCVs8r+TXJqliw
KnKgPkKKJqRewkVMKIYChFyVoUTwC4RsB+ojpGhC6iVcxIRiKEDY8ooSQ0mEDIGQ5kB9hBRNSL0k
RB8UQwFClYLgkgg+geCxIljUR0jRhNRLuIgJRUqga/A9BUGXugbdQteg0159ZEujZS85Xn2EtE5I
14TLm1CkBNjPKvljErtdYLfZq4/MsGBb1EdI64R0Tbi8CcVQgH22kr9JYkcFdsSB+ggpmpB6CRcx
oRgKEFa+rMRQEqFRIDQ4UB8hRRNSL+EiJhRDAcKtCkJAItQJhFoH6iOkaELqJVzEhGIoQHApCGUS
oUogVDhQHyFFE1Iv4SImFEMBwm//qsRQEqFUIJQ4UB8hRRNSL+EiJhRDAcI4BcEvEYoEguZAfYQU
TUi9JEQfFEMBwj9fUmIoiZAtEDIdqI+Qogmpl3ARE4qUAKFCQfBJhDSBkGqvPjLupfiZYlEfIa0T
0jXh8iYUQ4GuwVcvKjGU1DXwCGyXFduiPkKKJqRewkVMKIYChKcVhHaJ0CmO6NcdqI+Qogmpl3AR
E4qHACFbQYhKhDaBELNXH/nqBctOJb+yxXLFoj5CKiikeMKFTyiGAlbPKvkbJauIYNXkQH2EFE1I
vYSLmFAMBQh+BaFOIjQIhHoH6iOkaELqJVzEhGIoQPjkL0oMJRFqBULAgfoIKZqQegkXMaFICRBm
KQilEqFCIJQ5UB8hRRNSL+EiJhQPAcJJCkKRRCgRCMUO1EdI0YTUS7iICcVDgND0ZyUekgiaQPA7
UB8hRRNSL+EiJhQPAcJ1CkKaRMgUCBn26iNXLLT4cvxKpuWKoT7yqycsexf8yt9/E3/FUB/ZYrli
qI9oltIM9ZG/WvIY6iPDLHkM9ZFLLXkM9ZESyxVDfaTlF/FXDPWRnU9bom2T+gjJwJDkC1d+oSAS
uuVzJbOHugVOpEoV3eLrU30EzSuUM/0xUU55FI7UhcQzGiw+EGl/REzqIyiDcvyfZAERVgAmvhK2
vGYh5EsU9RHSP3leFtBk6J+UWQrQhXwJMUD1EdI/UQpoFPonlgK4+kiDSX2E9E+UAhqE/sl8y5gS
8iWK+gjpnygF1Av9E0sBmXHyJag+Qvonf5QF1An9E0sBZvWRWo2Ln/xS3ojaJZh48/OWsUrwAZP6
COqcPLtAFhAwxE/GP24Z0kJ9pLJK48ondyhZqwzlkyRLVrPuCNcuQZGTs2UBhnYJpi97LK4MVXcE
5UHwzNAG0h1BqZLQ7/Fw0I+nJAklkdACvLK21igsvDSz15AY+NlcmVoKd4cXkPxIGO6h04VRR+Xa
J8w36q88hmeiwm36WfPpfFT4PuZRebbv+XWJdUdQHiS4tE4cfo3KKO/VI/f91yYJJRGumXKcwl0X
8ghvVcvUNOJO8iNh/ZBJM+VXvzDfqH8ZRo5wm35nCL+jHkllUJ4kfN9Tqu5IGwkfxCmlnEqM7ypM
Mk4lNpRSbhPdH17UbtIdQSWUuXVwYPcsi9TELFV3BGVRtgdI8QC+f/IrVXckSpTKSGCiFPVZfod8
NhfQ8eGKDsr6xySfmKE7gnk2/AKo3G6hcruqO4JnI/+AqKAGyRSFiumcbyJVTKSKAKD7t0jq/muS
hJJIaAFKnkyQpJZWiW7V58jUJlKHIPmRcJXoViz4rcfNN+rfo2EIt+lPUFeiHsnz8+RRy08v+CZ0
R8pUeRWMhlDfhmp655VJxnHPrKZ4ZWpYNn+FojuC8ivTa6EHxll6YJyqO4JiKh8/ghVBDZK1Tybu
gSKilkk9kAEADzyDvI4vShJKIlwP5e/zZRNmiB6YUSVTS6gHSH4knCF6AAse/5j5Rn0hTX64TffR
cEE9kvRH5FHTqU8evu6IRxVTwT0i1GtaiPV67aokoSQSWoBXtoYksfYeQ3fksdkyNZXqRfIjYbiH
6oVyLD8Mm2/UV9Jogtv0bBpNqEdSUCMPvfb/8n91R/5Xd+R/dUf+V3fk/2bdkVgPWtI4BaepT6El
fT03yTjY31BwevoRuXJBuqE7gvpMzwRh5Uq2rFzJ2xXdERRrOrOKNBbg+wmPfXe6I41U3W7SHekE
nYzSX2Fdi/KThJII11j5a400+4EeQ4Cj+CGZGkHXawHJj4ThHqE7gmWPmGe+Vw9VY73hTr2X2gD1
SI6dLbUKBoW/Wd2RUqqzLnRHUBLlvgVY7Uu1JKEkElqAV/6mxAB+Ue1bKmRqBVW7jKrtF4slqrVk
P2K+UX/q51g3uE0fTHWGnPppD0tFhWPno+6IX+qOtAUL3zd0R3SRom+v5JoDm2FJF7ojeLfQHcG/
hKYD/nWcjHRkYZWzZZzyi0oZp9RA2b/rvzT9kFrahbNl5HB5pYwcRkNp1yQlyN9uyu+tlK79AMhz
aqI8MVOejbOkD/4ec7ak7og96ypTCQ89LB3j8CzpGM+B0n7jTpC/wpT/+lnSBy2EPHf0zyDDVEJX
pXQMB8+SjmEvsyZSd8S+NPDCZGl/rpTu2NKfSXfsFShtTaL8bab8wZ9JywTxn9QdsWcQMJVwTqWc
12N/Juf1hVBafv+l+U2lbZglZ8xnP5UzZjO406GBdx1NEh6aIbjBJniL/uSDMhgYSKobrfrnD6EY
SZvewmL3Gd7Tcl2kRxKs7L5phfJ39U4fipOAMEloUG9RhVa90nfTCu9pfkO/pAh/VqrolqBsR3ha
GwTxeNTJR7CXTUeg0Dk5C+DAG/2rWjQ6V12OWiXtEB1Dcp4MMMpZIpah14OpDC6ooFLgXBvxdAyT
8nTYmcavhZ0zQB4ltAggZwSvY61RqWvBCWgomh7iSkUvz8NGQT4kJ8IP5AmXN2jBLo2ftBMM43E6
wUVw0I1+BTGeeVkSbbWxUBWSfylDB9xgwyN5dv0cGdMxOnhkDr8F8tEROsG8Js04aCePmUz4M0yw
blaHyIzgNR79CGLcoPcwU4qhikE7FGhAHyAAyiZs0Wt8ARe9CqgMaZrwKs1pLsLT6WE/CA7N0a+t
EUVZ74DDdPTMvu7AQ3mO7usOOB5H3zm3jzvg2Bx9dV934PE7DX3dAUfk6I/0dQccnaPf3tcdeATP
ZXOFgV6WgjcuoJOIwlDVghDWpyAUTsOPBcCsIDgsnX314dep6R723cO/+9h3F/+eqgVz09MaXfrj
j4gVhTlLuBTM+smh3pw3r2B4ucF/Gpt2oUV0FFIXKAZdysZba80Qlg5Dp3opfPN6w/vYH1Sh2/Ci
rBeqydwdSdXczWJwU11b+SFB+nXVYnsLjMODOKSXdmJ8vAg3vYaRvaAkfrKQG55BYpYcDzypxD26
HF8I8asj7iB+6bi+V1FJSiAUNuYBPv0ywa3YerYqtMTvbpR3D36AD/0kuPsNdndrzdZDRmPAt1O9
4aeVxth6SG0MlKWxbQw480jP/7lQ6oLGuOtxsYCyxkD9rkEPYGNQUrhTNEZMNgZt/0FjAD42BnzB
xmit+bsgDN/O84YfVwj/3UQYNWia25MTE8ajnOrmCDEwILz4MbFGs1GFEmHXzUXCJOGLmdCa4DYZ
GJQQgiJL+NJxO7JcKFjCtzHmZl1oYokqM7bNCkc+6XvIsavgLI99TGy9wSY2sGyciSwpiZ8tBc0a
kM1aK5p1oUF4oWzWmYIwfJtsJjzTRBglZWwJw8lUek6V8DSA8K1h4YTAfiL6Hz9BwpQUbhOESyTh
UkF4pkF4piRcIAjDt2lmwgUmwqgfY0sYD9yqnS320oDwK7S5mUmEcYftKiJMSZiJCGdLwn5BuMAg
XCAJpwvC8O0288BNNxFGsRjbgQtndOn/elh4X0DYNV84Zmzgok/2zBwkTDt1/DAwGLipYuCmGyzT
5cBNFizh2yRzsyab7UFWX80K54fpYx4WW3nA8vu0/a9jPLQIN/i67kOWlBSOiGbt7BHN2t1jNGuy
QThZNuumHoMwfDvZTHhTj0oY1WVsCeOxaAHpXgLhP9MWa4QIo9M5iQhTEmYiwlFJOCYIAz4Shi9I
WACjEI3hIy2o6+GOXQ2dqRamw9QW4ElqZ+Im6KhnxmA0WU/RJF658wG5YUDpSyGj3vwQOkvK6WlG
0Eh38ZPUahroL35fI/1FifxwNzR1PTRi9NX3YnMAWX1ZJaylT4rWh28XeMPvKq3/pKn1UV/HtvXx
QLcjpTsOrX8ebQRXUOujkx69F1u/gpcsWr9Ktn5AtP6TRus/2WNZS4+TzSEXyO0/lvX7hHHpeOI0
WCPvEZWEb1eYh9g9pkqixI9tJeHcOP0silo0XslJtHNfRJWEVP3fP8ZKUhI/oA4qWSwrWSIqeY9R
yXt6xJzIFYTh2zgz4VwTYVQMsiUMx9vpMykwSuOEF9CWfAYRRjnEi4gwJYUrBOFMSThbEM41COdK
wqcIwqfQMFIJn2IijPJAtoTx1L4V6OIvJa2/Fn0ruYouIgyp+pwfIWFKwkxE2CMJ+wThUwzCp0jC
e78yCMM3r5nw3q9Uwqg2ZEsYjvPTjyHCMU74YiKMcoGhRZCqx+5BwpTEzw0EwqQ2iIRJhhAIAz4S
hi+c8DuCMHyLa+F3TIRR+MeWMJw6iPtV4Cdxwj+nJzOkHrgINQNPI8KUFC4RhJsk4Ygg/I5B+B1J
+DlBGL6lmQk/ZyKMKj+2hPEwxcYHyWXihNdSgBIgwpCq//huCmCp5GJBuFYSrhOEnzMIPycJzxKE
Z1mHxCwz4Zv6IgznL+q9D5DLxAmnEeESIgyp+tK7kDAl8YMegXCpJFwmCM8yCM+ShKcKwvDtKDPh
qSbCqBBkSxiOidSvIsKZnPC9FBaRzOAiFBccQoQpKawJwn5JWBOEpxqEp0rCIwThEdYxPMJEGMV6
bAnj6ZfPlJMHxQkvo9DFR4QhVb/hTvKgqGS/IJwqCacJwiMMwiMk4WRBONk6hpNNhFHVxpYwHJip
75xJztRBInwUEUYBQuZMgRjaX0rJmcIkfjInOlMHpTN1UDhTBuFkSXjTQeFMHbQMiU0HVcIoYWNL
GM711McS4SZO+EaKtUiPcBGqEO6/g5wpKjlTOlOScEwQBnxypg4Kwq8LwvBtgJnw6ybCqCZjSxiP
K330J8iwlhN+gaKYOiIMqbpGhCkJMxHhekm4QRB+3SD8uiQ8XxCeb23h+SbCqKJiSxgOLNU33E97
lpzwAYpiyogwpOpPzUDClMRPRgXCFZJwlSA83yA8/6DFXa1S3VUSEgR3lU5XDfvIXfWgv4Be3Khh
F6K7imqCIbqy5G7prlL6UjyT9Zh70V2lc1TxzFTxnjY/hpLo0w1hED5kbinJJi4CBrQtuRRvg51J
RNVP/iF5WvDd+xNlf1JTK7OI9AVhi5IOXQ3TaauL8KjVP6G3Nurv52NlMqgyeOWzu5R3vA5is9Dl
RZBfP3Sz8raHIo7Ij2ml2FF2gp93gj7jdvK2gPT37wcf+xQxZODbnd5wkltxjkxDBiVa7ENz4PV8
GTlHB2jItFLAQ9KHi1Dw8PbbyTmiktsEW49k6xND5hRjyJxy0M7Hhr6QPvYjt8lO+SmLpTouGJZI
wt6U59rbZJtA/NVx4Fjwy/ceEE7YAcvk33tAbRhUibHfAoCGCVNwE+MN81eKRVAikTlh0DBX3kZO
GJUcEw2Dmo3cCTsgnLADhhN2QDphgjB8i5v875gIF/VJGM/o3UTRSgMn3MOfhhBhSNWfvpWcMCo5
Kgg3ScIRQfgdg/A7kvBzgvBzVsLPmQijBIz9bgAQPo8IV3HCBUSYtBgXoQJjxy00S6nkiCBcKwnX
CcLPGYSfk4RnCcLw7c44J8xEGNUc7HcDgPBPf0ROGCf8GwqESogwpOrZRJiSwk2CcKkkXCYIzzII
z5KEpwrCU60tPNVEGGUYbAnjocqr7iEnjBPeTnFFNhGGVH1eCTlhVHKjIOyXhDVBeKpBeKokPEIQ
HmElPMJEGBURbAnDact6KhH2cMJjiDCJNi5CqcYPf0BOGJXcIAinSsJpgvAIg/AISThZEIZvD8Y5
YSbCeLi5LWE4FFq/425ywvYT4QAFQii6yJwwEH07iwhTUrheEEYVSO6E7RdOmEE4WRLetF84Yfst
Zm3TflMLr+mLMJ51/cZd5IRxwh9RIBQhwpCqz7yZnDAquU4QjkrCMUEY8MkJ2y+dMEEYvsUNiddN
hEv6JAyHYOsDiXAtJ3w2ESZ1x0Wo6bjiJnLCqORaQbheEm4QhF83CL8uCc8XhOdbCc83EcZDze13
rYDw1DvJCeOEyykQKiPCkKofQ4TLeMmCcIUkXCUIzzcIz5eEb+eE5yyFbzXsm5nz7SbOeESx/SYU
cK4vRZJ+zrmZYiGNOEOqfvONyJmSMBNxLpKciwXn2w3O8KXjOuQ8TjTyOGsjjzMRxrOF7TehgPDn
dyDDVE7YR4RJDHIRSkC+dAMSpiR+QjoQzpCEMwXhcQbhcbKRhwnCw6yEh5kI4zG/9ptQQHgCESa9
xhb9BxQLoTBjaBGk6l99HwlTUrhMEHZJwh5BeJhBeJgkvLPbGBXw7ZeWUbGzW+WMh3ba70MB50dn
0PM6zvkFCodixBlSdY04UxJmIs4kGomcSU0SOAM+coYvfFSs7DYaGb7FNfJKE2E8z9N+HwoIbyAP
v54TPkDhEIlALkLpx6eup8d3VHKJINwoCTcJwisNwvCFN/JCQXihlfBCE2E8WtN+HwoIZxDhCk44
nwhXEWFI1bcV05M8KrlYEA5IwrWC8EKD8EJJeKYYFTMTjoqZJs54UJ79VhRwnkkRSRHnvOA+coqI
M6TqFxFnSsJM/GGe5FwqOM80OM+Uo6JANHKBtZELTITxhDv7rSggvILChQxOeCtFPKTYuAh1GudM
p4d5VLImAzJJ2C8IFxiEC2QjpwvC6VbC6SbCeNic/VYUED6GCLs44YuJsIcIQ6oeuw4JU1LYLwj7
JOFUQTjdIJwuCX/VZYwK+PZ7y6j4qstk33L74owKDTffSvFRF3GeTdETyjmGFkGqfgpxpiTMRJxJ
DRI5k0wkcAZ85Axf+Kh4v8toZPgW18jvmwjjqVL2u1FA+KVbKD7ihN+lYISUGhehPuPd05AwJXH1
CCAckYSjgvD7BmH4whv5RUH4RSvhF02E8YAn+90oIPxVCcVHnPCpRLiWCEOqvmQqEqakcIYgXCcJ
1wvCLxqEX5SE54pRMTfhqJhr4ozHtdhvSAFnjTiXcM53UgBVSpwhVT+COFMSZiLOZZJzheA81+A8
V46KG0Uj32ht5BtNhPGcFVvCIMShP/UDCpE44SaKR0jVcRFqOU6bgoQpiSt+AGFNEi4ShG80CN8o
G3mkIDzSSnikiTAeeWJLGPRC9G03U4jECQ8iwqlEGFL1565FwpQU9gnCaZJwhiA80iA8UhIeIkYF
fNtuGRVDTJzxAANbzqiEchFx1vcR5ykUQ6GwY2gRpOqd1yBnSsJM/B2pfYKzS3AeYnAeIkfF1n3i
PaZ9lkbeus/UyH/oizCIp+hzbqIoiRN+lkKSKBFGdceJRJiSuEoLvsckCbftMwgDPr3HtM+8rzoj
FCjD18wDafhieW0pvk5am4qvoBvXykzX8Ife9KPu0AK+hUmCjLCFSQoxC1ANJrgIdFr0rejVjXrp
RNzCbEDGC/DKudfJ/VhKX4q6Ms/egfuxpAWDui/GTibdRVIwQmKS39dEf1FimIjA6wOQjq8PhK4m
bw3abza08JyV8LIrfydd3f4DGLn9N0XJNxlDqcqYfjPjOAP+u8B72lxgZ7w/G8NDBhK/P4s/WcX3
Z+lXsTUe/FgA79/pf0ffbNTRqeL9WUweOM38/iy+gl5SjC1Er/Dhq33i/DNMwvdn6ap4fxYg49+f
rbjqEL3Ady+FW8jHeH8W/xDvz9IbhmH84WtwEb7IfiQxHnmCeH8Wk6dMNb8/i79t/et0ZEzv2eH7
d+IcEWIML8vS1cIIvC3LX1/kjJuIcaPeUniIXiJceoPCmL/NwhkHiDG9BhhuIsb4Enwx+pKj1h2P
jGs1eo9O//0UyRh+UY6/MP3qOmRMv3KtqVcY0+t6eXWwIUSM6xnjev6OIWdcR4xr9WHEOKAPNjGu
Uhgvwp9jI+k6Ik1vyy2C9+f0P6B7Nury4+nXHPRbabzSca2cQJS+FDLqOUS9iqhXKNQreBK9Zko3
FFYx9lXwA2rBnv9kfQLH04sKaCGF77nfV6qhmarhF9WgH82G6R26Rfh70U3osY3aPQyroVE18MoZ
shpLi+jH3XR5EeTXL56kHLxGxMv4q25eXw1k8A518yL156+kFRS+P329wpQsFmdKvyEP0iuBwRp6
UTCsAdooonmIaGYQTfz9ws+uka1N6Usxxxe3YmvT63f4Qp548EKmlt7Rq8mkv4z7+FEVVCFiAOYq
u5ebq01XHDKY6rFiNFdgW1RzZX0j909X8An9W5aj4wtX32/kPnQFn0xlcPfbie6ulXdfeQUfyJcV
qz+dUA1nmfoARj/pCjlqjoY8tyXKo5nybMuX/fdPZjPkzyhMz2dMeV7Nly31/HRuoJfeQgbabJ+r
d5aJ3z8Eu0N/w5/fByvr4TcUY1nPpLu9bzBjWVkfLF+o38UGnlbdneJd2Fy1mV3YrYXy4M5geZ1+
iNVnJN0emlaXsidUvvD0D6sPubxz/dRwDXgzf3G/kBmHafWhJwjuXUa8Vh/CmC65Am/OYzcX1vLf
dwxjw6kJ0oPLMSML4bCMcva1BYsLvqd/DtFE9coy/HGHqX5pRv32zetgaG72Z6d37hicPnmdLVWQ
iD8ZuXEytNT4zzbCQB/10pAklx7EpFGXbUrCO+6CmY5rSWWn/hnuK7Mv6TcgdBqDtrRvU7KLVr+b
VtQqfDqD5Tv1ceAedbMGGoZcKjtDLHEy1DPvqw6vkjaF0kJ5XxGM97QqWb/xQz5kvpJ3QQSaPsI4
mPuXQQfL90L1g+Wdnd7m0Qw5lLeT3Vcbdz3ELjE4/D5gdHA0axy1tBm18b+X0W/A4UA/l1F+XwPX
WiZrrpbJ+S4LH/X3NswhgB/zsOaAxh2P2955nXiSDfv7H4Wy9Cq1PlS+h5Wf0mf5emiylZ96/c0J
ifmzdmCjC+5hxCa05u3EXzkGy9urK3e6vdWnsb9YEwaZtzqtXWtNXu2iBPAo83Z2fIQGLK8dDiyp
3syGm8dUPisXKhwCDMCa0DKJVWWSuSrfFh/gEj8//Gy6dS+eSEVKcuB8l8eC7+p/nIpWrp0N/Pbg
NF3/YDz+3b1sJMuS7i4I5cVyAq581pMFwbyovm8cXC5vg590McZRvRyXSqCfFzP6dk4RtrxfrXPt
N1nfpl78D1a4wnbtTNYLbpv2Pcz+MI2fqYnGl18LDUz5iBmMge0uw/NVKhTyasGjtdDVGVroeC10
LfM8h7DPqzO14FVFWvCRNPSWO7WBpRgBwSldVeRA69AC2KrBwhhvTB27ibW6awJOniiDaNPGdMNC
4K0RPT+w200m7teXH+IpDTzlwbFGSgVP+WGekaLxlMuvMlLqual05/OU6kgRus/VramMYgTohMoj
+n3Z/HqonF1r8UCenhuNPjfZL6U9ryxK1J5lou4AFM6LLabhwPxrQJvGPsAl/5B9ZR959fr7WKXK
ev0G3D/ysVbOYLf2rgMXlftNlXX6+RPQmNfylLxaaEg2sDvx/b6bhGvDls7lk7hpCk3rpkUGknG9
jQQL/64/i9crI/r138cfG5rin05GNz94YG7EOxx/huQdjofieIe/FMOPP0bw45lG/FhQjx/o73qH
4w9ICoILKvADvbyCIP8hRph+mkGnkwQX8aNPwAHzzr0DxmwG5maFgEvlzeBFhv34F8dZgN5iBgd/
pgT/4oz+WIZ/cZo/qvJmcOLltd4MXhXmKIS4b1tDzh13ccNp0p9lJOlAo0Wcq4+cRaBcEKrRMJGN
gerK7hRWPT9WYS2rQpMPVr5W/VUYgMHWlryNzK0tZINhKXmQ8PvuTA4Ojuej09FVTR+I0UwnHPQC
yesnyWiGJdIJLRdM4ImsVNb9o3atZ5lCx134Pnxg+frd4IZnGb/JbQ8WbjKcwE6Rok/yoznU9fGM
5D7G0FsDhx11DMFRRQVdxALmjn9RAtRO/8X3MVNEC/Ofmk32sZHNZsJkT+vkZPgJeusgqLvWmtfE
h2eTNjav21sdJP8oEiqMVO/PgB8asvKC4VOgzeadBYawBr5rtzFTsACuaQOu8DHbHEyCIBtc8VMp
cMBrIY1NzdVadTP7gK90JIzxIxUwnk1wig82cfJqZMGsLASnHXeSu47x05yVneiIsznQrk9jnaDO
38wZzJwxEzsjmLcLPZrRwd0Iun0AS2YWrZBZtGkx77yfY9UGpgyAHmCJtw0LaO7lvVtYI3RDI6C3
rLVGwLAvBqfS+9a0XcPXBldp69mQyOvuuJymdrv3rfJd+sM5OL27O86Py4WrRuh+n/etyl3D91Pu
01tgIeiA4x28g1k1YZZnmhcAv9mf5CadLU4uuTileKvPUfy2F1i3s08W/8EiFEzeLxep98SirPlZ
0/u5/3iYeG4z3pXXOsADJ4DQePkluDEDy+A0WqXChe05TX6ysRGcZIVNuWwlCuY16hWXoKVr0nuv
ttjWBsO2Nujusdj49YZtrefeQAR/rz1e2tZ2fUYO2tZGxqkE7aoSvF2Rw2MXN7PktbbrQWbf68HK
UXw9uNLKWVkPfnRtH+tBZ4G6Hrzq73s9eMLP14P8qfHrgfit+Twdp0wi/4ddf3QezCju0pvXyzLe
X8Fpe6G7QuwjCJsrXazKEEb9cSTalnoKVMp1Pf1SdMDqsZafjkbqtTxWUgacXI9Do7LeS3JJN53F
OJm4oLMxOKcFT0ULdunhSxP55yb/nmU8YRyPkn48Ut5u8j/V8Rcs3EmO0rTOgjB4OpWRAvRwmgpg
9B24GAtr1OcU2o++CJziqM++UHZYm+6eiLVuEoOsTQ6y/0zgg2whGwAJ4p04frnUrMgxVLizIFzI
ab5HNAsb9X9fwGk+XSBogiOUmOkHF6hMzxllz3TwKM50zzWMqTof0D4Ep+1kU7XdIIczd1oTu9Ko
u3HHlrmNLA0PyYT0woZgsz6auDbou640uGYyGwJmlG8D0PSdxkbYcubr1+X0xuREeGikEXWLCRAN
Fq7UbxmJpUZ17RpYDEz9XSTsGYsmpJ8PtuEjltykT8U9WNgf/oiOBC1kl2Bar2Z8u7J42z4s+WpG
48pm9I1HYkXxTdg9jjfhy0VqZyeMt1oewf0C+/Fd3dqojx5jDGtLfIzXuy6yv87GVWiiNmAykNd3
ZdvMD5v7f3tRn/cbIQcsBpdoAx6GYdGp/3m0zIT3Z0UCzWp/4LZOs3L+Rfx8bp1I8xkPy/D3Pf/h
loy48zQs8d2yqAvsoNn+5K+Osz+RIm5/qluKwPj4LjEq0tf+Ast4ziXc/uy68PDad9eow7t/QlHC
+3l91f0Wo60TrveJzicJjVq8Kq49fOeZ28M1ymF7dE3g7fHJBYdXv2UTDu/+Q5Ns7w+N+n00vj4F
Yn2hE1y69POVBcN+fZlu9O/R/dcH5uM5l/Q9X5/KjL+emcj+s3V/znKIhtgSkBvCFaGT4vMP0b9k
7o6+KRNNeRv3JZXy4ux1YTe8JAiFTdvJNyLA+LahtS5s0y/3I6fMxOt1Zvz6qXJLxCvdzCt+vKRp
JvssSuPMdHLaP4Li9JQrjK1Pdf4mHA9/tVv/be4/uv/5Wt3q0f+U0Ud/TnTRZi/FYuCvZeuXjDcy
mOuLxS3rxWgsr1O/Gk5xY44zAIMb3c3iuitFMXAUMWxk9a7lO5ZDeM5W/XjMqPOMOmY8SsnIMl2T
SgsVNhysTa3Bwq36+R+aVyTr/sjYSw4l2B+R19f0d72f/dCDY/q+fsMFia6b4hO+NGjBI7TQZNZK
E/A0umDyBNjTqo6k0bairtfn4hjUaQO4VfeNFXvo9uPxMMr3x5VfNN62/EzxcLqSzw9yXtrB728b
KR61Ma9i+yhjIqJHQdONpa8bxY3Qne/H+/vx/GEuVld2urxzLzMGBaO3+3wJ+cORPLiA/brzjQcO
ZBX06CReL4be8RoMOT774vbfWbOwfuu2xhdqf95tv3/P8qcmzN9/+Znm+nZhf0R4C8GuiX7sOVir
NqNhwTdp0380Qp4kjoZG33i52tytcECYZ73Fn1T8HeDFvJwzz7MuhsZ8kram3/1dZhDS9E/Pibcv
aSqe/ulIWrjocPPV0Gm5+UZF1Am+Uy9YlzC+sI5vjG+7MHbTc8S4NfkPynqizM8E87//+lrtfQJD
X3uug/lJ+dnnR3rV2bb3S74vjEjIN87/sczPJy+RkyXbND+PvDDx/NxzAZ+fq2Jfc34qkG9fLOdn
x5i4+dmU9w3Oz/Mu+s7mZ+NZyvyckpFofi69IH5+Dh5vmZ+l7zmYnz8595ubn+cM73t+fpRumZ/v
X5p4fr747uHPz2ha3Pw017dTH31aX/4m81/G2V7XT86w9r8lv335+skXf2v2oHP44dmDsjMc2IM3
L/t69uAcZb0eYbIHaTb24DRuDxa/8/Xswe8vVtbrEcp6fVH8en3ZN2gPDmZ/Z/ag7GzFHvzh4kT2
oOfUeHtwwxiLPShe48AefJH9DdqDsX3bg6fOstiDvecltgcLVx++Pag4ux978DcLP/N8fqoPe/Dm
OX3aA/3u07+1+e7LOMz1/3sO5vvPxjqZ73Hvi1Ro/H2Rf6QfMt4XKYO/l8q//fj3GeJvDAEKT+pn
P0H/2fi+2/fkBOtxAnt0+1mKPbpUtUf/HJPYHi0fw+3R8OjXs0f3nazYo0ulPco/O84eBUZ+g/Zo
46jvzB51XqDYozNPSGSPKjPi7dHJ6RZ7FG1xYI8GXPjN2aPRlv1fsz064QKLPZqZmdgeDWk5fHvU
cEY/9qi1z/0wj37OyQn2w/hejVcLPehR30rRV52O3RRj2CxxuZ5/ougTuKNV7z4uwQygSx8fxydB
+tvQRwmef6J94X303omiYgmfr/Vr74j/dJ82fLXWfCCZXkJs1+84TU7Ydv3X6QaKOmHb9TnpnGvF
Sgfj6fKz7MeT6f68bm1sXqd37hmE363fCd0H83sYTttuen8qr7sjRlO3z/1effBI+/npZPya38+7
yXCapp6WqDp2/QVPSJm9Yn+0G2864ntB8PAUN/oWXGJdKmz2p47re/+pj/UrZr8eJVy/Iic4WL82
Djus9UsffOK3tj5Hzj+8+rUf76B+VzqqX5qsA5sZo4/hK1H1RLZGnW9MpMx0Pq06TnLx92n43G+H
MZAFYfwxxuBgCWkjDX445IY2y+f/cr3dDz/mgOVNH3osrgjtxswFW9iuv2BsDmTtwzUPtm2LPFrz
lgHwxvAzx/ClsNWfitla/T5udeWKsUn/VcR0frzp+dZoZkA8enLC5cL6/Ey/8rS+xy9vQ76+nyPW
d/7C8YhLsJKd+LgTGjXEatDxrljEHa2v4vrEuMtifSiK4xOFhzElaYYjURnVz4Q1C358g4szvtPh
O50bhwfJSmDiby6StjSqf0Z7mU3GGq2jeAi8013ZpBddrL4Tci0NvCLlfRCUB7gUzSBzmHZfJMeD
4h/7+vbfQgn8FevzUv11n4P+VO37L4/p374b6+kJQ+39gT7mt9/rYL7uSO+7/m9eePj2x8H1hPbA
xh/RzuzHH5luaR+79ejUE/iQW5nqcP7dcGb/+ynTj+4j/krw/OPw7Tfa35KhNv3ZV3uq4wPelWDj
opjZ8QbjlUP8J9ESe22C1S/uebTRV9UtmdqYLu+T1p8TWO2D8MegTvj+hp5xKhliMAH6Qdgk4i9y
BFvgZRQ9cBK6u+3IDCb+HWerb790nKFMfOW1jbVnkF+pd19g429h/Ha8o/m99ZTD9F8SzMf2kxzM
xzVH92OPhn6t+djP+MDx5bKzF335JxtP6JvvDccenr9zd2qi8vqKH359pjl+uP7suPghNdEOP13q
MTb5tzaZ4gdLfL7XJ4PlulPV+PzpoxPH5z8/mhcdbPp68XlOuoQ861QZn19/Ylx8nnH8Nxif/2y4
/fj6pp/vZSjx+W3eRPH5USdZnh+caonPM/7mJD5PTzSBv158/jdRls3zvXMs8fnW4xLH5/e8cfjx
eakIMG3Ww8lnxfMzr1et9uulvuaIby3eiJ1zePFG2ZEO7OVvznAeb8TvB7w17NvZDzjhGHU/YMNx
ifcDmo29i9LXHYzf1462H7997weknEf7Ae6Ur7MfcPfA/2o/QB/7vf79pxMG2s8nZ/sBICbhbD9g
x0mJ+Dgbv8cd3vhtHOQkXk6wP28dv32tfw/F7Z/tT45b/zwDbde/z5KN9e8VB/tn957w7cyXB89W
58sqd+L58oqbc81+xYm9P/7rzhecr6xtNp/4debL2P9yvmw8sv/58qn7v50vZyU5nS83JPRHnb3/
cZj7Z1UJJrF1P2/Q4fmTGxM83zKtH0f1fX2jN/H10MBbnkly0dgwuncQjPCBtS78ZQn6ap/J50nF
8PdLPvF3Gl4fKv5Ohb/PP1L6efedah3BCeJbWO+NqHbCAEk2QXuL/bYTEu63xU7pc7/tvvS4/bYS
4Ycg+O9f6nu/7RdHJNpvW3N8X/tt5/f2ONlvO/ul/vbbcr2JzEGCeD9RfHUY+23jjo3bbxs87Dvb
b2s8XtlvW3GiZb+tLIUPk65hcr/tbpe63xY+sY/9tphP3W979djE+21PH8v32+aclmi/bXBS3/Pt
ha96HMXjh3r670/T85SkRAMgsX1t9Xyt/bbOBEbVWv+T+67/m4n3z7/L/bYK6XfbxBdHxLdP3/6i
6Xl4gucxX3M/rIjGwH+/H3aqk/2wW4/6rvbDUo9U98OOs+yHRQfF7YdNP1bdD9vgTbwf1uzl+2H6
yX35TzS/9qY4tZd9zFf0hxKsn3b9I9anQQnXJ19PT1/r0+ahcetTbKhpfXL/qe/1afOghOtTV08f
61O429H69Mjz/T4POuDAnmF79hO/9LM+fXVy3Po0dvB3tz65lfXpzCMs61PjUXx9+lOqXJ8Omtan
zwb2sT51pqjr03IamJb16S+QDuvT5tRE69PBAX3br98kfJ5smT8jhziYP6b3zwc7X5+mH+z5OutT
rRP/emM/+89Xev7H16eAt5/16akBtutT3POgz/b30JB73Yk/AfU/75g+2wf7Z/Le+P75b/dTEq9/
Xd/M+hdlTnb/698x7u9s/Rugrn9uy/qXPTh+/RtiWv88Nuufx1j/hjlY/xK6iwnGw296+l7/1nyN
9yEePCrh+hcZ2Gd89vuUuPWvNsW8/tX3vf69cnSi9e/ko/uKz8K7na1/v+tv/Rs21GF7353QPjte
/xbu6zGvf2uO+s7WvzSvGp8NtKx/0L9I8kFsVR6fJZnis77Wv5hp/btoaOL47KShPD4DfynB+5kp
fdv/kxM8z0swf97fdZjx2S+TDyM+6/1661+Kg/VvRz/x6Q0J2ue7Xv/29PS9/nV5na5/p35lrH9d
Dte/FxKsf19z/art/GbWr9ShTuK3MwZ+V+tX8Vc9cv3aaF2/AuAeqOvXUwPV9evEpMTrlzuJr18Z
R/e/fo38ymk80dX3+rUx8fPA+OcTcF5TuLCdLRKty+FXzeIwoO4Zwbx9UFKu963CfXnDo3nBSB4z
WMHCtgJWt/XbC0LQOJWxAtZyEz7roWMDQ9NiWvVyNkw/1O8STy/6ez4B7alvFIPK2XzK40fktaCJ
+Hi7zF2ljkfr2LsIl5Dg/R7r+JizM8Irb6IYrKzSd35GY0P/gr604ZOY82DBzouBwdLv2odTUucH
DOuXotuyAM8SHs7abVoUz/Ebmxf1PnIvjfOoccAWXMlaFVytdZU3wdFLeCiM92X2JQino8L69yUr
neAi7GqEldPgrd5MJz010rEpNXgKcjCatQ4OCYbvXbvh/o6dBEfg1XAGhzFqA1kRaMFC1mvNjElh
Hfteh3OCscvLYoUugANsc1nHd5XXadD/YTg3Th/xOfT4tAAjVwVHFUNacQe0AF5n5KNwMjSeJ4Pd
VlMMt3ywl1cjFIa/4RT4YGGk0Y0VGFsYDdRMh3Po5g0lxlDNeu8TzYEwJD+KF8FiXMY+O4Zyd0ev
2ivbxniAFuFdgccivwxzIUSnLrtbwZTOWQk9Hfc8DNdkZfzBQdizE75PMdmTcH6K64P6fx8BftdO
tnzzlz38dYpBkGoTf4zdaZnvcO7l7CAd6XJnZfefcsB/a6VnGMx3YsMA+h/6EjzFaB/+kA3f/utj
nZ9snVfXvK2fWdeKuPd19GD5Vo2O94Lp3UbHELUFy99nszs07X29EcdVXicdwJWZ+PyJ0CB8vtqq
X9TdgycTR4zWkvZAnser8VPU3t6Ns7mbHwMXf96u+f0Xfjhpa55OH1txrAXL26ort5pOZ9uqv5QM
p7NtxdPZ2uh0tq14OttWPJ2tNa8diqiubBdHnLbjEadt8ojTdry/3TjStQ08+DmbewcBpEeLO84j
4fs6h8G3Z8A3y5cfyeqlw/3wSFaj68z+gsbPRpFHwIam7QxeZze/jL6rrtwJ4zzmnX8k8trp985P
ccH5jr2uDg357GzWj2BOO5zn0T6RVYStGEiZWeshq1n1YFEvZEZqN8OOaut3adXb3NA4LAJpc3kX
wKHXgcLeR/N6Lc6EaT0Lg90RvDC0qGyHQ7XYUJwMgz/kMg8wy/sBljoZR4jE8On1626jguOpM11Y
Y130hFEt0RM69oRujBwq5kdUjMsbPpHdlBU5Lw9AYyxSuY/C9u6OK9x8YTAOQsEW3Gq04E7MPvdp
ZNHuwlJChe3n5W0d0+ytvpn9jb4DSxpQuDUIq1monDX2sA/haJr121nQlhPsviI4rIV9q251D6jc
GuwNHoAbGJdghNVi/RY2jHKCkSsGD2vBG8WgeoJVha1GsFCFhsKxh7tZiQyZZWuFQ4nzg8O6sd9b
8zYBMzTlocJNnNxwrM+mAZhBGQSbYBAM2cO+IM6mjpW9/Px6LAAA8thsaRNt3Rbf1m2YsU22NZ25
KHvc7P/4++/vl7+Z/i617e9XtpPN68hz1N+/lf3N+iNUuJV5CmOi3p+rHX5egg7fYu7wz93nJejw
7Qk6vBc6/BeyPcEgfGiaq9tC07aCWz6yuyNH9jnrxbF5W70/5519Xl+d3Qudvcbo7Na8Nt6bUEB/
Xf2BXVf7E7xfY5y3Xr6XOdqh5FbT/OdrV2veXrLMlXp15V7Rz3uRgC4J7EUCe7Gf+/I//re8r1ke
+BPhvG5yoOD/D/pCJ4Ahf4w8kG7DpfBLfzFuERvLphlbRLzVRxlGJJj3fscRNL/Y11De+2yq8rWY
rUJj83RvdQZ9R76dxvK0HF6kZQP2Q7kUv8OIw/xns8TpStz/eEv5r9q/z/Ft254X7Pr/oj3tx8vW
RPXTDvP8+f8n24OfT4f+3FW+0PH0rmCnvmNnD39jSsQ3TSn91S/lW6xfitP61UL/wZFji4VTe/pu
rXnXRH9gtNasjzyLfPLJbCm42mfEDzM078MRrXWyh2Zas7ZEZl7Ock3UmjtGkjsfYJHg1SzzdJ8y
CKaQc3jQOz3iHXo5uzozPW1Ga256BoTts9I9WpglZK3TZ7ZBs+amp2rBy31eX266xzt0ALgdN5j3
Y6eQ83FQu62FF+kdym7WgrnpmVBuNpWbCuVmsnJP4eVmwB1YcKp3eHI6JPkQKiM5nZD8N0A8hoVO
9gj/Hk9sa24fqQ2e7Kua6Jp5lLbYRf9VaSnRFbV9X2et9+OIab8va1/Hr5kRFutrI4snZntc5SwS
mu0DRZQ4+4RXZw7IiqygG54038D4TfLBSexe3xHeofD+X1z+nOumaHN2luJx/oe08Cnpy/CI9uC/
9Fvh0WN41Lt/cruWpPC0v8LgDo9LXzaYJeglENAHV7CbXoObkvhNQXbTslH8j3FfYikL4Aaa5q16
KZYyM91TEOzST8bNxoFDyuGAdI8W8rMeHsLaPx9OwBvCrvxlpvEaI/Qj65ciLVyha2PH38eylF/E
7igpV+9gvevXB8LrCuxbsX6QmeACNqjnrIRK3pBzM2uoCDNY4/NZLtfMwTjYO73Nnh2DQp7wNb1B
X82q2X/Rwq+nl7D79YVbenp3/AZqGRpYOtOO4xF2HP/BLszM4ogfzbRHPEognrsFGyQ001KpzP1G
pc6GdYW17rLunl5zf8JcDU43pqjf9eig+PHABq8ST7O/faa/58z2wGSFgYTji/9dniIGYJY6xOKv
Pxl/HcYnFYb2omWQy5sxcNsf3C6YRtbxyPg3QXk4M6y31GrB0TPQ2nB7PIU2Ow5qrQOkOerbDKE5
KIDpPRXsADMyWfv0YTAmgwNmBKfgQfI3GHyNCJ99Ox12riQ4r99tLYa9hFuataDXxE9rHQS3KfZi
kGm+k/17k0xC52x4/5xZKbSmrcnpmAPMVda+JX9l3/OyInlZq/Q7PoIhMjU9TatZVz5MCxUw81Wz
qvzcRwvYnZGsjTvYnD4ASpXlx2jVs5gtZd3GYvuZI7NW7RhJtzdvHqg1tYs2ikJWrXnLSG0ZN0/Z
mvtD7fQvdnjoSvvFWkqbtkTaruVzV2ne3Bj003Kyw1TfuPrhI+IFEVF/ahzY/wtNZwOxtmWyx238
Bf3fMjnF9Le9fVq+Fy3LeDaUlhzF047WuX2C0/P1SKdhn479g2KfOj7t6c3aB9961xk37HlWuSH6
KZa8G9I8PO11SvvHs8KO/Uuv/1SxY1M+x2mbW2ZnI7bca2Mj/lzG7VhdmWXKj//SmPIXb7exY3PK
nNix9z+Wdqz+XjuOE+w4DixT7Ji3D0Rpx279GBtkxb2WSpXuNSp1cwfZsX1f9PDn70XV+/05S/ys
hXO9V63NCcZyutrYkK9ZV+jNb8al05u/unr/hbN/Fow1d592eizHvTyvZt3D9xSETssJJx+5BHp+
+Orq7sxc79XrglEW6ueExx3Z/PkRrJTqzRPRLuR489YWBjfkr+9wHxiz/IFj2SzyIubw1YG1+ev/
XZiyIaf6gH/mUHQ8cwNrtfXtWm80//Tm3EBz/vrNOd43mqsjm6u7f9CY9uCA3ECU2ZRBWpj9w8dG
FzwZn/Ofnt7ieH+Xjeei/CAbfQeXgDeHMg96F3NClqTBnxk0tAqC+/QtkAgvLSxOk4n/gESYAYtT
ZWITJMJAXeyTiX9giVnrFntECpukHjZsOh5tU9cMZn4yvL5BXt/VPu9wZhTB+WFd8Ba0hveq/UYH
rMMOWG50wJz9YF28j4O6Ce8Hd2tN78Pl4WTvEpcbGnI8fHivPoBdkBse4s1p7mB9sJH1QUFo2Eqj
H9bnr9+e617NeuHU6gMDHkzNQTmTnOGrgjEWZq3MDaxibZ+fsry61+gOf2C/0R3LsTu2sO5YTt3x
CnbH2kBB+jnQHeeo3bHn37hDn2FeD8Ev8l3l8w5l9U/oH01nPcY6LD/Y+ybUKDyluyDIJuK+4Aa9
5B89vdUrust3sGbN+YFh/47A5xuTPOgpc++LfbKpNjl1Baxf3IVkTjO+kmLmw+xjmml96deeTkqD
uyaxRXBymrU2LZPS3PZXmf2ddHqf1+3t72X4ZGzU+88wiziYpz22hdtfaCrdvwPv+PUziu93zxbF
Zp62HU2E7247e/TXu2zsUfnd3GbefrfFvKR0Guald6uNzSy824nNrG+TNvOeu+w4HmnHce1dis3c
eJcTm3kBRiMDH7/LUqmRnxuVOncr2czlzAec8a35Q+/34w+5+/eH3N+uP/Sy9Icm7/oG/KFkranz
/2V/6FWabec/rfhDhz7h8zELlpnGTw13Z8DTiruz4RPDH/p8lXHDll8rNzRhKaM2/1rxh56jtKW/
Vvyh2k+UuX35NhzKI++wmzfrZtjMm1/fwed24A7LNDh/pzENztxsM7fvu8PJ3F75vpzbtTPsOF5g
x/HLGcrc7p3hZG5f+z42yGszLJUq3mFU6qp2mtvbth+mP5Rp6w9lcX8o63/cH7pvU9/+ELhCi7Nh
oA76J3NohHvEHZo9GxI4SR9vSOAkRTckcJJe25DASfrtBhsnqYZdoPnL/COIkfn20CCn/tFb9v5R
BBt2PHwcpn+U9G36R+v+mcg/6nf/SPGPoEYm/2iNU/9IWT+Ef0T3z0Av6bD8IXa/1ZMxrrdMSnX3
5fO1TDqxz+v29veibWgRVz6p+EMPb+D2F5pGz0TfZ1TwScUfunGDYjO9m9FEuG61s0e/vcXGHv3w
Vm4zp95qMS/7txnm5fONNjZz/K1ObGbte9Jm3niLHccDJTYcm29RbOaaW5zYzO+9hw0y+xZLpdJF
pU7aSDbz1f+gP1S9s5jNVz/c6jcCG9905tv+INM7/MZ09g/zEw4r1JmYZDuV/Uk4leHjMKey55ub
ytNhKk9Xp/Kgj3AqM2Nby2YYa4vJfmNM+65jTXFzpncoa46hrFmUMU72WJnPUC11PqctP9x4x4gs
2GcG+2SWdFIm+8xkn9nsM9tgl2D+Z7P/Z7D/p6ItmKH4S9ph2gMN7MEkPyvHQSu0TNLczu+G+Cn/
sO63tx97NqN1mFur2I8JH3D7AV2hd36Md+TXKvbjlA8U+/HeJpwukZvs5ubNN9nMzbNu5vZj2M2W
qbZ4izHVXv7Ixn703OTEfhStkfbjFFuOS2604TjnJsV+hPpAlPbjk9XYIBNvslRq62ajUv/8kOzH
/Zu5/Uh1vMxX759tYxiqaI2vOvw13v3NGYYTwDCcoBqGXevQMKTK+YN1zU3XoaF1iKE6zeu/4p9V
gPMENdI/Xcl8qTL4s0L6UusgsRQSy2TiUkgsgcRSmdgAicWQWCITfwmJRZBYLBMfhkR43WlxkUy8
ExKhhRZrMnEqJILzSHK4lDgREoVbyRPPXZnAuTxuZQLn0rUygXO5Y0UC5/LDFQmcy+YVNs5lw4qe
Xmm/VPuJ+0PG01SM95i98x2mvfO5Enht0r/xufvy6VomDe3zeh/+D1mnlSHV/4lx+4XDJnMD+T8h
1f+Jqf4PbX+4rrf1f4rt/J/rDf/neqv/87Hwf9bZ+T/XO/J/WhT/p9jW/5lu5/8Uq/5PsSP/p4X8
n2Kr/yMqddI67v9s4vaLrapsxWW3pn2djd2JbntvhzZ2/Ye/sZv8zRm10WDURqtG7cR30ahl0/NK
+71Mq38Tt5/reufr+jcJ/BfyW2rZ/M04zPmbIeMX8CTi/ZMMt/1V8EeG93ndfv7eT7MzOaDM32Xv
GP4HjMYy9DVGrZqnzN+F7yjz92ra4vBPs5sbn0y1mRt/nMbn75PTLEN9zD+NoX7hezbzt3Kak/kb
Wy7n78KpdhwvtePonqbM38F9IMr5e/NybJC3ploqdfsGo1Lff5fm7x54LlPrcL9nou1+j99F+z3+
//H9njmrE+z3xI9/xb8Qq7f+t7cSrNvPvpVg3Q6/lWDdrngrwbp921sJ1u2r3kqwbo95y2bdTnsL
ehPsgWm+m+pj2Q//7vZ/aXbmzlXm76GoMX+hWRvX4h0pc5X5uymqzN/HYzhcq66xmxvfu8Zmbvzn
Gj5/37/GMtQf+tAY6veusZm/S69xMn99b8n5u6nIjuNPi2w45lyjzN8r+0CU8/e3y7BBeosslXru
A6NST6+m+XvRB9/q85jWxM9j8MccBiTz1+P/7u95C4yn6p0Z+fwxR+ds49mLxwXPXtzMZiQlegLj
y9qHY4g/gfnPm9BQ8GSkZlX5cdDqaVpNpDzj0Vx258a8rH07LtOq9w8oP8a4pHlz22aemxXZcS6l
wAOV01fA7Vrz5pHGg5X2iZp7df7pH+5IhisFKV+ob89tmAulrIEnLs2wcQnjqfa7m2+XraMnIFXK
85bH3ubzDZpG979rPE75ZZXyOOXOt43nLbMbjRvuV2/QsJRR91Upz1tGUlphlfK8Je1tZe6ufweH
6spCu3lxa6HNvBh+FZ+7qVdZhvnSdcYwf63VZu66r3Iyd6e+Kedumi3HZQU2HGsKlbn7eKGTubtl
CTbI5YWWSulrjUp90kJz94G1h/W8heHYLb9uvvy6/8eX36QVsPzyhawjeXkPnp/KfUNwXL2+Y7y+
7/taJmts1Oe7vENP8A79AfMUJ4PHCNt0/vjtfli/5QQEnxjfbJ3kq5rgmjlAS4lqoftZ2jaWdr+v
6lJMe7eFBbAtk4fCSkkvD5ve5wsN6opVt7uz1nF7ic5zbno7vKvbCROVtnLbvD6IR69mpKfjFm4U
gpom2LpogHHSwAqQ/rrVvAYGSQNrvIUMTGo53hYoqQ3+icI/TQwuO65wIvwoa75JnpHuwKDE7y8y
o5m1jl5oH3v0zOSsCNRMsUdG/eCfWFwlowyVVfDqTGvdVH/CVKKZv4+FHb6rM1gjZds0kha6jPfa
ZdhD5veR2ehomZzKuutE1koJasj4w/g5smVyGrvpdDZmvOwmH20w4HrUAjVi/+x2waqBv+lirDyM
FWM2nTH7QTZsw7fZ0KudwtZKtp58ABv/wbYbVvC/a97ifzN8CMKQQwbjMFxygKDXOl6ZLR97hPeX
8Lwfylfe5zwTWtLUH/BPJK5TYChkmvvC9P6Qdfz4JrNqXp2daIDC+DhaG+BV36KImooU/gL0U+gK
nzYe3649ha2r2FEz2Qp6mfE0MgmC+h3HPHpM1R53YFg6mTh0HcLD0rNWgWWbj2tQm+EzuHh7lv+N
tydU0zy+juANQ/1J/oGWD79MOwjkWfHZ0LVgr2D1Z8QeOgusaTY6mWjHtNZmqJ0+cTV5BdkFrAX8
kAsP30ngTqQxd2IZFrhKv/5depsjA97mSIXGywRfIpO5AGmBAazBOx6HXPyNjmHwRkema+aPWwbA
m8XzH3S7dtyPmeYsr2I+15wtNOdbtOZdg43B7nNpKbtzgpGcOe2uZLa0N+tH5gSbc+ZsdiXBXx0p
M/7c68aXRGampxUE2RLLhk8wOR1a9CS2EO4YRmTUV5XhxwvQzhqsjfL3cbDhkDMtZyq6WVowmh9c
nxPckx/sgd5KLYBtmvw5B/F1urkhxvfRqemlj96YXsKq7F3Q7H1jVUFKc/mVeXNXeee+wS7P3Vh+
wdx15efmVx/M8f78OZaSM2dFBDrK+8aKvMA05qbkefJb87ChO2oHwBPsqBuxstaBJ7YqZ18k2Tt3
Abs8d93MNK2LrXCxnOr2QZJPTtVud9UX7pxX3Tvum7tx5ql298ANRYzZzJMT3vGqO2vjjkyWDga5
awNU6EnWop257pbqbYNgIKXizz3wRmyZTkYvN8iuJuf8/TKaXzm97+RUf3UZW9MePD43+J/mz454
ixbFzdr6T7UzZ+1MzavZWjFQq+md+X4OG0jN7O4JMyewf/3ld2lB5qh61ucEWnOqPnUXeF+MUEvk
r9WRa80+ZOqt+Ts0YOCT3MCaDvjBTaEbffTmDuZ+RtidR+SnRKlOrD+0lGbknhP4V9bGnMCHHRcw
Qgwvx1sDryTleDYAXuxzgGSlMNTmJMyQF3g3x/NhYEXVv91swCWZGMztwIV7FkzdWempy3LiplJB
8ONcFg4M0XfijiC7L5fNkCH5wR0dL/MplLrsMmumvOCHuQx7iP46y5cH424Hq2foxvQhWMiOciyV
3Vjde2j295mLmxtcs2wiNPDwbVioft5rPb2LJ2DK5ur9lz14Fjo1zJXxvrFeW79Fa205xKC09S3a
mTNXpmopzE6wz/zbWhgUcuxYh437YV7gPSMpb26vd+5ctDasN4LN1ZvduZ4vylkvrppZplV393qf
bNZ62XBZ7lntfWM19pk2oCA9Lbi6essgiIvS9jW7Z+Zp3hf52NbWbt/XnIxXZp5j1xobc4Mf6C8w
pzknuD0/uDGneuXy3OCnbOSc9/AFue5/+b1vtBaMaXvAw2wuWJYMmE5N8BVneI53aJ5nR05BsG3H
0dptrbnuNmYT2P0/OYONbDZJ+FtvvbO1M7Gz+VQMFvp2DIG/mOHCIgqCOkUrN+bcBPuMcef9TMkP
Rpnz9yYw9171z5p9Dw1xf9H1iT+wO3+9nrWvZqP3sRi7VH3oMu/jrexLOPl7iy8H33F3dffl3qs3
BL9kcyQ3POzi6m0T8WfLwzvHtHknr6ju9pczI7c7a11BMLJjTE5wBTqLAfg1uta7ml1hEPC9a111
98QHj9NaI1Cb3MAG8D67YgWnR3YMYFmDu7Qzh3XR9q2WwuZ2chdzVmc/OCaXecT6EWP0By7Mqd4y
kR+zg87rlmBEC41s1U7/MHf4+gDze3UGUsAcs5Q9WnBYq1Z9h2fQDcZ5H8JeFrEFp2afd+5ZSVDb
y2cNxqV2QMdx7G+WHjgWpl2wMwdG47aJ3rknw9+oaJI3vDknuNc7920YeEuhDXKGfwmGj42Z4bnw
K7iRa9CA7NKCF+eENRbwjWMJHWBRUpjvPJZKYfZqLuyD57xJha7IGb4mLzzVk8TG1xoP/N6vtyUv
PNIzKTzuiKx9xnoZHnKJFkqm8llYk9vVnRMeNloLjViPCP/RUt7Wgvd0dbOb1hs3sSYMD2ER2DBi
sUVLWc4apkurbknKGfNF+QtaaIoH792eG4yyKytyFifxelbvd7M077wDYO4/Zv90fcIWKdqxMgZY
xx0vs4gzgvGlyOmd+zJO6uVY2dzhzVmRfcsHzDwD72LJ1VsGZEVm1OaER7JZOvILLThyBZuSY5aX
f8bi+Pvn5SyhcpbnDF+uhaeuSAWD2ducF77RNYDZYVcSi4Zcl4WHuLP2zWD/iREeHpHJ2mIHa4I9
enhElvG9MzxitPGdNdiIi+mPEXtYGyTnjNlT3tox9P+Q9x5wUR3t2/AuoGJdNBbsqKhgBRUFKyjo
ohjRqCGWxN4LUVASSzSAYUUsiUlMjInpJqaoiYodbGDvvfezrr2BIuw398x9zswsW/T5v9/3vs/7
Pb/fE9y5r3NdM+fMueaeOWdnSXciHSmt7Y4wa3bXtPK7IIcIfKb8/j0s/w/1LMaGX6Hdar4DvWiR
Tu5Fs3XQixLKmR5l3ob+E0dmYXGtTA8sofQE9jc//j3fajqcc5qeHqH+LTzhdJgOkROSZ90TcmTy
XUtV+EpwG7h9DD9PI+HmcFPdNB2Gc0ZYy1v3knzsBKsuZBC5y3mN+9vMH6R8IThym5acp77naSR5
AiSDBvpVqziSmOSaY2GETz4XX5pkYvQLWEnvutPk1ctSmr63Br14jxtM3Jg9ddBFblGToMjiu9h3
EsnA4x2ZcyGy1gFLEfoBcjVYZtUFZoSZzofN3nkgz2qlyVOYIXI/mSNTZzUdNPR4lLbS/aXVmpgf
auhx2/+AwaikJbpBQW7ojOLJd+OHmEvCDXs3LjwtcWcelLcMMz3b2hLa22N3lGmcr5//bnBsPyX2
p3xruOkZ+zom8dT6vM4kTTaGZMfRlSXvWcG6ePdI6yHafkJuauEbbhoGw9g4X5/0diSh8z8NqTCp
+7bmHnD3XzKaBpAh02DMjUibGhqWc4kgPcJMd4lNWJpJ/ZONGKQ6AeGmm0bTGaUhyZTDEneRNGBn
aFjibvL/rIxw08PETPLfXLpqZjRE7qaHhRmMJw3Gg4nPgz5KSD5K19Fmvp/WosQ2aKz/ocSCloYe
p0yHMu8XTWtUgrg0GUQpwSY6VQ1/bCTjso/xmEV/L6RgSuXkZ/EVaErtfxDGah9qz8Sg8mBpwIuu
MIG53jRaDxprPYYud83ivpCkJIn5YYbEFjAoYzPCTbehJYPX5VtJruypi0olWVfkNvXczhxMz+pc
XVJGXN9UcmLcG/nS4cffQpLMSU2i0ob5BsjnRx1Rb5nuKSWAdkdG4q7QxLzQqZeoKAJM90xnldtr
qWwpHcwEvBJK0NzcnE5o0uHi+GdvaAVamVGmR3FDA4/C2RuQvCehLjk7cWVJIfHDqFovLEa2PmAp
ID1WvfqWeMDvm94ozbiHnlc4xgAr9sfukYhVH1fOUoL+g5TFFY2qVWA0PUozWonGFI/APZZikYYf
Dxo+zUzMhc8Z9PNuw6dkTnPU8Pl2z+0+R2hlSdJHbDbek/gf/R5x4FF43Gh3AF/Yhz5edDWCZ1M3
6mBYAPd3WqkadKBmS0CPyM1l6HGW+hIM4ySDC8u8BxZlO5DfVQfyLepAfsNoPaAO5DeMOSecD+Qn
jXUaaQM5G4VCTk4JiCAdryEbwjO0IfyyMbWSsdZ2Pn4DDR3+i5HpzkCb+Q4du3kHM6Y2NKYzz/Eh
d7JCboTpBnKDRxnCc6NMbcx99XRET6pO/iYEmnLIhSQ3GLmUrU0vcs4aj90lA8GxMLqoEuafS8fl
G+TfUXXamG/RE7nXsMBHD92SrrGbT5D/UNvWjjEk/Qvn9nmY6XlYzpnAu88y3ePqU4j/88Qr7oF3
tfqnlW9KxuFjZJC1GK27Qszx98JgvJvLMoswQuFvNqZFWch4d9uYuN2dXKLW4WkDmrqFp8U11evv
Eyp5vFP5epsVkgg0UT88IB8aqh8gRWiAsmZj4i4y4pnjd5nLwT3M2hQRSO62NmCKjbZQN3mamB80
1WfEQvF+JGMLuR9fbCH3G7kZ81tOuqoNibSbmnKI8T2HE1uZnGLoIqZGeVG12lh+5fW1FNiOR9Cf
9zrqz7dZf75AL0OQYcFxHctIaR1JRtoSMlLWlT1IV96NXdluYkr68+H/qD8fhv582EF/bgb9uTGZ
bPH+nCn05x3Qn28zGtafLe6wZiSMPPAdFtrJ7YzPfDUpdSIZn/Pp+FxPHYuTk93YWAzrF/VgqHWP
CMwg9555HATI6MiH7X4qdKumLCxWZIYb1hmMsHHiWWOtR92T4bsmR2C646eN1BGBR02W2TtgoKZP
TwyRxxJfBNCHpaaThh4P05LpOJ0bYOiR6X+YjFXb09LoQP28KTHQz4/B2PxCb/huOykgk65IQ/ge
mI+VDdxDpvhRhohMqDds0gX33696nK6ScbXahsbg42Y6Kd7KBlySWZOxmCYaZNR9GpE2k4y6F8NM
u4h/liKjLiypWPxIflZovLV8KY63WTDmkpH2OR1vH5Chdpc61J4yGA/AYDEeh1rD/Fk0P3ut4dZP
HW4bJj+jtY33FcZcP23MtZTG/D7wnKVa4F3HQzAbfesVHn3f+JIOg966mUPo5hJ0uH2bDLel3Mf5
em4KEMfbOEfjbQ65v/d+4Xy8/f0LKlSNjrc+CRXpEFZoyJLHXrbctkXtzHHj2Dg8nIzDPtQvGIDM
TIT7Yq8lYsRCSwEbgluLQ3BZI8kw/LRBuIalFP0HLY3zEjkOygNyKXagPCprhQ6HZkNyNTjhZHiu
pdAR2lwKLjGbT766fzXl/hWA/hXwX+5fOqf+5R1uOhBh2knX3g6TiuKqpFfk7Fy2IHnejS5IRkfi
85Riukh8POyhg8HILyr5NBtbk47GvY21AIawWU/0obOe6sNW682w1BiRdJ3NTEKTyJQg6Wj8u5GJ
uYGGj7vRBcyMw/SWXpcRkdJdXsBsxQ6Jq2jDTXgDj1raE9o4XzEExYF3LXXpWjNcBpoBWMoYc07b
YCICrxtNu6NqXdzUjCC08d+6LzGvGaw2lqbrjHCRbhlrZSWfY2uMl9OmHUnMaxIXn5gXYEim69Cm
tr50iS3U8wQuNBqPKCCW/IzqxTWkz8u3NrO5m7ubditvrsq38nPb3fQgLOVeeMqNcHLnlhLOdGpb
X/M+OFKfQc7S/si0SVZjrd3G4gdh/dQrLIVkHbAQuQJ6cV5gfBytT5jnnYiUm2GeJ0NTdoXOuqEX
ViUzFTexgs2hDaySgYUquVP57W9YcmzrK1b0sk0VLU1hAdF3Y1O4L84akjrBrnwvmhvmbaRcuPBv
hq8F06XAWxFJ1rj3qBHi8t9TtvzXjdzFkbW2R5Ghzcto2Hg5YHJI5JHbpJvREra2V/hcRpl2RZgO
Kta/YJGTdGMlccdR0yVyvVoa5kPmGa7PYqt7GVNKsdU9QzLdT4P0N5sVPvNOSC3JUDef/E0+muBl
OgKWVozcc5a24HeJLw58VFJrkiXAdCTnjOkg+AKBebJFH1+vxAJ9fGkNFQgpN/Y/KzGjZlPrkgSb
XMudLLlmi6jwb1hGJS0vvpteWrrOmEHXGTPkdcaP4AEWmU9pdwyuM3a3WWf0lpZDXi+fa8b9sDn6
YfP/cj8s9mr5nP7/1HwucEOgbT4XWCifC4B87qiQzwW8Zj7X5H9hPtf/8/8787nExU7zucBXzuda
L3aez1VZ/D/M5/T/f83nArh/BaJ/Bf6X+5f+f20+Z9DyOc//BflcMy2fO/S/M59rbpvPNXeazx1O
zGsK+Vzga+Zzze3kc+1X8HzO4CCf83zNfK7Z/ySfK5x07lS++lXO5wyF8jlPLZ8LkPK5Fv/zfC7Q
bj5ney4xn7v/C8/njvy/l8/t/x/nc83/x/mc9f+DfK4598MW6Ict/sv90OA8nxOfmtXWsriJQhZX
27CumDHxgd5M8zXpQZrReQYHB6oJHHuhuVACl2G6MHuXkMCdIAkZW0c2HQk39NiT9g9N4Qr0JJ3z
P0lyoAemM7MzIYlLqAHD4Hfbk/fA+w+G8Gy4l0q0gB36zatwufxHLWcb51stvcAdH3t5E/PArO0i
PPbykRK2p6Qbloow7QdL8bTUW1goX9v3w/+d+drj753ma/pXztfgebOzfG3u9/9hvhY3hWVpE0mW
1gDMp479LK2H+Hzh/6B8jb7Iy9K10uTjiNfI1+AVIdKlF+xFe9KjPen/S+2Jngh8Mmaz37VtvkaT
taNappb4wt2Q9DVxnvC5Ub7R9Cn4Ci9D0hqac+2J6w0nuSamTQ9oSha6Tm/+jIbJPC4IU7IuBBzf
kbJ9XAtyssTtbmGJV93DUuLJaN+HJ2RemJDVsyFep48g/aG9Td5Vj4jEledQBiMJWoWc07ZlYH/b
E696bfIQ87Ew08WwtHetiXkeRtMpB0nZOeI5Bcnn4lom5rnFR4NhhXse4LkYCCUfZa/A0pQtLOVO
eMou0klLma9oWVV24uUa8EY6bRFkVBEp+83baUblbkg2kX8AcZinEpGyM8Jzv92kSlAiNyPNVNwL
eUJ5X2UqueWjUsv7QhUsgxnQo1DmdTzc5OGrdCPY7qarpM6pjdgBAWGJBZBr6THX6kJzrSKGef9I
uZaHHvKb/REpWZBrvSPmWjdYrhVBci0oqUnfAV7hEdfC9NR4xLzCi36Oq+WoYieVdcuhUo/IxTHd
Ix0+roVhfiZ0Kf3JsMSb7t3JfVAiMrGAnLeN9HTH69Ld5SRrD/lIiMxfsySrKkuyykGS1WWE7FeJ
L/IK51uqc/F8y2qbb6n9C/ItDzXfysB8K0vNt7KMdeAlyuJZdGTsPvQZb8Pkqt1J06gfe5EblN0K
8STTiiCZFnxynGkJv//3Sn52jOZbHtzQiqChFfmvNbSa9gxNzbeom/mEmQ6ajkWaXqZD87snXycd
km3hTm4R33n51m3RsIvJxmXw6vku+sUlo+m+6Wy46aFy4lMycTI1ovuue+J3fhZVdtPFGyAd2+kD
14JeCfwK0LzKjr8CdACovZSrc/KtlsxI08lIU5alEf4tw/4SXWXNTLbzuypXm1AakgP0MFsgGVCB
e3yM8uZSVtfU6sO83UiaFHS9m163kf56I+z/uwAYIsi/71ujvQCXfNeQtIxG7yvl5kC0XUM40HTP
aNquxBI8ffFFefY15SUqbvGRhL0oY58jsne0wx43ApjTkynzkUoac0WCJcaT2m5LJUpUCYjqgtLL
+STSxWjaoXRcQtQXAnkquaKhijGtrXtqnLtP4kG9cvNzgqoFqGoEZRlvB7KDQCLxjX3l2Zf51vQB
5BKY3yuAX6al1yS3ksNrYliwAnDkungrXUntzV/BRyL355fsC1hP6YnOUvLrF1glvxD6Vyy5dqbH
pH9twf5lSGpFrtYWeN0jMnGzL+Tr5ArWge/qpW72pVvmNF5MjC2VxSJNSfRvdzLE+EaSOQS77g0q
wXV/qaPXXflmOmlmKgPCu3PJMGPaAp5pOk0GLcMnO2m+XNojUq8zDvWYbdRnWy+HwRtrYaai5p/B
HsmHGPiwhCKDdgOS3AeDjGm9fWOUqiYiwD7G+Q5SBpjgdeSi0BEHWQYQ+E8Ijwa4UbmTIsCjlcYc
Hm1pTODTER4K8GBliwgPVQpSNHgoNrdNRXJXGQPvUo+Ltb2vWlR0cg3P4zUcpcxJJNfwAL/0+RUc
346L2SFvkUMsKez2U2+weOUuXH/4faEsa0/66rsXtMOT7tf7CXEMeGlSSflKcwwv6P+5M+EafYMX
9Q+8VufiqkG3Za3sUwEu6go9u5WyPmS3upf5IvAl0FcMyK03XpL2AWlvkJ6qSZfm0j4gPcO19Nny
IN0ZpaNQ2scyAr4H2oVdrQCQ8lMMms7PSzSdANCp4FpnEtXJQbe4/gHTCcBo7/Jgnkp30v/pDWIu
xa9Wj/JwtWL51RpnHkai9F429yP/QZOkfdKbf4i2lOQf1P5keYNUI6kBZ3/4BuyGlnSEiGoKZhgH
hZ40zKr2pLazSU/qY9WO/geOjmvH6xaCga9poCMPtFf3P6eBLjzQSRAqyFeFjs0iQvfJRyHaX+vQ
ayEaVSBFf9aiX0L0CzkarDF/AFH/fGpo5hv0euywlISvupILGZWAXQ9P1+ZycLrgtT+s/vZy9HQt
kU7XIsZi/seGrWAq9iZkm0DZ0jhbHLDFjeEnYwTQpNjQrJ8qd5b65CgytDCKQErRiVN04PdyCdbi
Tz7KtyqPFpEbumWh2FiInYRYlUKxHhDbuIhZvtsXzPJL1C6w2vg9fuUsx2jKC9sKZk+6viEJWhG2
9QRt7CZq9vEJxlS6S50SMR9atJLeJqZEdrfcjfOh4ydrY6ey5IboC63fMAWwCMqIb0G/vAY3ZECU
qUCZlsi+VB0Mdby3mJ2oYCQp8CIkDSICn8FaCPuql2CeOV5w5nz5mfPBwEUa8OeBukJHGo33QqgS
QG56cz+r0M2YeYYqFWeCeVpI205AFlON/RVrNswL3OAflr0k5rvHT1IWfWrjrTQTA3/78mPVd2B8
FJIxZdkHMJPZxM7jSnW0rMZHy5cG0GnGdJQJ8ZhDmc8AW02imJjvFj9WkvWGc+sFujU13bWfabre
oFvXlW4S1b2Do/SzOKbrbRkGPwHRkbmqHwj5KBtmqyo9uIofqGxLcKFSg6p8hyoLUcUPozoSjS+h
PCd9zZyXr1kWFDsa/I6y69eXZBWW3Yg/XAbwfTm+FwbW00B/HngbA9/SwCAeGICBZBoYzgOD7bhb
qHJqWmF3O5GvRjdAdLfsjF9qxy6FaIp87CUtOgOihwvse1/0ZDnDziht4327S7+C93nDh+34IQKp
n07CDqDu/0WpZ3HqsUAdN5CfmXfwyE2T5IvasLTgfUGlXXhfqJJKBnTl2Tw73heqTITY2Xl2vC9U
eQtiW+cx7yu6iHlfmeos3ZXnl/gTVlvQ+eIGbJFMr7tqetEm6M7/CKYHE9yakalFsW09SpEO6w+7
Q+x6X/K8EoF3oRqHJuZbaR4YSmd2eBICSjnuz/9Qa1TmkNvV8itxIdIIMJvJiu98h4mc/0z1fty2
QE7kmsYLDVipNqAab8D8knA/tqJuk6Po3lfTOOo2q9PsuQ3P4lbPUHW7LJCzuPVxLnQrUt3TOqab
EqvmcOA2h9pJOVw3TeXKfDmH6+lKZVUJUElFldqx8qD8aQmawaXOVTO4XjzHSivhYvobrFybCtNf
xA8s4SCrCi/hIKtqWMJJVjUR7/9gZQZRMQ+S3WGPFn0PohvlaFmrGg2DqJvVvneUnyjnTUnFbbxj
bvHXyJt2T5DzppbFbfKmtsVfJW/6aIJ8ie57Ct7x3NOFdwQrPaZA/pNixzuCleYQ+zbFjncEK5Ug
9nEK846985h3HPUm3rHwdfzCJ9mFX9T0VP3i8/H2/OK+Xb/Qebr0i77xtn7xxOTQL55/oN5RC1Jl
v7DGurij3i0m+sXhcZJfzDY594vZmm6lVNkvPnGle7Oo6Bcx40S/+C5E8ouqmsrqubJf1HKlMquo
6BePxsqdcUhR6hf959jxi4FFXfrFP5MFv2hc1IFflC/qwC/yirySX3Sf7Mwvmk525hdlJzvxi+tj
ZL/oXcTGL/oVeQ2/+GKM7BdFi9j4Rakir+IXPcbIl2ibh+AXezxc+kVNkqsoc5Ps+oU7xCYk2fWL
W2SgVHolMb/4OoX5xQ/lmV8Iz5+MYaZDYabjkaan8kxrfuGZ1kzVRM7NcjXTOuNOOuIg2v7Rkou0
Fmda95SyU/hMK9x0Ndz0XPlrhjzfmg9UTcT5lrYkj2cx0d3BnGuMu5M513vanGszuenM0dKcayGL
/EAiliRnc64HboXmXNWTHc256sSr9/2GOfKcy3+ci1lJips453oxUppzrUxyPudaGafqhnFdOuda
PdaFrpebOOf6eKQ459rTQppzRWgq55LlOVc3Vyq/68U5V7WRcno+T0/nXMmwTJTD51xQ7GLOdXWC
MOcaoHcw5+qkdzDnaqB3MOcqq3+lOdfQCc7mXBETnM256k9wNucqPsHJnOv8cHnOFaWz8cFeuv90
zjV7uDznemjVy3OuHFJgd87VZbh8UdfDO6mqD2bSo5zOuSqNh/znI7tzrjxy9ygjPrI757oEsa4f
MR/8NJH54NcGeb2pcP40SM6feqrWd3mai/zpUoFeF98YBuc+wyTnK4MUgXeVfbH2cqjNBXqH/flv
ZurlSGMsP4o51KpZDnOotbHq/djtYzmH2jTSRZZRhVSF51Dzhko5VLtZznOodprusdlyDtXJle4P
+Xohhyo/VMyh+gdIOdSpiarK+NlyDnVhhAuVtlRFzaH+GiIP0DVIlORQlWbYyaEq5zu+RJhDTRwj
5FDml3r7OdRhGrCTQ62nAZc5VPExznIoy2hnOdSB0U5yqOWD5RzK66Ve9o6KUMFXzaF6DZZzqO15
ejmHys7Tv0IOVXKwfImm5QnekZznwjuClXOjiAd0nmY3h9oGsQbT7OZQP0KszDTmHX0/Yt7xbsnC
6zW4Xh0splBxI23Sp7dVD/lmqqv06esXpA8GQdO9Bkkm8gbUZP9gVqMn7+VbtbwoWF6HnvjCcU/9
ld4qyq6RbDtO1UwmKUOnO8pcRo9T7zbrDDlzmTjUxdh+8LleyFxC35Myl4fTnGcuD8equp/MkDOX
nCEudPtS3WOYU2S/K2YuhkZS5pKqqdSaIWcui1ypPMgFlTmoMuRdeZA7SqIkc9mXAA+4uI1AsdPM
JUDxGyFkLj/kOrARU64DG4nNdWIjcWgUAcp2Miibh8tGcVCL/gTRbXK0olWNzoFoMQc28s5AOQXZ
k2NjI4dyXsFG7KYgBQPkFGRCjk0KEpfjIAXZOUC+Oi1yBBtpn+PCRgKUxWRAV6xT7NhIgJIAsWtT
7NhIgDIAYllT2E1rmMZspFKxAiu+zyq/rxxmOhhmOhVmeiKmI2PkdKS/aiU9J0P/XCmlI8RKIrmV
9HhGumDbKNL8Xf0lK6mk5SP0BdkX8ApOr/GYmAQXnmVVf+a40y5nDZ1MvMCyWHSUsgmOHKXSKPWe
+/MD2VGqv+di/J7+VMxO7vWTHOW7qc4d5buRqm7QB7Kj/PyuC12Pp2J2MqWf6Chb6kuOEqKpHEqQ
HaWDK5Vvn4jZiVc/uc/OekKzkw/i1OykO7eVaU9cZCcBypHBQnbS7YkDW2n2xIGtVH7yCtlJgDJ2
sOPsJEDpPthxdhKgNB3sJDtxe0e2lUmPbWwl4fFrZCf/xshO4vvYJjtp8PhVspPxMfIluvBIsJVb
j1zaSjsyxCsrJtm1lVoQmzfJrq0UgVjsJGYr6VOYrWS4FViF96VCI1Ur4XnJaJu85B3VTDwmuspL
3Ehr4kOg0QlvS2ZSATmIlShbYuCFo2JaZhJq+4LRsYeO++mPLPPyJx5g+VKc6GRNdjjR2T9UvdmG
xMsTnaP9XAzfgQ/F5OTHvtJEp/dk5xOd3pru7Th5otPPle6GB2Jy0rCvONGZVEea6NwboqokcRU6
0XnyjguVtx6IycmuPnIWHfSAJidNYPVLmONAsdPkJFhJHSgkJ0UeOHCRO/cduMix+6+QnAQrdQc6
Tk6ClWIDHScnwYp5gJPkZHNveY7T6L6NizS7/xouMqG3PMe5eM/GRa7fexUXqd9bvjpf3hNc5Pt7
Luc4OWR0V4ZMsDvHOQexzhPsznG2QazBBOYikyYxF/mwIN/2fRz+/XjTwchC+ckEOT95T7WU1WNc
5Sd/3yW9MBTyk7pvSZZSFb59JOYoUaYXUSRHKRjrOEf54K7jvvsNc81D5Na0LBRzlPETHeUok99T
b73i78s5ygd9XYzip++IOUrXXlKOkjfBeY6S966quyhWzlH0rnQH3RFzlKM9xRylck0pR/lcU2kY
K+coS/u4UHlhEXOUcT3lAfC8heYoJ8bayVFOWVzmKI3fEXKUXy0O3GW+xYG7xFteKUfJinGWo/wW
4yxHSY1xkqO8Gy3nKAdv27jL8duv4S5e0XKOMuu2jbvMuf0q7rKnh3yJQm4L7tLptssc5Ssy3Cse
Y+zmKDMgpoy2m6MMhtj+0cxdyk9g7lLtRb618Pvd/5G/9Bzhcv5jVv1l15uv5C/fvufYXyqbXfrL
xL62/lJ6rCN/eaO/egf+Nk72l8q9XNyBCYroL7e7S/6ydIxzf1naT9UNHCf7y/c9XejqFNFfJnUX
/WVDFclfgjSVfWNlf2njSuXrW6K/lOoud97pt6i/xI+04y9Tb7n0lwO9BX/pcsuBvzS55cBfKtx6
JX8Z2duZv0T2duYvDXs78ZeCbrK/TLhp4y9xN1/DX1Z1k/3F56aNv9S7+Sr+MrqbfInO3BD85doN
l/4SQsZ+ut5kx1+qQyxluF1/0UNs3HDmL/+OZv6y+elr+4uj9ZWHg135y/3r6vrK8K6O11fQWybF
OPaWLdddrq+80ct2fWX1CEfesr6vevd1HyV7y5buLu6+atdFb5kfKXlLhxHOvaWDpntipOwtEa50
f7omekvFSNFbBlaUvOVMH1Vl4kjZWy5FuVBpf030llVGueP6XKPeUnmoHW+pes2lt7wfLXiL5aoD
bzl61YG3bLj6St5SMtqZt9zt4cxbDvVw4i0/dJG9pdxVG2/xvvoa3tK7i+wtO6/YeMveK6/iLaW7
yJdoxhXBWz654tJbLpBxXzEOtustmRBrNNiut/wMMS981hIznHnLoIf51v+Bn3w/0JWffHdZ9ZMK
nV36yQ8jHfvJ+Msu/WRHd1s/GTzEkZ+M7KXecflDZT8ZH+nijtt/SfST9hGSn9wf7NxP7vdUdZOH
yn7y1OhCt/cl0U92h4t+Urqc5CcmTaXmUNlPFrhSuXdR9JNB4XJnPXyR+smed+34yb6LLv2kVpTg
J0svOvCTjy868JPRF1/JTzZ1c+Yny7o585OPujnxk16dZD/ZfsHGT7IvvIafeHSS/STugo2ffHjh
VfxkS0f5EjW+IPhJqwsu/SSNjPNK7gC7fvI+xM4PsOsnfSCWMYD5iedg5ided8FPXv393UHvuHj/
5L3zenx/90SY5B/4/u577ey9exJ63nFXxPd3v4i0fX+3xbsOl2RD3tSef7wnL8l2iHD1/OOc6BZe
YdKSbOZA50uymd1V3be5Ll2SzQp3oVvvnOgWS0LFJdlLpaUl2f6aysN35SXZwa5UMs6KbtEsVF70
++EsdQuYnxV692TZWZfvnjzuIrjF+LMO3KL3WQdu0ebsK717ktbF2bsnE7s4e/ekZxcnbuHbQV6X
XXzGxi2+PvMabnGyvbwu2/mMjVtEnXkVt1jQXr5E1tOCWxQ/43Jd9j0yiit7Y+yuy3aC2F8xdtdl
60Ps0xjmFmcHMLe4quRr7++qz3cORZqOS8934mye7wxTvcO3j6vnO7VJ4+LDodlL2knm4YMcUTT1
UFqTfvvscLhh3YOwzJs1wzILajp41KOcctxpl7CGQj5gmSf6yvl3HPrKlUj1zpvaX/aVW6EuHoZ0
PiU+6klvK/nK6Hec+8poTdfaT/aVia50D54UH/WEthV95ZPikq+4aypf9ZN9pbgrlVEnxUc9Z9vI
nbbrSfqop1Nf+VEPFLt41LO8k/Cop8pJB5aiP+nAUpQTr/Sop3UnZ496qnVy9qinoKOTRz1HWsuW
EnbCxlK6nHgNS0lsLVvK4+M2lvL8+KtYStvW8tX547hgKeuOu7SUUqTFytTedi3lARkvlf697VrK
cYh16M0s5ZMYZikLruez19n4egn8eAv80nVq9Y3HoH8G1S6m120Mp624pPxFlznY3iCp37g/QNfp
NmtasC6uyNxOnSwVATY1hMK2lmCHWaMDDFsfGFPbjSSUykYUX0PS28CjgXvIWIi/UWLeRvJtZUzL
Qs+f7H8ffJ6u0LcUpqt2FxTtyu6ak7rE94NL8luwZHfB8vfBx9IpC2VlZ7IEPqxTvwVw+6jeyXfC
rx3V2/9+wl4acPD9hOFW9WXvauTmN/e12vlOuFuoq++ERx/V234/YUZvR3O8xHDVfyr3led4pjYu
/Ec5Irprv1bSHK9kb+dzvJKa7vd95DleWVe6sVRX/X7C1ZbiHM/fQ5rj/dxJVWnDVegcb2VrFyol
qIr6/YTpLeUJxJ3D1F1vRMvfCYdiF99P6NhecNfNFG/n+wk/0oCd7yfMpQE73094nwZcfj9hRztn
30/4uZ2z7yd80s7Z9xNGt3Py/YS2QfKs8I9DNqa85tB/+nLglRbyFLHnIZuXA98+5ODlwF9byBe1
0iHBlGsdcvn9hKlkYFeuvmn3+wn9Ibb7TbvfT+gAsd/fZKb8qBfzxRcX7fpfcJjpmThJHC9PEt9V
na9NN6E/J6r9uSbvz60PskUmq7KqufxQjO4XHpH8LKGssNz0TAkJ5QtNorV5HnS5yPRuG9tFppc9
HBkQ+Bm7RZf0lA3Is5WLidXIA+K08UwzyYDm9nBuQHM7qLo+PWUDWtjShe79/eK0cXAz0YBWwI6+
3IB8NZWN0bIBNXClYtovThvzAuW+OnY/nTYOi1KnjT15jjdiv8tFps0hwrSx5X4HOV71/Q5yPI/9
r7TI1DfE2SJTcIizRaYqIU6mjXcDZDsZuM/GTobue40c77sA2UEM+2xyvAr7XiXHiwmQL1H2XsFO
ju51ucjkRxIS5bOudheZSkFsale7i0wPWkH+15XZyY9vMjtZeRZyPHv7qQ2imznlSBuqwcbtthuq
we6+2oZq5zuLG1MlaRtT+fKNqc7sgf66GFPGbk2lDdXiY4kdUaOJGwH9fDDf6wyyrXyYvGjbmUUR
97G0geOZOjSTYkOVnzqzc6xuQzVsD03nYJcqLOkFJYNxo7NBtpPTbnsc3hqGBeHY+WKUZeTmNAdZ
tTuq/B4H6Vxe9iukczFK95a26ZxhwTtatClEu1rVDbgsbS3P8F/VCm+8NSkbTvO7cFqEVg+gpZnC
LobxSkpXh3PqtNaqLdWJkufUnwW63IHsQRZotcWdzoY0VmfVdJO1N7q62GStnCa9ops8rfZ2LR1P
pR9jH7vVSJ1YwyZrTV7oxIn17yGqTijXoRPrVQEudUpTnZ9Q56NG8uTt/m7qvUpn1XsX8gzw9m4X
3hujhLYQvHfjbgcZ4Pe7HWSAKTTwAQ/Eq9//oYGZPPCh0Nt6Fqi9LZMM/+aOsu1m5avRHyGazttT
ZbcTp5+qkY6Dw0bJpJla9E2IrpGj7TXJAIg2dbCRmntDeTY/eZeN03+w6z9NHFc0kKf23rtsEsca
uxwkjhMayB3i4k7B6ZWdLpw+RmlPUgblt3A7Th+j1IZYWrgdp49RikLs/XDm9BuMzOkzj+db5e/3
x7Dnk5GmJ5GmfDT5u4ako9zkt6DHb6Mev4Va/PNQuC2WsbsiWb0p6vCbIncH3BTL8KYY4w/wZNXf
E8g4wvx9AiSeo8Hkh4mWflPxbglHrGWOPt3XyBz9aifZ0T8lKvGTYO9xMjJYo0yPlOUd862ddoe3
t1LHMyJuDOCGos/HFH4WOniHE6dvg94brfxDzMDciDt9gx0OnL7sDidO313jGwp87WWnf1uLRkDU
SJMaMmvfTRI7tvx5IdyhVV9tofpYQmfZqpWGwgX7046LddkOFywBjXpDfWn5c0y48+XPMZqurrPs
07GudA9lgm5l1A2rLy5/pjyRXNpDU/k6QnbpEq5URlOV/dgdz9WTb8luJBofrYSHqR5N7hKrOblA
PfVil6sJTEkTeQJdN5N6yjXJU85zYyiS6djk57Er3b8JuYNnIf5EhoMEe3OGgwT7xwwnttukQO1P
T8nga64pG2uKFj0F0Q/k6GEtugGimXJ0bL4aXQrRAcyULWNER36/ruzIV7YR8zOq77/Azu5xdXm9
YXdh8xp03lbwIRM/DLKxt2ilfmN4/kFmTOYfGIZ+/6eu7NKTQG4Yyk2ncmFcrh0etd9X7g5t4aiu
eFRnelR9flSdQlX5hgz5SrEOdlw4WpkFMUt75sLNOzEXbnOocL79+vtZxrdxtX45ease97M015Gm
8Tb7Wa6EyUga7mdZ0Eheu2yy1dnaZf2tDiywzFYnFsj3sxzU0NF+lp0bulq7XLyl0NplZgdHSwdZ
TVXzGBgmLx0cqOdida/RFnHt8tva0tJBjw7Olw56aLo3QuWlgz6udP/dLK5d1qstLh2Mvy8tHZib
qCofcRW6dHC/rguVNzeLa5cZteR5acBmunbp31Zeu4RiF2uXc/yFtUvdZgeZ661NDjLXg5scrF2u
3fRKa5fF/J2tXZr9nK1d7vNztnb5p5+TtctZPvJiw4ONNinos43/aQpa10deefh8o00KunSjgxTU
UlO+qP03Cino8I0u1y43kVFZqdfa7trldxAr0dru2mUixO6FMPNr2Z6ZX/u9+Y72R3i95zfxLV36
3wb1+Y25hrPnNysb2jy/eeEje2CDDc48sM4GBx5YYsMrPb8ZUM/R85uO9Vx54ML0Qh64pbUjD9zR
QHWJd9rKHrinlguX8EsXPfDr6pIHdmvt3AO7abpX2sge2NOV7qr1ogfWri564Ojbkgfe8FdVprWR
PdDi40Kl63rRAzdXk2+XRuupB9ZtJXsgFLvwwI99BQ98uc6BB15b58AD965z4IGr172SB7r7OvPA
G3WceWBWHWce+FsdJx44varsgXfW2njgo7X/qQfWqip74KK1Nh745VoHHnirinxR314reODgtS49
cD0ZfpXaQXY9cCnEigbZ9cCPIHa7BfPAZiHMA1vvcvb9yeN0xbVgA5uMPzMkZdCZ919ocYak76G9
YHOpCYpSUBV+FmUXvCc8xZg6UJc4LZecsrMJ/nR/EvqUfaB2dGofXeKHubqEUhCMo8E+OqN7L8Xo
fzauZJTpvtF0UalGZ1Nz2AE6eJAftju8CPx4TyNfudyYmGuN94nMKgbNUH/5Y0MY+Y/FoH4MzIg0
FQvcY8q2fQ3ZdAye+OSBZZVo6ciyvOqpN/UvrWTLqlgdavktm/P9ZW/97x/1iQ9d//OWLGsJuVrw
01GOLGtJXVW3SSvZsr6t5kI3f436xAd0J3qLlrXuhmRZzTSV7JayZQW7UvlyjfrEB1SKe8u9+4M1
dNVxUrN86wY6o53BJ6xxa1w+8dlbU1h1DF/jYELacI2DCWm5Na/0xGdYTWdPfDrXdPbEx6+mkyc+
eRVlAxq72saA3l/9Gk98/qwoe0711TZPfOqsfpUnPiMqypfo5CrBgC6vcvnEpyVJYZTvA+w+8akC
seQAu098Csh9oowOYAa0ugUzoA0Z+dYRdvxn9h0/PfwA20mj6bHRlB+VNsPT8HaGoWyEN/zolTEr
wk9HB8kZ3uT/ZJYdEQC/t+UZlTY8mACM5P/BBBTDQMON5P/RxrQZg9hPUO5V1sCT/bRkmmiZPHwp
NX4aB+c3qPo1uD82+3rDXZu2mP6unFIKZj5pQXohpii1YBOJXcbUJMTSc/rx33BTtCReFUHsMJYc
tPMSO4i+hkQIFbjZNsEkJ+1fVphKqqaEVKG3X1aS73Ud+x/Er2PcU3kOi7gmP5BjTFTujb/hR+BJ
zeMmma94QHFQb9TzxAbAr98q3VCPFoIePUjZWZk6NxF9KYi+pP3mvjKHSEYxSU/ewuV/QQvjPPgp
y7vCFE9jCw9DC8/40FN2UIgpa320U3aat6EHJezkwU/ZdxfZQauQEH5iWEnxYU1YpZ2yopXVU/aT
UPuftFO22187Zau43OU/+Sm7505PWVPUy0Y9GO0Ub9TL1kmnbJG3eso2C6Kb8ZS95a+dsmwuOf5P
aOFsd37Ksi8zxSWouJCOLzXpKVsqxJSPa2qnbAknrEYJo93ZKXuXHDT8ArP1WLD1UUr/mmw9JZad
qfOV2JkK9x2m17EpxjB2jn7ww3MUDodS8m1/qCdonLk0O0HFLrAqpWB1Id1RcmqwE5Qin6DYSuwE
hftOV7Wm0/HETzs1Kbwlvf6Alvwi3IB/XmItiYGWRCuLqErQHLVUia2BZyQcIOz5FyWZ7cZOx5sE
PuS8tG4bVYOdjgBazyhaz+yK6jnxdcN6+rJzMr++dk4CLF0JW/nz0jMA8DOAGwW2DzW2tiob/YpU
R86lPgp4byV9KqiHjGq80VLGUJN2Hb+GlCEq5EacT2p3Momc4Qc/IZwa6hVGf9aS5EXhpkfWw5aj
ljbkQG9LBZ6/0fX1Bnh8ftx4+fiIwAzt4BNRcJpxRdnbmLpCS+l+d8OUjtVyw+90jHHTxphtv9MR
a6ibOGLBr6ttWw69wdSEykemrfXTswp9Sde4PchJ9YYzQJIHLxgAAsqwgeC0gfydvRPQhR+H9GJi
96Th8RYf8Jqx+H0prvB4ORZ/IMXNQv7/G40/lOK3efwoiz+S4hYeX8Pij6X4HR7/lMWfSPG7PD6J
xZ9KcWitkGpsem6l95cPGPhG0r/Mvz2XcpHpLwTAVwAY80IC/CECEgDwtQwYnycA3gZA/zwJsEwE
tARAqgzo/FIAVABAi5cSYIwIeFKBAGJkQI4IOAaAGyLgo9JacF0F6Dkk/y2tpkNZs+iKDDWgFWwU
3wFLMPSBU1ZJBp9YGvthFiLBEUvQ+/WCMTU+lN30G4oDKp4e+WdxsKocpUgjsLLd6phrhvdO8DMM
KOZt6mdinvSpAX4IMP9Mb0oL+Wz5ivzHPP+lVWWCZMGczMDmKbwcRkRLLBQO5oXg+Zb+UBilFhLb
s0Sag17Cr7rirUyqPLcUOXF+/EAYsC218QMMRZYK+AHM1+KJVKon7fsF7nYlT0vRj/zi5Hlkhtgr
fMoT5b/yqLL5F/z7Lf79Av/Ox79z8O9M/DsF/04gf7mdLdTW4/wgC5ydFQtCXWBRJDkjrgyxNDKT
88MlsG3w26tKCR92qdKC2uJI4ckmOD3JeK3+PHDoWj2LkClmZboiWXruz2SwS8z0izSViSJSiTtI
8BL9fpiB9YFahDjwrjE1aBYgUys8/0lP33DbUwcEs8xL6ZXMsvSE/4TRtTF1gjSFHBHXBE8oHO5o
zkPzZG/lZDkmOYFIQlWF+UNDkSrINVUqoYIfTPYEviaw+GSyKi3987Xfuxby7XTaV2FzfdL/dXTA
pD94rPxCSMj02pD8L3zyI6NeYrAbGazpTTRDtxW2xFYCybCVnGFIggwmKjXo6o/0ffxzJGHYWE/H
XgasQZdMCHVqXwU+l6HrBVkEdgZgeh1b9MqpAhNOGLGU7qn/FoM7jq49TCf3ddismcG6uKJhczt3
slQEjo3FAVyUvrxPPrOX94FF78/mF8+ht5AbhIzPK+mIlLoyQI9ZRuC5iMBnEYHXLSVxf8vIxF2e
kSFkEPyKjsozdPADz7fxp4fJtX/5A732yaRxmN9kwfpddmTIxbji3U3tIxN3e1o2dve/GWUa5usT
mVngHmV6QH8f3GgIz3wzDRZ5rxgzze3UXzW31owyRFyJ0j+IMnS8Au8iQC3i6hjT1XBkyE7DJ1ZS
2DWtLUwuyfmnmcSuN03Tn+rgfQMfY8hF9pPbRtNZo/8jY+L2XNPhTMXdmrGimNGkGE0PI00P4uqb
Tmbec7fuTrxZzJhzkZRHmTIXGlNDjKZg0u89SZfyNFp3x981Jr4IntQLz4cxtazRRPK5nuRuiPYk
f4ktRsNnMpJHk6yhpw/5S1KMnuT+jCZpRk8yCYsmyVXPYPIXeEMJb6gx5Ez8WnJL5Ub5k3H9Wm5U
WlxD0iF3WNwjTffglEFO4En3Cy6Wb+2aNuAGuZPu0CwSLoh5DJl6K2G1YU998i9Lv+4hTyDoFecb
Zbomrd8bU9sYTfeU+KLkFJFbmFyW+Dvw075E7ZYysRhNNKCbS4s/OwiCxOMqWbxg2Eic7uujiysB
o4GP0qYYS1LcSQ6jzPQQ18r47wnjepkfnVtGpW5j3exvqZvdhW7mEZmYRSp1X+1fHaB7WXj3Wrac
dq9635PuVbYCNTJ4IWVPZMiFuBLdTfG0f0L/uoH9K5/0L0XsX34O+pfy6v0r2xf7V9zd/9r+NU7r
X3fhlGn9a1yRQv0rC/vXlZpq/xraPeROXEXoWqT+bZRcrTNdiL/P3iBITaePff4ibNC7CPYWG4jU
XmV2LwIHiUU7AARZidVuRzvqwTra12Q4sRy3ux77P+9f7b6l/Ws3+aOsLve/qX+Nqv1/b/8q5e6w
f82u7qB/pVRw1L/edHfYv350e83+NcmN9a/WtRz3L1OUb3kTXXWO8/V00M+uk65mKaUe76K/HVhK
+1vfb0h/C/MS+9t56G8tfCMTd9L+dgdSWNLfXpL+dlnob418okzmQv3NHKW/TPqbuXvyXTv9bZfW
3+7S/pZbU+1vN/5r+9swrb/dgVOm9bdvdLS/3SX97a5NfytbVe1vY7uH3AgnDS8fri7OeMaR82qB
9QY6XuKW2t+5qx3xfPxNeIhTEZ7CyP2uoa5Qv6MD6F0CtdvvXlhf0n63vQZ8H1xN571okskenitk
ehaVNpmcrcl0XSD45UuSpU4mk7pOkNGTrG6yD/k3W+5NmxwQlTYtmGBD6X5rFDvNSOKhDDstmvyb
rfqyx6yQn3nz56u3SU+NHw4J4iCoWVaiOnGMYtUBuBeEF+W/pMlyCIOFqvPLtGmDlBOQFWAVTHkv
rWrVZ8C/E3d60RmJuoSx4CsnM6jJ9DFCC1/lalH4XrGVzoKEmnfmNQ/4Skj9WzsmZam/p7KwKMv2
EwqctvO3l6ydPQsKt/MuDH1p0wKgrcryF7yhi1+8pDOUlyvEjAivb6SpIDJ1K722L5+/tHZPmxkc
mfqu0VIJ/G4aLEZZyT1AWNrDoyLTjqiQPNLf0mZ6EpS3pZacz4n4MgJeVbhtgPyf/puedfMZb+F5
gvr1kdl36KKp6TH9snBz+pYqm9vsLYJzm9XwKcoL5zY/smSSTW361mBTm/n09LUr9iWd2tQ/QuYs
vjhn6QSLWYSYzmysSosy6szGeliY2VQvI8xsfsKZzfW4t8NmTfcl05piYXPDfTtZKkGyepVclshU
D1+c2NziExu/amxi4+OltRzmsUeK0+x2CWa30AGVA+T0iwmrzfMVT3i+cirSlL8tGJp5qAo++Auq
nIXPNzzx2Qf5q3gVZ8u8tBDeL4LngqbxOrqW4akt5Jq+oM86m+l022C5UvlAY7XswQcSyKoD1o2e
+ECCfAg8ugF+7iksfZaOSYwvQiU86UIGl6hHJZ4EqhIVNYlPUSK3GJN4UAzWs1ACCjcC9YbiyF+9
NOX3An52COXf/Tnw/wv8q+h6U2WVvw3yK8h/GfhzijF+KORN8GASez2ohDdIKFxiKJV4HyTglVnl
LU3iajY+KEGJwyCxGCWgcCNc8Q1u2IR+xHIIvw9dOeL87pQ/UDtFj71V/nnIn438GcDfAvmzxSaw
nnVfueVOm8AeZnCJ5YtB4l4AkYj5kwzwCzWJ5iiRjhKrQOJIUSZBCwnrak/KGgCs6Zy1K2VND1Ar
3lpjvYOdcgWyLgfWaci6wl7Fm7CKB4PECi5x6zOQiNckTlVSJT5DiSUosRAkvFFiiSSBp3+fG5UI
pWt0XCKJSjTTJOI0idYokYISs0BibRF8gmJPYhSTMNI1Oy5Ri0rcb6pKlNUkruxmEgkoEQsSvVAi
gfYgndCDvEtQ/mjgT+D8mZ8C/98a/+qKKn8q8o9C/kHA/8iD8Y8q1EPTi1P+GOAfxfkHU/6JGn9P
jb8F8scgfzTwf4r8MYXqH8P4BwF/DOfXU/6mwL8C+B9WUPkv7GL8RuQPBf5myG/E7lmO3VejgNXI
WVcuAtbnTVRrWKqxLkLWYGQNANbz7ow12J41/K2jFY8FiWAuYaQS65qoFQ/WJIJRwg8lfEDiA5Tw
w4q/84JWPAFY/Tjro4XAOquJajhXy2v31U40e2T1AtY6yOpdyDPNz4D/T2rR4PxcYgGVaAcSMGVQ
PtIkTmWg86OEDiQy3ND5seIPCihxChJ7cuKWlNhDI66nEU9F4tyi6PfkrzISiWkhPH9ixAuRmGEp
8YUFQLyvsdoHD7yh3UM70OiR+DIQl0FiKCw0Vi2qCFfzzyWoonCVqVQlubFa/ZGays5t6PWochhU
VujR67H6p/Np9Zcj8WlOXIMSRwExfdReRiNuhNXPRuIMIO6hpyvgPmRQ0JG/3jr21wv/etK/7E0p
OhawVkLuEpbuTv4bEbiHPp+kd8afK7A+2bw+8+dDfc43UuszsxzN1+j3e6mJLYOnJSw2hMd+pSPB
snQt1rmc2o5J23EkwXasgnZ8oqNPgodjbAXGlkNsrA5HGSxcgSdxKE3I/szASq/glT6TBpXu0ogF
0nkggwbeJIHuaWuzaRaWE24qUILLEqq0LTHw4O7tjDBD2WQjvKiSlQwlOt2sDpFZyYP0LIum2Zsy
ojRta+Q2bZJqWhYKk+rEPL0hqRRRICmt4ZPB0aQo85o7nJNOZekpCHxmhBfhziqT79OTDnka0V7I
tWcx7YVce4mkfbsU0zYtS9AUVzekilMqKndI1GKIMtEvXMDzKhBQ67DNS67D/Xu0DrGsDtm8Dums
Dtm8Dofl9mt1WKXVIZzVwTAnDW6JYfDUKpG+0qtWJTJtGbQtKrUOpMgjo1KDms7TkwngZl8f0lMt
QTgRCpzneCJUF96oNpEc2FIV5+dRphtRqcPh8TZ9oBIVkhO/nu7/+vAlrLTEX4pM3ULbl/o5PV2Z
V90DnynP7r600heE3DEMyxxlI9OSl8O/Q3LjiihvAEHaFiM9tik8ehxGajwjFWr8E6txc6zxR6mO
a1wbvnB4KpfU2Js+nzGaLMbUhsbUTlp1N8KV+fkBmYol342/TOoTzKobyqvbhVWXXJliGCf1NSRV
8IXrljyK1TkqFU506jjfAENSEV8YfwmnOa8Ov/wZZeTL/+AObSKMSXD7U1l4llPU6B5LH+d8RKdi
EbrAc/B0rgS8zugepsBNnhaUtREzK7wvF8LNuvUlMP5MawgJVlE601F+hZmoiWbMS/jtGDiXfn27
EZX1FGQ9maynPdmELZhtoewskO1CZGm2hXqtuF4K18s00de9G1I9L0FvCZ3ERXjZ0yuHegmoFwt6
p/KYXgLqZeVreglcryfV+4bpeQt6fkzP257eys2YiqHeIDr+od4o1Hub643ieldS6ODB9HwEvfTS
VM/Hnl4E6sWgXjTo5bxgejGod+ulphfD9d6nei8bUD0/Qc/I9Pzs6V3ahKka6oVS/0c9I+pN5XpG
rqenen8wvQBB73QpqhdgT+8D1AtGvQDQq4R6wahXjOsFc71Fn4DeAKYXLOiNYnrB9vS8Uc8P9XxA
79fnTM8P9b7M0/T8uF4tqleK6YUKerklqV6oPb01eBt6o54X6LVCPW/Uq8/1vLne6jmgt9mf6hkF
vRSmZ7SnF4V6nqinA72sXKbniXrrX2h6nlwvjOqNY3rRgp4304u2p3dzA+aDRTAfLALzf9SDQtDr
wvUYjuodSQa9akwvRtBbUYLqxdjTm4V6CupdBr1bOUxPQb1TzzU9hesNpnr7/ajeIEEvmOkNsqdX
GfVOo95h0JuKeqdRbyTXO831HiaB3nSmN0rQy6ZP0CNG2e0v6ZhHol4G6BVDvWzUy8nV9LK53myq
14jpxQp6MUwv1m5/Qb101FsFel8+Y3rpqPcJ10vnemWp3vn6VC9B0FM8qV6C3f6yHnNI1FsOevVR
bwXqVeJ6K7je94mgN4/qrWWzIU0ynkomQ6k91Q9RdQmqLgTV1U+Z6hJU/T6Hj4JctSFVbclUU2RV
azGqmuJAtdc/OBai6ixQbYOqKajakKumcNW1H4Pq5XpUdaGsamKqCx2onliDIyKqxoLqric4IqLq
2md8ROSqHajqXKa6RFZ9g6kucaBaex2Oi6g6CFR7oOooVO3AVUdx1T2zQbUFU10uqy4rSlWXO1B9
uhpHR1SNBtUzj3F0RNU9T/noyFXfoqoX61LVFWyyoTShcsvoTCstKGYtjoXIHgrs05DdiOxjObuR
sz+dBezLGfsqZD9chLKvktmDkT0A2KsjezCyl+bswZz9S8o+hLGnI/skxp7O2HXI7ofsPsC+7RGO
c8j+9xM+znH2EMruy9gzkL08Y89g7FH/4qiG7F7APhjZvZG9J2f35uznPgL2m770bZ+ArbCmRFfr
A/coy2F5BgrdhcJUtVAvFE5RCz2EwsFqYUkodGeFUWphCQHZSi0sIhTWVgthWr6xOCssrRYWFwpz
rS9ZYSnh8GtqYTEBeVAtLC0gN6iFRQXkT2qhQaj8ArWwjFD4IRYGPlNLRkFJ2pZcdm1KENfZSL9X
FE3TjCA3tCFPvFg6uFj/PoBj6NSSZgZF2Kz9AHFe9WXNJDyCXjbfmXDZetShEj542+V64KDvAesL
D3DQx8W2jyUqBmXz/xm0fzGq86twPEeqy0BVCakUpGolUSmcaj6lel6bUs1AqtNIdRio9t/HoRqp
7uQAVaC6tMOpOlGqg4zqJjYwG6kygGo2UmUj1feUSq+uynCq3OlA9SOj+g2p0pFqFVC1RKp0pOor
UaVzqj8pVQKjGodUK5BqOVBZ7uHYiVQlc8RztYJTDaFU3RlVS6RaglQLgWo5Ui1BqoxnQOWFVEs4
VSVKVZtRvcDTnoJUsNiq9EGqFKSKfybWKoVT7Z8GVDm1cCEiMnU8exXefZQCXfcPHMuQOxa4n9+F
G2AgmZG6R6XGAuwTrMIohA0C2FECi9I/hs9weFRaEo3T7zneM5rOKKvpc+QkPIrWpj2tjakWq2YC
D9SlgYW16DcHAoQaTl6JIxBKR4P026yGwbyGN/7GoQRhoQAL4DWMwRoapRoasIZGXpFvPoSK1Mca
xvBAIg00KVzD/b/jOIPSASC99g6tYSivYSesoR/CfAA2/45Ww2CsoZ9Uw/EvWA39eEVefAAV2eXD
ahjMA1doYL9PoRrWwRp6o7QXSL/BamjkNfz+L/QxhOkAdsei1dAba+gp1XDfc1ZDT16RGFqRoVhD
bx7oQANjWA29hBo2QulcdzQ88ld530Jr6M1raP0TzQxhlwHWldcQDocaQpzX0B9ryI6iFVmXABXR
Yw1zeWAZDXiyGvoINZyL0qdR+jBIH7pNa+jHazgQYdkIywDYittaDU9jDbOlGtL8PzUJj6IVKU8r
8l1N9FEeyJtKv1ZUk9ZwkFBDBe/ldJReBdKNWQ0TeA03IWwFwpYDrCivYTrWcIVUwxs5rIYreEUm
0Yq0wxqm88A7NBDOahgt1LAzSi9B6YUgnWqmNRzFa1gZYSkImwWwYWathkuwhilSDTthDVN4RQ5P
gYqcq4H+ygPraeBqDVrDGKGGP6HbJKB0LEibFVrDWF7DqQgbhbBBANuucD/EGo6Savj9M/RDXpEm
tCIfYA0TeKACDcyiNcQnU1olrXg7x6A6fFlOCaeVXMYmFWo9DyHSiMhQQFbh9YzBehqlej5/iq7I
qzMnHqpTFusZwwPjacCbnckEoZL9VFdE6QCQ/u4WrWSKVMl5P6MxItIHkPG3uDFiJf2kSvbGSvrx
ulyJo+tj1dEYeSCbBv6pTis5Sqjk2t/QGFHaC6Rf3KSVXChV8vJP6I2I1AHy8E3ujVhJT6mSNP9P
TcKj2P5XtC5dsJLePFCHBt5klfQUKumFlcx1Q2+El4T60EoO9OI1vLYCvRFhlwHWhNcQDqfe6CbW
sDTWkB1FK/L1ZKjIjWrojTwwmwbuVKM19BZqOAGlT6P0YZD+5watoQ+vYRjCshGWAbB5N7g3Yg2z
pRqOfYzeyCuSOwkqkog1PM0Dl2hgLquhnzhG/4reiNKrQLosq2EAr+HjH9AbEbacvo91nXsj1nCF
VMM9j9AbeUX60orUwhqm80A7GvBjNTQKNWyANVyC0gtBeuJ1WsNoXsP8X9AbETYLYEZewyVYwxSp
hvWxhim8Iv++DxXZVhW9kQeW0sDuqrSGwUINU1A6AaVjQfrANVrDGF7D/ggbhbBBAPvlGvdGrOEo
qYbJD9EbeUXK0YoMxBom8MDzWAgMYzUMFWp4E50kBqWjQbohq+EgXsMNCDMijL5158FrGIM1NEo1
vPYAXZFXJJZWJK8KuiIPvE0DbqyGsUINw1E6GKUDQNp0lRrOLMlwyquuiEgfQL53lbsiVtJPqmR7
rKQfr8u+iVCXL7CSwTywhgaWVaFDzBJ5iPkG7c4b1b1A/coVWs/lUj2PfYfGiEh4hUBZf4UbI9bT
U6rnF/fRGHl16kyEN6sH+AYbkv2xst48WoRWNgACaUFFsHa5enREeODa6QrMiBbTQnjCd0nR48lg
MEqzdQLQFGc0x35Ex0Qa+M1G5eVlRgOFdKUCmNZjdRXOFEeZLlWmTKuR6TQywcNiZQ0yQeHW4sg0
HplOc6YGlGktY1qATNnIRN9sGYVMUKj+potSB5myOdPl8XTbEsY0FpnSkYm+3FMDmaCQLuMA05l7
jCmdM31BmQYzpq7ItAKZ4BmxcvwSY4JCuk4DTAuQaQVniqJMrRhTTWRagkzwjF+Zi0xQuLUcMkUg
0xLO5EaZSjOml+jUKcgED9aVUGSCwq3eyJR3F72PM6WPA6Zr3pTpFDIlIBP9Quazi4wJCrdWRqbV
yJTAmSZQpg2M6XdkGoVM8MqE8gcyQeHWKsg0EplGcSZfyrSAMc1EphhkigamIcgEhVurIlN1ZIrh
TGfHAtNwxtQTmYzIBA/VFW9kgsKt1ZDp2B30N860kDK1YUyNkSkYmeiLPwcvMCYo3FodmUzIFMyZ
OlOmsozJHZn8kIl+1zYJmaBwaw1k6oBMfpzp5RhgulWJMp34Hm0KmeiOJq2RCQq31kSmpxbGJOxn
soYybWFMvyGTtLXIg/OMCQq31kKmlcgk7BsyijJ9xphmIhNbLVxMv16t/IJMULi1DjINRiaGZO8/
UabRjOktZFKQ6TIwDUAmKNzqi0yVkEnhTMdHA1MHxtQEmaRtTMohExRurYdMB26jP3GmuZSpAmPS
IZO0n0j2OfQnYKqPTInIJGwWEkqZLBUp0/Hl6E/IBKv2ykxkgsKt/sgUgkzpnOnZKGDKZEy/ItMK
ZIIBSmmBTFC4tQEy3TejP3GmPyjTl4zpQ2SS9i65fRb9CZgaItPPyCTsXDKEMo1nTNHIJG0rshyZ
oHBrI2Tqj0zCziHelKkTY6pEmab7JsAr/rHKAMrR2zdha2MkqEIJwgHA7v+RcHRddrQOjx4FxwxS
atCj43xH0e8TX6PL1ze+w/VseAV/xlVGNgrJ0ihZbgVKtvM7Rob7lxw5w8higOzfq5Tst+9wyR3I
ApBM3cwklJLtY2QmJMOdR5KQDPYaV0YysolA9gaSXbvCyNTv9T8eAWTfAtnsnfDiv/jFMe1VIHi0
EklnnVugq8JrTkXp1y88I7OSM3TsfySYXiiYzoOrCgVX8eCKQsEVPLi8UHA5Dy4pFFzCgwsLBRfy
YEqhYAoPzioUnKUFZyRIkYgELI6Vi2OxeJRcPAqLB8nFg7A4Ri6OweJouTgai41ysRGLQ+XiUCwO
louDsThALg7AYj+52A+LfeRiHyz2lou9sdhLLvbCYk+52BOL5VMeQc83LMx/o7xUN56IgR2KDEnN
3cWdURrBCgCLB7N4CynemMe9WTxIijfh8dyhNN5Sijfl8dMs3kqKB/B4OosHS/FAHl/C4iFSvBmP
J7B4aynenMdjWLyNFG8htJ/F20rxIKH9LN5OircU2j+ExttL8VZC+1m8gxQPFtrP4qFSPERoP4uH
SfHWQvtZvKMUbyO0n8U7SfG2QvtZPFyKtxPaz+IRUry90P7BNN5ZincQ2s/iXaR4qNB+FjdK8TCh
/SweKcU7Cu1n8a5SHFobmfYnZLrEieAP/M/sdtwKj0eXs+LlavFEVnyaFZ9Wi98+Ke2rE78XN2mB
r1tNO/jSah66VwKsFwH9APCzDHgmAkIAcF0GBO8TAN4AqLdPAkwVATkHCGC4DNggAk4C4FcZcE8E
rAXAeRkQsF8ALAZAjf0SYJIImAyAQTLgXxHQCwA/yIDHIiAQAFdkQLMDAsALAD4HJMD7IuD+fgJ4
Twb8IgIOAmCxDFBEwJ8AOCkDqh8UAPMAUPKgBHhPBIwFQHcZ8KUI6AqAZBlwSAT4A2CLDCh/SAB4
AsDtkASIEgG39hFAaxmwSQTsBsBvMqDHYQHwMwDaHZYAXURAEgCCDmu7GuUNpDffX6XEm+/XUtrN
eY7F/5biK3h8E4uvkuK/8fhSFl8txX/n8WksvkaKr+Tx/iz+jxT/g8fbsPi/UvxPHq/K4mul+F88
njeAxtdJ8b+F9rP4eim+Smg/i6dL8dVC+1l8gxRfI7SfxTdK8X+E9rP4Jin+r9B+Ft8sxdcK7Wfx
LVJ8ndD+/jS+VYqvF9rP4tukeLrQfhbPkOIbhPazeKYU3yi0n8W3S/FNQvtZfIcU3yy0n8V3SvEt
QvtZfJcU3yq0vx+N75bi24T2s3iWFM8Q2s/i2VI8U2g/i++R4tuF9rP4Xim+Q2g/i++T4juF9rP4
fim+S2g/ix+Q4ruF9r9D4weleJbQfhY/JMWzhfaz+GEpvkdoP4sfkeJ7hfaz+FEpvk9oP4sfk+L7
hfaz+HEpfkBoP4ufkOIHhfbTby8lnZTih4T2s/gpKX5YaD+Ln5biR4T2s/gZKX5UaD+Ln5Xix4T2
s/g5KX5caD+Ln5fiJ4T2s/gFKX5SaP/bNH5Rip8S2s/il6T4aaH9LH5Zip8R2s/iV6T4WaH9LH5V
ip8T2s/i16T4eaH9LH5dil8Q2s/iN6T4RaH9fWn8phS/JLSfxW9J8ctC+1lckeJXhPazuFmKXxXa
z+K3pfg1of0sbpHi14X2s/gdKX5DaD+L35XiN4X296Hxe1L8ltB+Fr8vxRWh/Sz+QIqbhfaz+EMp
fltoP4s/kuIWof0s/liK3xHaz+JPpPhdof0s/lSK3xPa35vGn0nx+0L7WTxHij8Q2s/iuVL8odB+
Fn8uxR8J7WfxF1L8sdB+Fs+T4k+E9rP4Syn+VGg/i+dL8WdC+9+i8QIpniO0n8WtUjxXaD+L60qL
8edC+1lcL8VfCO1ncTcpnie0n8XdpfhLof0s7iHF84X2s3gRKV4gtL8XjReV4lah/SxeTIpDa9X2
s7inFNfz+FIWLy7F3Xh8GouXkOLuPN6fxUtKcQ8eb8PipaR4ER6vyuKlpXhRHs/rSeNlpHgxHj/H
4gYp7im0n8W9pHhxof0sXlaKlxDaz+LlpHhJof0s/oYUh9YKE5ynu4UJzo9byQTn2m5pBhSeJQA+
BkCzLAnwmQgYDIDZMuCqCAgFwGEZEJgtAGoCoGa2BJglAgq2EMAEGXBIBFwAwBYZUGOPANgMgFJ7
5L2LRcBSAPSXAZtFwIcA+F0GlBTXN94BwHMZ0E8EBAPAKC+A/CYCKgHgSxmQKwKebSaAmzKgi7i+
cQIAQfL6xhci4F8AJMkAiwj4DABnZECouHwxCQBN5OWLz0VATwAkyoDbIiAAAKdlQAdxdcIAgMby
6sR0EXBvEwGMkQEbRMABAPwqA56JgD8AcF0GNBdXJ1IBUEtendgjri2MAcB6eW3hsQiIBMAVGVBd
XFvwA0BJJ4sPxTbh4oO4ECQCbm6EhSAZsFQE7AKASQbsEgE/AeAfGXBfBCQC4IIMqHxEAAwBQLEj
EmCOCAgDQJwMmCkCfAAwTgbcFAHWDQRwXAZcFAEXAbBfBnQ+KgC2AKDFUfkHmUXANwBoJAN+EQHT
ALBYBnwrAvoBYJ4MKHpMXP8EwBMZUCAyeAPgjgwYITLkpBNA72MS4F0RcBIAUTJgtwhYC4B/ZcBW
EbAYAH/IgHrHxfVPAJQ/LjutCOgFgFIyYI4ICARAnAyYKQK8ADBOBtwRAffXE8BZGXBdBBwEwFEZ
0OOEuP4JgHYn5FtPBMwDQJAMWCMCxgJguQz4XQR0BcASGVDupLj+CQCdvOReQgR4AiBXZpgkAm6t
g7VomWGMCNgNgBgZcFQE/AyADBmwVwQkASBdBjQ7JQCGAsDnlARoIAI6AsBbBnwqAmoBYJYMmCsC
dABIkAGPRMCltQRwWQbcFgFbAXBaBvQ5LQCWAaDTaQnQXQRMB0AbGZAhAvoD4C8ZkC4CWgPgFxlw
UQRUBsB+GVDsjADI/ZcAnsqAABFwCgA1zkiAd0TAOgB0kQEfi4DPARArA1aKgDgAfCUDjouAtwCw
XQbki4BmALDIgHpnBUBZAJQ/K9+8IuDBP3DzyoAEEXAIACNkwPci4C8ALJABe0VAGgDSZcBjETAO
AFdkQLVzAqAbAEqckwARIqABAJrLgAkioDgABsiAL0WAsgaesMiADBGQBYC/ZIBZBPwCgFMyoNx5
AZAMAN15CdBGBAwDgL8MGCYCOgGglwxIEwG1ATBNBvwuAvQAWCIDToqAy6sJYKcMcLsgALYB4IEM
aCICvgVAtQvwgxjahkZr4O1V0w5z26r0r81mlec7wc9d+FTVJl5XO7GFkSrSwgjl2GXudMlKf+St
KucSdqVcSLmsVTSuLxjXCYnrIHJdvsi4cqpoXMIOlOGU6xzn6sq4VktcvyPXDOQ6xrmErSZzOwLX
es5V0JFypUlcc5CrCnL9zbmEbSX/oFyfca41jGu0xDUEudZfYFypnEvYP3IQ5ZrIuUYwrgiJqz1y
9UaukZxL2DWyPOXqxrmqMK5aElcV5Hp4nnF14lzC9pDZYcBVn3MdDGOLSZWlxaTKjGs+ctXkXMI+
kNMplzvn+phxnZG4jiJXQ+TKq6xxCRs+BlAu+g4142rJuNZKXH8hV/Y5xnWKcwmbO14PBa5NnOt2
KOVaJHHNRa7hyPUP5xI2clxCub7kXN8yrvES1wjkckOuBZxL2LQxinJN5ly9GFekxNURub47y7jG
ci5hq0Yd5erBuYoyrroSVw3kaotcXTiXsCfjvx2AqyHn2tiBLfBJXC+8GdeZM4yrDucSdmIcRbmK
ca4JjOuCt/SwArmmIJfVm/sX56pGuei72YyrNuPaIHGtQa7SyHWOcwm7LB5uD1zbONfJ9pTrc4lr
PnL9dJpxredcwsaKSZRrKeeay7jel7jGIFcb5PqMcwnbJwZTrqmcqz3j6i5xdUauo6cY10TOJeyY
eKcdcL3FuR61o1z+Eldt5BqNXN04l7Db4XLK1ZRz/cK4ikhcBZUYl45y7aK///oDjGMn6WfzvpNa
+SEo34TlX5xk2u2Ytvl+Je5VvA7VaB2OVeLXn9Xht0piHX7AOtQlnMpzWJX5/G+mUpKqhMPv4YX7
jjInvAFA/BhjHi1+NJr7kY/m73PF4dVmj7a0tlCdDm9o1fmsLVunrSqt05JP5ncK8Qh7r0VQnpxy
Gk83xnNasvMj5JO5bCEeYU+1/DbA8zfncWc8P0k88KUe854cWx5hr7S1lGck59nUhvLESjwwCJpn
F+IR9kAbT3lqcp7JjKetxBMEPCGFeIS9zepSnlNlNZ6GjMdT4tEDz8NntjzCnmUXWgPPAs5zrTV7
rizZ2gHyyfxbIR5hL7LPKU8XzrOU8SyXeL4CnsGFeIQ9xrpTHquXxvMW4xkn8QwHnsqFeIS9w4pQ
nvWcpyTjCZZ4AoHnyFNbHmFPsC0hNEXhPDtC2HMXiSef3KJmUyEeYa+veMpTn/NMYzyHJavYAzxh
hXiEPbwaU55LBo2nOeP5RuIBwzY/f2LLI+zNdSOYDtmcxxJMeUZJPIOBZ3UhHmHPrWWUpwfn+ZHx
tJB4GgPP6EI8wl5afShPMc7Tn/HoJJ7nxMbMtQrxCLtjlaY828poPG8wnv2SHe4CnjOPC/kP59nV
ig45nGdfK8qzROJZBDyLCvEIO1jNoDxNOU8i4xkm8QwEnshCPMKeVEGU55bw/IvxBEg8/sCjL8Qj
7DJ1tyXwfMd5Hrdkz1ErSs9RySfzhkeF/Ifz/Ex53uY8KxlPtsQDXzgxv1+IR9g5aiDlMXCeoYxn
scSTBjz+hXiEPaIqUB7h/Z2qjGeQxPMO8Fx5WMh/OM+BIOD5iPMcC6I8jSQe+LKI+atCPML2RMmU
pxXnSWU88M0Q4Xk5+WTuWYhH2JuoHeW5X1Lj6cR4dko8W4CneCEeYWOipy2A51fOk9eCTQElnjnA
k/mgkP8I+/9Qnvc4zz+Mp6/E0wN4PijEI2xJNJzyVOI8YxlPTYnHG3gCC/EI+xFVpzyHSmg8dRiP
Ul56L4V8MpvvF/IfznOiOfB8wnnONWfTbYnnd+D5vhCPsBNRGuXpwHk+YzwfSjyTgeedQjzCNkQR
lCenOM9/GE8niadteUzPzAeK478sNbh9cLpnzeDLP+5gQ/I+Qhea0fGf61xrxvqp9Nz5YWlVZ7gd
HWE3oPlU51Bpne1uQPFUpz7XmcZ0dko6WzSdfM/COsKePvWozlLUEfb0KU11tnly/2c6CyUdk6bz
uR0dYWeerYGgMxJ1hJ15fg6k/sd1VgZSnQGSTh9Np7EdHWF/nb5UpznqCPvrtKM694vx+5/p+Ek6
tTSdXcUK6wi75NwLAB36moe8S86JANr/uc65AEfvF1GdgXZ0hL1u5lCdfagj7HUznurU5DqTmY6d
92ipztOihXWEHWtqUJ0vUUfYsaYI1VlflOd/TGeepJOs6aTZ0RH2nVnXFHSGoo6w78yypjT/4To/
NqU6MZJOT02nrh0dYd+YN6lOU9QR9o0Jojq3ivDxn+n4SjrVNZ0tRezcP5zuZhO6E0NJne3WLwea
0PGP6xxrwt5zKym951ZS1eljR0fYvWUm1clCHWH3luFUpxLXGct0Nks6azWdux527h++3UFFqvMZ
6gh7sOQ3pvM/D03HnemkSDqzNZ1kOzrCTip/AV3ye6gj7KTyOdXpQo42x6kU5mA7ZMKmJ4MpWTMk
g01PzM/d1WNfqv9StxsxXxBLhJ1JqlCakkhDoWs0mrXiQbAniPkLsUTYPuRYI6C5XkKnbR9iHqvR
TBAPgo07zD3EEmGPj3mUZgvSUKivRlNfPAi21jB7iiXCLhwRlOYLpKHQC24qzWU34SDY9MKcKZYI
m2QUNASaiUhDoV9oNF+JB8GmF+YPtdgMMQbbWJjf1WKDxRh858rcUYtFiDHYasJcT4v5izHYPMJc
QouVFmOwHYT5nl6NPdQLMdjgwXxUi50QY7Blg3mdFtsgxmATBvPXWmyZGINvmZlnarHZYgxeozYP
0WLDxRhsfWDurMUixRhMu8wNtFhjMQbbE5jLaLGyYoz+Jvojneb/OiEGWwiYT2qxM2IMNgUwb9Ri
W8SYArFvtdj3Ygy+uG/+WIsli7Fs8sEymt3BE/mVg9K3WOk7/JpBaTtW2olfLSitz0ob8+sEpWVZ
aSUsDfdVv4/e1V+vi28GX+ue9Qv9IjbdHQR+v8HyDXzbj37NzxiSa0g6Rz4rS+e/tJqPkH+p63/k
cEc/LvG79qAs/ouXVstSVoXF7E8a+zOHw0tr8M5fwNa595Um8+HvBfjn4z9eWu1BqyLUnUHNXjut
dnGPP2e4c2kMd2SHfdw+xP2DuE8d4H5EXCri3nKAm4a4oYgr7wD3FuLaIO7Edvu4hoh7A3FfOMC5
I84yj+HedoA7t5jhdiDO2wHuH8QtRdyZTPu4VMRNRtzXDnBDEdcNcf0d4Nogrg7iqjnAvYG4vFSG
u5BhH2f5jOGOIe5bB7gdiFuJuPcc4JYiLhFxVRzgJiOuP+JObLOP64a45ohb6ABXB3ElEdfNAS7v
U4a7NpfhijrAHfsUd/Hgi5oBdfW6uEC8z1vXdXyfc5Y0VItHtbCtmlE892VvIBeV3kAuKr1hPCXP
ajVf5FnaLnaMtYj0VnwR6ZiOcMzv/JhF7Jg70jE35GPKwDFT+DED2TFnpGOOysecfUGO6ciP8WfH
7JaO2SYf8wscU4Yf87QOPeYf6Zg/5GMmwTFneQaZyY5ZLh3zlXxMezjmF35MGjsmTTpmjnxMCThm
Ej/mHXbMh9Ixk+VjTj4nx7Tnx9Rlx4yUjhkkH/MDHFOCH/OwNj2mt3RMd/mYCXDMSf7V9S3smDDp
mNbyMa3hmB/4MSZ2TBPpmPryMUXhmAn8mD7smKrSMeX59Qti8WpSvAKPV2Dx6lK8onD9a9F4DSku
zEpOsHhNKe7N42tZ3EeKV+bxz1m8lhSvIre5XC5pM2Se4uukOaRshFx2G8p6yWUnoay9XLYdyhrI
ZX9BWUW57Gsoc5PL5kAZZJ5i/4eys3LZu1C2Wy7rCmVr5LKWUPatXFYbyubKZWWgbIpc9uIZKRsi
l92EsjflsqNQ1lou2wpl9eSy36GsnFz2BZQV6KSyj6Hstlw2AcpOymX9oGy7XNYZyv6Sy5pB2ddy
WQ0omyOXlSBllnih4PlTUjBMKFCg4C2h4BQUdBTfEYaCQKFgLRT4CAU/QYFBKPjsqfD+1Lvz4Csg
T+X36SwCoB0A0i0SoOwdAVANAFYZECMCIB8wd74jAb4TAWcBkCYDboqADQA4LgMa3xUASwBQ9a4E
iBMBUwEwRAZsEgF9AfCbDHC7JwCCAPBABkSKgPIAaHVPAiwUAY/JiGyeKQNOiYCjANglA2rcFwCr
AVDqvgQYLgIWAuAtGbBIBEwEwEcyYL0IeBMAP8uACyKgMQD2yQD3BwKgFAAeygB/EWAxEUClB/Jb
oiJgLwDakRL6e3h91B+Q9zOaHhtnZ9Hfrf51OuRKdM+jBsbUoNNVYWvMCv7wJysTfPf/Ye994KKq
0v/xOzAoKgIpFua/KUdFI0NFA/8U6ChDDkpKikUCMigUKuGQVJgYaI4jRS1b7Ma2Vmxr5W7sJ7as
3LLEtI02MywrK1SqUVBRyT8Jc3/v55wzcIe5V2l/+/v+vt/95usl73nO+znP+fecc885995znbsf
h8b6nbY+/NP17NSrd+mIIufXv6VvGn5AH29JktgJW/50wlao83osYOjjmEhAivm7jjP2b53HaWLr
6HsXWS9+LyzeHmhBTop3gfzObP/A2Xs9/zL6GRgedwLZuZ1n55/X6tiXS37/O0pwz7Fn6CAk+56m
2+lPLH0r3OErJnpxgxQfeqfol/3Qu8H55408yVux9qKsYjXp7z7/71qFqR5XNpUCUzElJ2z+7HtC
v+Vfhu/5xzZZfD+x8/vhifH28/F2V0LpUv94x5xg8/oPLfajtohYR0+L/YjZ/tFS1l7RMwxr+pgd
d4Wa13+df6Yp0OyYTapm+1f5Xzf5mu2fWaKP2vwRaQoUl71LJ1I5zc9SDe2OddwUa19u6DiQqvQO
AzJFTRC3po19OnT9fttI2K3W5feJj6639ZhyjyGocmfQ6xcs9pMW+2HnHzH7jZdnhTX1sWAOfN9a
MvuNxd6E1oL7HIQv+CtOQev0L/599OLm0Hg7Ftz8I7xnn6LF+LtiMU4ff3xULMRtfs6r19J3DP9M
p2omOF5lsP6ELcPsuLFwIH0A0mb07/he5bqB2o1gtNjPOb/cgLX5tR3fq2yydH7/0Rx9Kn87O0/v
YfpcJfv+47v8c5VPKz5XGfeQ+/uPeqNQcOe584OVSx5meTbzPJtFnlOR572hPM/BTe7Fxseh2nk2
UJ5HUJ6vDhqmkt8d7DzJNZ355d+rfFrxvcqnH/TIb5Qiv1kd+f2fNfSFmHdpU8b5YgVrjJ1dj257
dGfH0W3veh1R92jnEXXveh1R92jnEXXvbvUit3aSW7zILZ2k1xF1j3YeUfeu1xF1j3YeUffuRi9y
YydZ5EUWdZBrPY+oixNH1K31PKIuThxRt9bziLq4LBHseURdXJoI9jyiLk4cUbfW84i6OHFE3VrP
I+rizCLY84i6uBgR7HlEXZw4om6t5xF1ceKIurWeR9TFhYlgzyPq4gwi2POIujhxRN1azyPq4sQR
dWs9j6iL8+fBt3qE0leUMN7XhnoMGDGe44U5wb4n3l4Xbz9gtv+EZTeGIedH69rkWPsHFvuP9C3a
f0Cy74qN/jZo/W4YjC126fLvMjuGjBjArhErBnRcstg3V791Btjb2NOBjgEPhnRwMEZcy0a2uLfQ
GdHvW+wXkT1zZ/aOPfFMmzxz/bmg9fSBXYtj4nshLI3fe9ihzrt1Ix9OHQOeClGmT9xmxn2HvLM0
jnVJY9oDbTK/jv6G7fexC8/Eny38SmqgK2mE8+AGdiWlbV+pWgcdPW1JjH+CDq0kJVw0f8t2z/ZQ
hW0qZdm2lN7YI4HOwp6oJ7Cfiw8y/UQHW17LcrSbvuh1qqyN19MHziS3AZczHj/Xf53A1akMzkfZ
Fful/vyKbXYk0ZW8Ny4+isv2fLqmOHCNd0bzC7+etbhj4pP9WbX1YUD8l8j4sSp+9aZLrUFcap/o
z+7RSR2rv6f783ubkse9TUi8xtJLebWXThwl6iuY6ivKuXU9ywCNuUjS73Q/yvdOXLF8ae+1eLc/
XaqDqQ6fLWSt49xAphwTf+zHsppGgNCIJ9hMg+X62Mc8w2zFQjOO5YyZ6d5bqkcc2yKR8W9pmWSb
1Dncj+8yT4hxRha1ySi7vmSn7SGWQNNKGBx3QrHYcKv2KuKZfK60Y3YSLFJd3E8xO8nqd4XZSYzz
nbVidsLOAy7ls5Psp1gxu8yhfJWm+17ZdMZad/tfxBKGu+mxIS5ZXjo2aFgJG2ypv2PyiYmPK96x
GEPm17YUc+lsfySw7SqWwHaRgA4J6EoTZftVxRd0+TdTruzfyYko9uwAaD98Oe1ebu1QJJKoTCTu
FyUysNuJxCgTORL8SxKpuZy2MpFZEaJd7kWM/OHxjofZGO3n/DqfLuW3cOFf+XT6J83KFu9yP/8f
rN10b5pLI43Ol9Bzm/7qNT+l+ZvZzjrKJTMScKx2vtUzO2iP80MH+Uut2YF56b3wpBSj/7j9FnuD
+fxPNB91TP0yAZnJSHDczFzV4gjD/DbUPR+LPpx/bbzjDme8435/85QFzvwAmlv+CT6D5cV18Y5J
5vXnMCtFjHH7zfa9ZDT6qwSaKp+zvd/Ul0xjvtwTi5H8We/S9cq5iHaO3R8jS0J+HRiazP4YsW4N
YiNWKA1We2KCuQZfhrA59nvObx5kx6UGd7ky0Ti5ZFi7vLRMWR3B8fZ/xdvr42kSfclc+pDB4rgX
o+EqJDU/lO4WSs5/YMa/VWe7hg2KnzvH2rCG4XWzyj/e/kWCfWko6u02h/4iraaCzA6MJT1ItNgj
msLNpauQ+xlIp4fFvio43tGDtK4yO2KoMmDCYo/8lOLbIy+a5RmhFnsLMh7ckXGW701l1K3vDXO+
h8Sb1mGEdN78GB9BVpaRr8xyr20Mgejik4SfjKEbirb+nX4SRMbuHtoud+nq/s6Ch/hyKW1Vm+y8
y8ZGYednpTyNQWzHfI9zOGJiPsvqr2OxE18s64JK9rJ5+QXze85pQevrIMwpNbYz58A1yfEEs8c+
qYBGcr69kvL8cHD8nlm8AeEAS+NL7w8etz/evs9sv7iU/nWMMWZHtNkRi+qKP3/e7NB/RhU4CNVs
tuuYaKfJCmLlf95koPGIvk0Kyh5otkfichYt2fS32QOwNJLzt6BbxZei47Hp86o8zMDtD6MVh7rX
PVTj8aWLI5A1Ns06lkRL5a/gyp356UZ/emDjf74/3WH/N/rTTN6fepVp9adTfTr6k3p3WvGIZnfq
P7jTH7rfn5Y/6dGf5pT+r+9Pk0tFf7rvPnd/+nET9/VhpR79aV9vRX/6qrdaf+o7SKU/hRXw/hSc
i/7U5z7en4pFGh89xvvTZ9f+e/1pymOe/enenP89+tPwld3sT5vsyv7Et6/WNdOnPODC8XY2Bw5m
n99wBj0spsQflBg3QGEEbYLRD/apVmcDpiixjtX+VJ2t97TJ0HrUrfWoW4vIN9byw+HD2KaVM4vN
f9FS6EVOcj/ZmV8opvydO0X7/elZGbZqLr4k2/pCjSbPDszwaf+ECXNosHQM+bEnzTN9zY7ZMTTl
h4/GOM12i56c1UwhBkxbn+/Jpq3BJIdRQrkioWwklJ8DjWR/pQaymuZsp7vK8HiYDu1immbErEXp
cH9n/TryuQvmdbVUk3dxb+eea6DnRGzGTs81CKInI8I7iTDFnmNPme850kM0zgX59Ia+y2NTcrZS
YSIpRCOEtg4dQz7v0Y0KeaKHRoUk91Tc113S8wr3dVn6f2cN4Xd1T68afNvRzRp8soj32jEO3kHH
X+OeL2j658qHLuufMWs6/TMp6zL+ec0aD//cW+Llnwce8PLP8T1U/XP2coV/frua+WecXzeaw8dP
ozk+9BP+ud3Pq3bv3tTN2o1cq+mfRX4a/rnMr7v++XreFfzzt3ke/jlJ340KOe2rUSHb9Qr/fF/f
Hf8ckMf88369Vw0OsnezBs+s4f65aSP3zydDyD/ZdZfNQPy+9O1cF7v3G6dM64Mk8wPpyjNuLVtM
BN/lrviel8n6v/il7G66Rr7fOVyXiesVegQ9qsh6RJv7Q0q8U9xZQM7MP9IEj3f5CI+nH7xfhD1I
/YL8G8WYksk6huxWk30UHcMFt7fAFtulBdJOMm1pvLiOKq2Gye5O8qOz+n7RSUo4wSugty/1E7Y3
jX4SVBKsE5sLPLuvrBZ9mKZWjgVO56YHPDrjFEqqdKqRkr2JJas3OsxO2pnwF/tOUWt5sEjwdz6U
4J9Z1jq7azEL/RtCY2UKdQz5m64bTpij03DCCcweezbR4TfUx8uvdm3opl/9/iE2RgxX5oY/O8lj
bNbz35Qn8UEth98ByZ1gCW8ch8fXzZ7SUeZK+H7NOl0XXfGlM6fBI4sqae4pYZ/44nndwb/T1kQr
vHW15H3uOYZw5ygd2156zGN76dHO7adQzj/uwW/s5C9IjC/z4O2d/EHOP+HBb+rkt3P+SQ/eIXnc
1H6gnQ9K7Puf0goMSsvaPUatOpdC4TuM5cfe8hzWtiotvEMKT3la+INS4Q+k4OiShFKhkCXRzgbG
Y8nsIvfBsd+K7ndTcDuFN81ko2aHg2+XJcX4B+Gy4x9LZsBy/vUdd2/IV5pY2y0T+3OYnz7kkq7c
aya5JPVe0+5SpNuzW+neydL1e9vDJOtiacXd7GI3F7Cs72yXfkEXy2uXLtfFJihLMs3VnZKU3ctK
crqrYXd/LHvk3+iPd63ml6Wz69q6rgfT+IQJq9FxX5uLC5zoHC8jisd6pLjgglRA0xXnI4/QQqZn
0OsBocUXR+RjMMYoK39ojv5o1RhL6b26Ts1krjkdqmGkOtBcvMunyZ/drzTLu8xTkp15fz5G5z6g
GRJ9sCz6wGS8FT6Pv2Y7uXGScaG51GJMtCDIbMGvGDZhOuk8gca2ZDQk6Jqp5SLouuJi369mk8PD
5tFfUngYC/3K+Qnt5CINg3ttHWaCryVaHBajmbwuJugdi3Fh0Ds24630ZluwnV3zKAM2o4FK8hjt
7zlSaM//O+dz2fxKFIFritn+vlN3N9+BNThHZbMCU41YRh8mHSxtXbT6Syhyx4HJUOdf1/FuFiqc
JLBNkvLjiIug5N5dzXeIrxG9MUyo/XgJatEU4t6VPEAhMZgtpCkWz9zXPr1Evjat09ei3eMfI6Z3
ErcI4o+MiOskZihGo1Q2TbMZk52nMUU+lih7jFVZHexnxC7yZFMEG+b8O7EJ7DbNLmXJ+iJp2wSR
j2suafeSIJ7Kctih2/C7lJWx92epc+t8/8/aRnpzI2FZfKnf8HDHpN3dIGt+pkvEnXLHU6fF2uaC
Hh/fUfoDy1C+4RDvcE/AipsNsfZPzPYD6GSY/1lKrXyb6Ue2e3PaOeHhNn5f7KSzgm70Z3xh0Z1h
ow+61ehPOx7feOVuPt1htxCezfccpv91EW7QF25gENfau91e8NFF7Wr4hDvjdchz064uq5bCi4q6
3HAZI6wug52HlvK6LF9Dw4vK/UWMt8bQePtn8faf4u0/Jzh84lHA2B0wXGSJPnZ/ttnBv55nLp1o
vIFmjydig96ZGlYa92XxhV73G4plg21KsTw8fwZrpiKzrkfTDcr9kgz9BrOuRW5w0/5NAR/4RIh0
lpaZ5d3m6I/zXmnyheVx+/F7Vey4c4r9jU36MP2+oNd3IrXVw2I2thh1r+lsvjEbz5bsNAeZDvD4
MRu/zTvQRKHndunyA+L30OpGPvYC2/Ox0ETza4s9h7YaPzWPPiaGoM8t9hCjc3Yh2tmRgz7wXC57
cid2Tw8+QNuMUW/1ZhZOOf1oXIvOMUYFldCl4LbSAEN8abkRiaw1R38ab/866NGLPnT/9Zbrg0pO
0cs3FfH2nsqetOs83TTNof3KECONcP5B6+kJStREbNDr+rDiC2OD1h/qzDA0E+zfoHhUTyhivP3U
qjD8Weq5HzVjkz6qo3784+U98dGf5B2nm7e8nBgmP0+wf262H3emPyQGS+cbK9ktT/dn0mh4e8v9
XdtBdJGLTjFGBJUc14mSrqulglqiDyfYm4IebURw8RoJBaWnOM0VZioM2//qvHd54BxKZj/DChy0
fgB7JsSnqXf8Hp3MFpGnZgS9ExBVfHHV2vDS2ArypJ7FFy35tzZNNpf2bQxjfrPOrNsrN8wIet0U
pSu+kJU/rOma4os2G65uD+Zf3XSVm8jJ7xFfvMenyReFp9qI3egb7/CZzu1bH76q+OKKtYbii5m2
m4ovLs1PbOpdfHGmbXjxxVn5oynnoUW99E2Tiy+uzL+OrkChjt7Fh/9e/GFMk5Gz8Tpd06Dii8m2
nk0hxRcL8oOUWv723khIH1W88+3iC/1X93+zp+QvBb3w3qpebnePoRezJNNoZ6xujwnrd4/b3e7B
4B16LUltBf8nRkzsJJTPYr7s4qNbDPPuA87TS8h/j8MZjz3uOeetaBeaCfZPEmh4+8xZy5S/SrCf
TbBfPLaaKUzTjcWEZBMGtGN+zPa0lhvp/MlUBAxwdVwbDE1jQB0gajHpnmpjurUUcGIxnQvY7nUd
2d2qGLY+ab3CsBXjHLGED1vfFLR53DBVjl/rmivYcvZjk31XrL3ObMeKEoO5xbGDfQCaXeb5GrUn
zQyK22VbIL+WsDlZjj7MtGkbm7nFF8tKzmIv1Bs6JHuKPgI9dPc0Nttd3mmhNEcfWrRDT2OwZOtl
Xre7AT+aMHH5QwvbR/4a0zWMFUUPRUk2v00zFjUNZN8bXUS9EJeRmIh3DLzPyfs2rqe4H6w/jL86
c+lfSDJtXM7mrA2sLCk0D4+gBTYZGXkPv+hEsIW484v72mSMyrXFFzIeXlVqriy+qA965DXYKDU/
UXyxV9CGp2mmeCE7qIS9teaY9tQZNqAPDJekt+ijyM4DqCHTxirj42zKOu1+xtcwke851LDJ1UQf
ihEsljdbsul+14I2ufjCwrVBpea3iy/65t1afCHWNrnp98UXkm0Tii+k28YiV/kOdqsm6J3gcTvp
mTvavHDGYkxtGmku9Rs8gvp7wEaz7j35ML/FUjrxQVxsmLJzYA4946K8zb8a2Qtaz76R67jx5dMS
/3S6I4GtaELdqwj8mGkWKxg/6+nO5YfH63E3MFvb+FL76jNKLfpuq/Nt2hRxzMSkPiG0i/mOmSvt
rFAlPY6x034Qq+sKncf3UNnyrzP720/TJEax8n3nNLmQtbNDpLn7PxFBJfQmiuKtbF1HxPWcH+HB
D9WJG1WKuj5wDx1K7vJ6NYh9AXz7Yirijektl69I+KzfkBaNamxsUSynTrZcYTnFko1lyfo93+JV
53H53a/zQffw9dNrtjblkHdULNJZSl/QMPWp5yo+UIyewc43iZXBOk/No2Oy2/guJ3W5Y993eWBD
Eg8Ls0c2JtGy7GGnZMtQrMce5qus884zNlp0TMK1fWjxBbYem4X12F5z9K5VYzq16txapqE6UruH
rcUClnbMn2g9thjrMY8lcei4nU6fbL7LHdrxpI+/8510Pi4Ek+nnbHwy6na72FOYjPajFVGoc0AK
28sMUzwYEX1Ku9H+yR/mfRyxmt6hoR1j0PRVHbNzdwrfnVSM8sdOXmGUNzhvTeGj/Pm8jueBlcN7
sMcOaVnHDmlUBt8h3cJ3SHv4iq1P+sFHqx6Zih3SgYlsh7SnW62nr2KH9JCV75BuFQv5jWKHtCSH
75Bu9NghfSy9Y4dU8T175wkaQo537JAaPK8+9iWURA5NOc872+4kd6VH4WiJutjqMY4H5fDVqD/l
wCdHrCXEbmmw2C3tfY/nGuMelvo2sV3qbookFvq6Yrv0kWaPjR9l757RMUxOa9bo33pmbwPfWjnV
7NVly+/z3Mu5XJfNWsq2c043eWznlCl2S8oU2zl878bvhabOXZetYjunpbMNrM0sf3wYn9vcRRcp
02XUeTLXc4fGK809fPvInV16i9/5ZibbMQ32VYzp7k6jb5Yuu2fa2CRdds+0lvOae6ZVnNfcMy3h
/GX3TJeJoZC2fJ11yRji7vAcCv/pUii8QgrbPeePLygtbCKFJ9pVJphCIZsUNngq7FEqmEnh72LP
NEXsmT4lOuSln9kqrGmWuGh27P8fV1xgSo9f4QLD0mlY6DkAxihN3NYtE39gJobMOtaNvqM7ptF3
9h5TpLv/WHfSHcHS9dtwzKuj3bCi+x1NXsJyv9H5SzraZOdlO9olp6Iwft0qTPICVpg3uxp298rk
5f9Grxy+hF/3385RrhA8nk9L9N4/3aC9fzp9eXf3T0OXd2f/dBDfP40R+6c3sf3Tm9z7p3FmtmuK
oCjaP40Q+6d/WajcPzV07J/+6V7l/mmo2D+l+Sa1unj0yD0XoHnfGeeRNL7cD6Yr7Pqkjoej2d7o
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
Ouiihz4GGGKEMSaYYoY5mnyDbxgttNFBFz30McAQI4wxwRQzzNG8gfxooY0OuuihjwGGGGGMCaaY
YY7mWvKjhTY66KKHPgYYYoQxJphihjma68iPFtrooIse+hhgiBHGmGCKGeZoDpMfLbTRQRc99DHA
ECOMMcEUM8zR5Hz3MFpo49yji4/Labnj9tu3jWy448OfuGnkPe1b25uMsT2dyd0jfrc3PTE1ObK5
vaW9cWTDzl5ncmy8O/3uXndPtzPdHd28ZWTTe2+xN996k2G0p8enZ3oznZ1Ge3JqptvePbm/vXP/
xJ5dN0/sMsraeGd63GjvOjA5fWBv5UyvWkKeWmW0WFbk6UhDbu3bM2O0JyYniv+Lm+3dU8WNme5s
8b9X3Fs0mtrVmekY7e74qNfr7O2Oju/qna8Vax8bG+3OjnX3zYwW/dzTrVY22un1OgeM9tjMVG+6
6FfFZ8aKUFmdpC7WXHa4s3dizJC8VVeqbDuni+ZjU3v3didnLrmRL6PI+LuMmQ9Q3zpQ9+2N9isa
dflOQH7u3JTG63kA9YV1lTquv8qolw30QeP1PIG66q7zeVsL4nX8fiPr7uffV1fPM2ip16qJkecW
9F/H+VV3Zb3/Aw3loqvzC+L1PIKqCaX/Q8aFj//jLOvHc95C1fMWze2nj/9u4rdT1/Mgqp43Ka97
skj8OF3sP2sZ51Zfbv+PNeI3EqeueWe9/ZqGk4349/M6oq4x6mVVw8814nV+juo8PGgsLM313dOI
1/Ne6nWN9s3H/2Xidf8ZR4dqHr+m3r6Z/5uN+OO/Gqp543C9fTP/dxvxz/5xqOaJj9bbN4+/Rxvx
R24xa97/vkvnP2xU20i3sp4nnJ2pHGm0b+6/J8mv8XPEzxF/sf2v5Vgj/hDxh5YY/9tG/BHijxDf
bN+s/64Rf5T4o8SvbwQ0+3PKqI49jdfzWic/zxHJjtHtvvB3v6X0GvlPfpv4L7D9Gy94ze3/l0a8
nnc1DrIf+pdyXjz+7414/fs/98Cl97+Ws9zX3/7EH1li/Dz5Nzbu1/jtjftbizhoXFheJH5lY/s1
/378B10iHQeInAYA
#endif

#ifdef PARAM
PARAM(BITSTREAM_SIZE, 433288)
#endif
